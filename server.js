"format global";
(function(global) {

  var defined = {};

  // indexOf polyfill for IE8
  var indexOf = Array.prototype.indexOf || function(item) {
    for (var i = 0, l = this.length; i < l; i++)
      if (this[i] === item)
        return i;
    return -1;
  }

  var getOwnPropertyDescriptor = true;
  try {
    Object.getOwnPropertyDescriptor({ a: 0 }, 'a');
  }
  catch(e) {
    getOwnPropertyDescriptor = false;
  }

  var defineProperty;
  (function () {
    try {
      if (!!Object.defineProperty({}, 'a', {}))
        defineProperty = Object.defineProperty;
    }
    catch (e) {
      defineProperty = function(obj, prop, opt) {
        try {
          obj[prop] = opt.value || opt.get.call(obj);
        }
        catch(e) {}
      }
    }
  })();

  function register(name, deps, declare) {
    if (arguments.length === 4)
      return registerDynamic.apply(this, arguments);
    doRegister(name, {
      declarative: true,
      deps: deps,
      declare: declare
    });
  }

  function registerDynamic(name, deps, executingRequire, execute) {
    doRegister(name, {
      declarative: false,
      deps: deps,
      executingRequire: executingRequire,
      execute: execute
    });
  }

  function doRegister(name, entry) {
    entry.name = name;

    // we never overwrite an existing define
    if (!(name in defined))
      defined[name] = entry;

    // we have to normalize dependencies
    // (assume dependencies are normalized for now)
    // entry.normalizedDeps = entry.deps.map(normalize);
    entry.normalizedDeps = entry.deps;
  }


  function buildGroups(entry, groups) {
    groups[entry.groupIndex] = groups[entry.groupIndex] || [];

    if (indexOf.call(groups[entry.groupIndex], entry) != -1)
      return;

    groups[entry.groupIndex].push(entry);

    for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {
      var depName = entry.normalizedDeps[i];
      var depEntry = defined[depName];

      // not in the registry means already linked / ES6
      if (!depEntry || depEntry.evaluated)
        continue;

      // now we know the entry is in our unlinked linkage group
      var depGroupIndex = entry.groupIndex + (depEntry.declarative != entry.declarative);

      // the group index of an entry is always the maximum
      if (depEntry.groupIndex === undefined || depEntry.groupIndex < depGroupIndex) {

        // if already in a group, remove from the old group
        if (depEntry.groupIndex !== undefined) {
          groups[depEntry.groupIndex].splice(indexOf.call(groups[depEntry.groupIndex], depEntry), 1);

          // if the old group is empty, then we have a mixed depndency cycle
          if (groups[depEntry.groupIndex].length == 0)
            throw new TypeError("Mixed dependency cycle detected");
        }

        depEntry.groupIndex = depGroupIndex;
      }

      buildGroups(depEntry, groups);
    }
  }

  function link(name) {
    var startEntry = defined[name];

    startEntry.groupIndex = 0;

    var groups = [];

    buildGroups(startEntry, groups);

    var curGroupDeclarative = !!startEntry.declarative == groups.length % 2;
    for (var i = groups.length - 1; i >= 0; i--) {
      var group = groups[i];
      for (var j = 0; j < group.length; j++) {
        var entry = group[j];

        // link each group
        if (curGroupDeclarative)
          linkDeclarativeModule(entry);
        else
          linkDynamicModule(entry);
      }
      curGroupDeclarative = !curGroupDeclarative; 
    }
  }

  // module binding records
  var moduleRecords = {};
  function getOrCreateModuleRecord(name) {
    return moduleRecords[name] || (moduleRecords[name] = {
      name: name,
      dependencies: [],
      exports: {}, // start from an empty module and extend
      importers: []
    })
  }

  function linkDeclarativeModule(entry) {
    // only link if already not already started linking (stops at circular)
    if (entry.module)
      return;

    var module = entry.module = getOrCreateModuleRecord(entry.name);
    var exports = entry.module.exports;

    var declaration = entry.declare.call(global, function(name, value) {
      module.locked = true;

      if (typeof name == 'object') {
        for (var p in name)
          exports[p] = name[p];
      }
      else {
        exports[name] = value;
      }

      for (var i = 0, l = module.importers.length; i < l; i++) {
        var importerModule = module.importers[i];
        if (!importerModule.locked) {
          for (var j = 0; j < importerModule.dependencies.length; ++j) {
            if (importerModule.dependencies[j] === module) {
              importerModule.setters[j](exports);
            }
          }
        }
      }

      module.locked = false;
      return value;
    });

    module.setters = declaration.setters;
    module.execute = declaration.execute;

    // now link all the module dependencies
    for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {
      var depName = entry.normalizedDeps[i];
      var depEntry = defined[depName];
      var depModule = moduleRecords[depName];

      // work out how to set depExports based on scenarios...
      var depExports;

      if (depModule) {
        depExports = depModule.exports;
      }
      else if (depEntry && !depEntry.declarative) {
        depExports = depEntry.esModule;
      }
      // in the module registry
      else if (!depEntry) {
        depExports = load(depName);
      }
      // we have an entry -> link
      else {
        linkDeclarativeModule(depEntry);
        depModule = depEntry.module;
        depExports = depModule.exports;
      }

      // only declarative modules have dynamic bindings
      if (depModule && depModule.importers) {
        depModule.importers.push(module);
        module.dependencies.push(depModule);
      }
      else
        module.dependencies.push(null);

      // run the setter for this dependency
      if (module.setters[i])
        module.setters[i](depExports);
    }
  }

  // An analog to loader.get covering execution of all three layers (real declarative, simulated declarative, simulated dynamic)
  function getModule(name) {
    var exports;
    var entry = defined[name];

    if (!entry) {
      exports = load(name);
      if (!exports)
        throw new Error("Unable to load dependency " + name + ".");
    }

    else {
      if (entry.declarative)
        ensureEvaluated(name, []);

      else if (!entry.evaluated)
        linkDynamicModule(entry);

      exports = entry.module.exports;
    }

    if ((!entry || entry.declarative) && exports && exports.__useDefault)
      return exports['default'];

    return exports;
  }

  function linkDynamicModule(entry) {
    if (entry.module)
      return;

    var exports = {};

    var module = entry.module = { exports: exports, id: entry.name };

    // AMD requires execute the tree first
    if (!entry.executingRequire) {
      for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {
        var depName = entry.normalizedDeps[i];
        var depEntry = defined[depName];
        if (depEntry)
          linkDynamicModule(depEntry);
      }
    }

    // now execute
    entry.evaluated = true;
    var output = entry.execute.call(global, function(name) {
      for (var i = 0, l = entry.deps.length; i < l; i++) {
        if (entry.deps[i] != name)
          continue;
        return getModule(entry.normalizedDeps[i]);
      }
      throw new TypeError('Module ' + name + ' not declared as a dependency.');
    }, exports, module);

    if (output)
      module.exports = output;

    // create the esModule object, which allows ES6 named imports of dynamics
    exports = module.exports;
 
    if (exports && exports.__esModule) {
      entry.esModule = exports;
    }
    else {
      entry.esModule = {};
      
      // don't trigger getters/setters in environments that support them
      if (typeof exports == 'object' || typeof exports == 'function') {
        if (getOwnPropertyDescriptor) {
          var d;
          for (var p in exports)
            if (d = Object.getOwnPropertyDescriptor(exports, p))
              defineProperty(entry.esModule, p, d);
        }
        else {
          var hasOwnProperty = exports && exports.hasOwnProperty;
          for (var p in exports) {
            if (!hasOwnProperty || exports.hasOwnProperty(p))
              entry.esModule[p] = exports[p];
          }
         }
       }
      entry.esModule['default'] = exports;
      defineProperty(entry.esModule, '__useDefault', {
        value: true
      });
    }
  }

  /*
   * Given a module, and the list of modules for this current branch,
   *  ensure that each of the dependencies of this module is evaluated
   *  (unless one is a circular dependency already in the list of seen
   *  modules, in which case we execute it)
   *
   * Then we evaluate the module itself depth-first left to right 
   * execution to match ES6 modules
   */
  function ensureEvaluated(moduleName, seen) {
    var entry = defined[moduleName];

    // if already seen, that means it's an already-evaluated non circular dependency
    if (!entry || entry.evaluated || !entry.declarative)
      return;

    // this only applies to declarative modules which late-execute

    seen.push(moduleName);

    for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {
      var depName = entry.normalizedDeps[i];
      if (indexOf.call(seen, depName) == -1) {
        if (!defined[depName])
          load(depName);
        else
          ensureEvaluated(depName, seen);
      }
    }

    if (entry.evaluated)
      return;

    entry.evaluated = true;
    entry.module.execute.call(global);
  }

  // magical execution function
  var modules = {};
  function load(name) {
    if (modules[name])
      return modules[name];

    // node core modules
    if (name.substr(0, 6) == '@node/')
      return require(name.substr(6));

    var entry = defined[name];

    // first we check if this module has already been defined in the registry
    if (!entry)
      throw "Module " + name + " not present.";

    // recursively ensure that the module and all its 
    // dependencies are linked (with dependency group handling)
    link(name);

    // now handle dependency execution in correct order
    ensureEvaluated(name, []);

    // remove from the registry
    defined[name] = undefined;

    // exported modules get __esModule defined for interop
    if (entry.declarative)
      defineProperty(entry.module.exports, '__esModule', { value: true });

    // return the defined module object
    return modules[name] = entry.declarative ? entry.module.exports : entry.esModule;
  };

  return function(mains, depNames, declare) {
    return function(formatDetect) {
      formatDetect(function(deps) {
        var System = {
          _nodeRequire: typeof require != 'undefined' && require.resolve && typeof process != 'undefined' && require,
          register: register,
          registerDynamic: registerDynamic,
          get: load, 
          set: function(name, module) {
            modules[name] = module; 
          },
          newModule: function(module) {
            return module;
          }
        };
        System.set('@empty', {});

        // register external dependencies
        for (var i = 0; i < depNames.length; i++) (function(depName, dep) {
          if (dep && dep.__esModule)
            System.register(depName, [], function(_export) {
              return {
                setters: [],
                execute: function() {
                  for (var p in dep)
                    if (p != '__esModule' && !(typeof p == 'object' && p + '' == 'Module'))
                      _export(p, dep[p]);
                }
              };
            });
          else
            System.registerDynamic(depName, [], false, function() {
              return dep;
            });
        })(depNames[i], arguments[i]);

        // register modules in this bundle
        declare(System);

        // load mains
        var firstLoad = load(mains[0]);
        if (mains.length > 1)
          for (var i = 1; i < mains.length; i++)
            load(mains[i]);

        if (firstLoad.__useDefault)
          return firstLoad['default'];
        else
          return firstLoad;
      });
    };
  };

})(typeof self != 'undefined' ? self : global)
/* (['mainModule'], ['external-dep'], function($__System) {
  System.register(...);
})
(function(factory) {
  if (typeof define && define.amd)
    define(['external-dep'], factory);
  // etc UMD / module pattern
})*/

(['1'], [], function($__System) {

$__System.registerDynamic("2", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var $Object = Object;
  module.exports = {
    create: $Object.create,
    getProto: $Object.getPrototypeOf,
    isEnum: {}.propertyIsEnumerable,
    getDesc: $Object.getOwnPropertyDescriptor,
    setDesc: $Object.defineProperty,
    setDescs: $Object.defineProperties,
    getKeys: $Object.keys,
    getNames: $Object.getOwnPropertyNames,
    getSymbols: $Object.getOwnPropertySymbols,
    each: [].forEach
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("3", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var UNDEFINED = 'undefined';
  var global = module.exports = typeof window != UNDEFINED && window.Math == Math ? window : typeof self != UNDEFINED && self.Math == Math ? self : Function('return this')();
  if (typeof __g == 'number')
    __g = global;
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("4", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var hasOwnProperty = {}.hasOwnProperty;
  module.exports = function(it, key) {
    return hasOwnProperty.call(it, key);
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("5", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = function(exec) {
    try {
      return !!exec();
    } catch (e) {
      return true;
    }
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("6", ["5"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = !require("5")(function() {
    return Object.defineProperty({}, 'a', {get: function() {
        return 7;
      }}).a != 7;
  });
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("7", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var core = module.exports = {version: '1.2.0'};
  if (typeof __e == 'number')
    __e = core;
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("8", ["3", "7"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var global = require("3"),
      core = require("7"),
      PROTOTYPE = 'prototype';
  var ctx = function(fn, that) {
    return function() {
      return fn.apply(that, arguments);
    };
  };
  var $def = function(type, name, source) {
    var key,
        own,
        out,
        exp,
        isGlobal = type & $def.G,
        isProto = type & $def.P,
        target = isGlobal ? global : type & $def.S ? global[name] : (global[name] || {})[PROTOTYPE],
        exports = isGlobal ? core : core[name] || (core[name] = {});
    if (isGlobal)
      source = name;
    for (key in source) {
      own = !(type & $def.F) && target && key in target;
      if (own && key in exports)
        continue;
      out = own ? target[key] : source[key];
      if (isGlobal && typeof target[key] != 'function')
        exp = source[key];
      else if (type & $def.B && own)
        exp = ctx(out, global);
      else if (type & $def.W && target[key] == out)
        !function(C) {
          exp = function(param) {
            return this instanceof C ? new C(param) : C(param);
          };
          exp[PROTOTYPE] = C[PROTOTYPE];
        }(out);
      else
        exp = isProto && typeof out == 'function' ? ctx(Function.call, out) : out;
      exports[key] = exp;
      if (isProto)
        (exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
    }
  };
  $def.F = 1;
  $def.G = 2;
  $def.S = 4;
  $def.P = 8;
  $def.B = 16;
  $def.W = 32;
  module.exports = $def;
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("9", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = function(bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("a", ["2", "9", "6"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var $ = require("2"),
      createDesc = require("9");
  module.exports = require("6") ? function(object, key, value) {
    return $.setDesc(object, key, createDesc(1, value));
  } : function(object, key, value) {
    object[key] = value;
    return object;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("b", ["a"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("a");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("c", ["3"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var global = require("3"),
      SHARED = '__core-js_shared__',
      store = global[SHARED] || (global[SHARED] = {});
  module.exports = function(key) {
    return store[key] || (store[key] = {});
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("d", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var id = 0,
      px = Math.random();
  module.exports = function(key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("e", ["c", "3", "d"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var store = require("c")('wks'),
      Symbol = require("3").Symbol;
  module.exports = function(name) {
    return store[name] || (store[name] = Symbol && Symbol[name] || (Symbol || require("d"))('Symbol.' + name));
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("f", ["4", "a", "e"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var has = require("4"),
      hide = require("a"),
      TAG = require("e")('toStringTag');
  module.exports = function(it, tag, stat) {
    if (it && !has(it = stat ? it : it.prototype, TAG))
      hide(it, TAG, tag);
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("10", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var toString = {}.toString;
  module.exports = function(it) {
    return toString.call(it).slice(8, -1);
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("11", ["10"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var cof = require("10");
  module.exports = 0 in Object('z') ? Object : function(it) {
    return cof(it) == 'String' ? it.split('') : Object(it);
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("12", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = function(it) {
    if (it == undefined)
      throw TypeError("Can't call method on  " + it);
    return it;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("13", ["11", "12"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var IObject = require("11"),
      defined = require("12");
  module.exports = function(it) {
    return IObject(defined(it));
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("14", ["2", "13"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var $ = require("2"),
      toIObject = require("13");
  module.exports = function(object, el) {
    var O = toIObject(object),
        keys = $.getKeys(O),
        length = keys.length,
        index = 0,
        key;
    while (length > index)
      if (O[key = keys[index++]] === el)
        return key;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("15", ["13", "2"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var toString = {}.toString,
      toIObject = require("13"),
      getNames = require("2").getNames;
  var windowNames = typeof window == 'object' && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
  var getWindowNames = function(it) {
    try {
      return getNames(it);
    } catch (e) {
      return windowNames.slice();
    }
  };
  module.exports.get = function getOwnPropertyNames(it) {
    if (windowNames && toString.call(it) == '[object Window]')
      return getWindowNames(it);
    return getNames(toIObject(it));
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("16", ["2"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var $ = require("2");
  module.exports = function(it) {
    var keys = $.getKeys(it),
        getSymbols = $.getSymbols;
    if (getSymbols) {
      var symbols = getSymbols(it),
          isEnum = $.isEnum,
          i = 0,
          key;
      while (symbols.length > i)
        if (isEnum.call(it, key = symbols[i++]))
          keys.push(key);
    }
    return keys;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("17", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = function(it) {
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("18", ["17"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var isObject = require("17");
  module.exports = function(it) {
    if (!isObject(it))
      throw TypeError(it + ' is not an object!');
    return it;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("19", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = true;
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("1a", ["2", "3", "4", "6", "8", "b", "5", "c", "f", "d", "e", "14", "15", "16", "17", "18", "13", "9", "19"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var $ = require("2"),
      global = require("3"),
      has = require("4"),
      SUPPORT_DESC = require("6"),
      $def = require("8"),
      $redef = require("b"),
      $fails = require("5"),
      shared = require("c"),
      setTag = require("f"),
      uid = require("d"),
      wks = require("e"),
      keyOf = require("14"),
      $names = require("15"),
      enumKeys = require("16"),
      isObject = require("17"),
      anObject = require("18"),
      toIObject = require("13"),
      createDesc = require("9"),
      getDesc = $.getDesc,
      setDesc = $.setDesc,
      _create = $.create,
      getNames = $names.get,
      $Symbol = global.Symbol,
      setter = false,
      HIDDEN = wks('_hidden'),
      isEnum = $.isEnum,
      SymbolRegistry = shared('symbol-registry'),
      AllSymbols = shared('symbols'),
      useNative = typeof $Symbol == 'function',
      ObjectProto = Object.prototype;
  var setSymbolDesc = SUPPORT_DESC && $fails(function() {
    return _create(setDesc({}, 'a', {get: function() {
        return setDesc(this, 'a', {value: 7}).a;
      }})).a != 7;
  }) ? function(it, key, D) {
    var protoDesc = getDesc(ObjectProto, key);
    if (protoDesc)
      delete ObjectProto[key];
    setDesc(it, key, D);
    if (protoDesc && it !== ObjectProto)
      setDesc(ObjectProto, key, protoDesc);
  } : setDesc;
  var wrap = function(tag) {
    var sym = AllSymbols[tag] = _create($Symbol.prototype);
    sym._k = tag;
    SUPPORT_DESC && setter && setSymbolDesc(ObjectProto, tag, {
      configurable: true,
      set: function(value) {
        if (has(this, HIDDEN) && has(this[HIDDEN], tag))
          this[HIDDEN][tag] = false;
        setSymbolDesc(this, tag, createDesc(1, value));
      }
    });
    return sym;
  };
  var $defineProperty = function defineProperty(it, key, D) {
    if (D && has(AllSymbols, key)) {
      if (!D.enumerable) {
        if (!has(it, HIDDEN))
          setDesc(it, HIDDEN, createDesc(1, {}));
        it[HIDDEN][key] = true;
      } else {
        if (has(it, HIDDEN) && it[HIDDEN][key])
          it[HIDDEN][key] = false;
        D = _create(D, {enumerable: createDesc(0, false)});
      }
      return setSymbolDesc(it, key, D);
    }
    return setDesc(it, key, D);
  };
  var $defineProperties = function defineProperties(it, P) {
    anObject(it);
    var keys = enumKeys(P = toIObject(P)),
        i = 0,
        l = keys.length,
        key;
    while (l > i)
      $defineProperty(it, key = keys[i++], P[key]);
    return it;
  };
  var $create = function create(it, P) {
    return P === undefined ? _create(it) : $defineProperties(_create(it), P);
  };
  var $propertyIsEnumerable = function propertyIsEnumerable(key) {
    var E = isEnum.call(this, key);
    return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
  };
  var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
    var D = getDesc(it = toIObject(it), key);
    if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))
      D.enumerable = true;
    return D;
  };
  var $getOwnPropertyNames = function getOwnPropertyNames(it) {
    var names = getNames(toIObject(it)),
        result = [],
        i = 0,
        key;
    while (names.length > i)
      if (!has(AllSymbols, key = names[i++]) && key != HIDDEN)
        result.push(key);
    return result;
  };
  var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
    var names = getNames(toIObject(it)),
        result = [],
        i = 0,
        key;
    while (names.length > i)
      if (has(AllSymbols, key = names[i++]))
        result.push(AllSymbols[key]);
    return result;
  };
  if (!useNative) {
    $Symbol = function Symbol() {
      if (this instanceof $Symbol)
        throw TypeError('Symbol is not a constructor');
      return wrap(uid(arguments[0]));
    };
    $redef($Symbol.prototype, 'toString', function toString() {
      return this._k;
    });
    $.create = $create;
    $.isEnum = $propertyIsEnumerable;
    $.getDesc = $getOwnPropertyDescriptor;
    $.setDesc = $defineProperty;
    $.setDescs = $defineProperties;
    $.getNames = $names.get = $getOwnPropertyNames;
    $.getSymbols = $getOwnPropertySymbols;
    if (SUPPORT_DESC && !require("19")) {
      $redef(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
    }
  }
  if (!useNative || $fails(function() {
    return JSON.stringify([$Symbol()]) != '[null]';
  }))
    $redef($Symbol.prototype, 'toJSON', function toJSON() {
      if (useNative && isObject(this))
        return this;
    });
  var symbolStatics = {
    'for': function(key) {
      return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
    },
    keyFor: function keyFor(key) {
      return keyOf(SymbolRegistry, key);
    },
    useSetter: function() {
      setter = true;
    },
    useSimple: function() {
      setter = false;
    }
  };
  $.each.call(('hasInstance,isConcatSpreadable,iterator,match,replace,search,' + 'species,split,toPrimitive,toStringTag,unscopables').split(','), function(it) {
    var sym = wks(it);
    symbolStatics[it] = useNative ? sym : wrap(sym);
  });
  setter = true;
  $def($def.G + $def.W, {Symbol: $Symbol});
  $def($def.S, 'Symbol', symbolStatics);
  $def($def.S + $def.F * !useNative, 'Object', {
    create: $create,
    defineProperty: $defineProperty,
    defineProperties: $defineProperties,
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
    getOwnPropertyNames: $getOwnPropertyNames,
    getOwnPropertySymbols: $getOwnPropertySymbols
  });
  setTag($Symbol, 'Symbol');
  setTag(Math, 'Math', true);
  setTag(global.JSON, 'JSON', true);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("1b", ["1a", "7"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  require("1a");
  module.exports = require("7").Symbol;
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("1c", ["1b"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("1b");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("1d", ["1c"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": require("1c"),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("1e", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var ceil = Math.ceil,
      floor = Math.floor;
  module.exports = function(it) {
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("1f", ["1e", "12"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var toInteger = require("1e"),
      defined = require("12");
  module.exports = function(TO_STRING) {
    return function(that, pos) {
      var s = String(defined(that)),
          i = toInteger(pos),
          l = s.length,
          a,
          b;
      if (i < 0 || i >= l)
        return TO_STRING ? '' : undefined;
      a = s.charCodeAt(i);
      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    };
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("20", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = {};
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("21", ["2", "a", "e", "9", "f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var $ = require("2"),
      IteratorPrototype = {};
  require("a")(IteratorPrototype, require("e")('iterator'), function() {
    return this;
  });
  module.exports = function(Constructor, NAME, next) {
    Constructor.prototype = $.create(IteratorPrototype, {next: require("9")(1, next)});
    require("f")(Constructor, NAME + ' Iterator');
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("22", ["19", "8", "b", "a", "4", "e", "20", "21", "2", "f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var LIBRARY = require("19"),
      $def = require("8"),
      $redef = require("b"),
      hide = require("a"),
      has = require("4"),
      SYMBOL_ITERATOR = require("e")('iterator'),
      Iterators = require("20"),
      BUGGY = !([].keys && 'next' in [].keys()),
      FF_ITERATOR = '@@iterator',
      KEYS = 'keys',
      VALUES = 'values';
  var returnThis = function() {
    return this;
  };
  module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCE) {
    require("21")(Constructor, NAME, next);
    var createMethod = function(kind) {
      switch (kind) {
        case KEYS:
          return function keys() {
            return new Constructor(this, kind);
          };
        case VALUES:
          return function values() {
            return new Constructor(this, kind);
          };
      }
      return function entries() {
        return new Constructor(this, kind);
      };
    };
    var TAG = NAME + ' Iterator',
        proto = Base.prototype,
        _native = proto[SYMBOL_ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT],
        _default = _native || createMethod(DEFAULT),
        methods,
        key;
    if (_native) {
      var IteratorPrototype = require("2").getProto(_default.call(new Base));
      require("f")(IteratorPrototype, TAG, true);
      if (!LIBRARY && has(proto, FF_ITERATOR))
        hide(IteratorPrototype, SYMBOL_ITERATOR, returnThis);
    }
    if (!LIBRARY || FORCE)
      hide(proto, SYMBOL_ITERATOR, _default);
    Iterators[NAME] = _default;
    Iterators[TAG] = returnThis;
    if (DEFAULT) {
      methods = {
        keys: IS_SET ? _default : createMethod(KEYS),
        values: DEFAULT == VALUES ? _default : createMethod(VALUES),
        entries: DEFAULT != VALUES ? _default : createMethod('entries')
      };
      if (FORCE)
        for (key in methods) {
          if (!(key in proto))
            $redef(proto, key, methods[key]);
        }
      else
        $def($def.P + $def.F * BUGGY, NAME, methods);
    }
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("23", ["1f", "22"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var $at = require("1f")(true);
  require("22")(String, 'String', function(iterated) {
    this._t = String(iterated);
    this._i = 0;
  }, function() {
    var O = this._t,
        index = this._i,
        point;
    if (index >= O.length)
      return {
        value: undefined,
        done: true
      };
    point = $at(O, index);
    this._i += point.length;
    return {
      value: point,
      done: false
    };
  });
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("24", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = function() {};
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("25", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = function(done, value) {
    return {
      value: value,
      done: !!done
    };
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("26", ["24", "25", "20", "13", "22"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var setUnscope = require("24"),
      step = require("25"),
      Iterators = require("20"),
      toIObject = require("13");
  require("22")(Array, 'Array', function(iterated, kind) {
    this._t = toIObject(iterated);
    this._i = 0;
    this._k = kind;
  }, function() {
    var O = this._t,
        kind = this._k,
        index = this._i++;
    if (!O || index >= O.length) {
      this._t = undefined;
      return step(1);
    }
    if (kind == 'keys')
      return step(0, index);
    if (kind == 'values')
      return step(0, O[index]);
    return step(0, [index, O[index]]);
  }, 'values');
  Iterators.Arguments = Iterators.Array;
  setUnscope('keys');
  setUnscope('values');
  setUnscope('entries');
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("27", ["26", "20"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  require("26");
  var Iterators = require("20");
  Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("28", ["23", "27", "e"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  require("23");
  require("27");
  module.exports = require("e")('iterator');
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("29", ["28"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": require("28"),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("2a", ["2"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var $ = require("2");
  module.exports = function create(P, D) {
    return $.create(P, D);
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("2b", ["2a"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": require("2a"),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("2c", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("2d", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = function(it) {
    if (typeof it != 'function')
      throw TypeError(it + ' is not a function!');
    return it;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("2e", ["2d"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var aFunction = require("2d");
  module.exports = function(fn, that, length) {
    aFunction(fn);
    if (that === undefined)
      return fn;
    switch (length) {
      case 1:
        return function(a) {
          return fn.call(that, a);
        };
      case 2:
        return function(a, b) {
          return fn.call(that, a, b);
        };
      case 3:
        return function(a, b, c) {
          return fn.call(that, a, b, c);
        };
    }
    return function() {
      return fn.apply(that, arguments);
    };
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("2f", ["10", "e"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var cof = require("10"),
      TAG = require("e")('toStringTag'),
      ARG = cof(function() {
        return arguments;
      }()) == 'Arguments';
  module.exports = function(it) {
    var O,
        T,
        B;
    return it === undefined ? 'Undefined' : it === null ? 'Null' : typeof(T = (O = Object(it))[TAG]) == 'string' ? T : ARG ? cof(O) : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("30", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = function(it, Constructor, name) {
    if (!(it instanceof Constructor))
      throw TypeError(name + ": use the 'new' operator!");
    return it;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("31", ["18"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var anObject = require("18");
  module.exports = function(iterator, fn, value, entries) {
    try {
      return entries ? fn(anObject(value)[0], value[1]) : fn(value);
    } catch (e) {
      var ret = iterator['return'];
      if (ret !== undefined)
        anObject(ret.call(iterator));
      throw e;
    }
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("32", ["20", "e"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var Iterators = require("20"),
      ITERATOR = require("e")('iterator');
  module.exports = function(it) {
    return (Iterators.Array || Array.prototype[ITERATOR]) === it;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("33", ["1e"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var toInteger = require("1e"),
      min = Math.min;
  module.exports = function(it) {
    return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("34", ["2f", "e", "20", "7"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var classof = require("2f"),
      ITERATOR = require("e")('iterator'),
      Iterators = require("20");
  module.exports = require("7").getIteratorMethod = function(it) {
    if (it != undefined)
      return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("35", ["2e", "31", "32", "18", "33", "34"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var ctx = require("2e"),
      call = require("31"),
      isArrayIter = require("32"),
      anObject = require("18"),
      toLength = require("33"),
      getIterFn = require("34");
  module.exports = function(iterable, entries, fn, that) {
    var iterFn = getIterFn(iterable),
        f = ctx(fn, that, entries ? 2 : 1),
        index = 0,
        length,
        step,
        iterator;
    if (typeof iterFn != 'function')
      throw TypeError(iterable + ' is not iterable!');
    if (isArrayIter(iterFn))
      for (length = toLength(iterable.length); length > index; index++) {
        entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
      }
    else
      for (iterator = iterFn.call(iterable); !(step = iterator.next()).done; ) {
        call(iterator, f, step.value, entries);
      }
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("36", ["2", "17", "18", "2e"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var getDesc = require("2").getDesc,
      isObject = require("17"),
      anObject = require("18");
  var check = function(O, proto) {
    anObject(O);
    if (!isObject(proto) && proto !== null)
      throw TypeError(proto + ": can't set as prototype!");
  };
  module.exports = {
    set: Object.setPrototypeOf || ('__proto__' in {} ? function(test, buggy, set) {
      try {
        set = require("2e")(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) {
        buggy = true;
      }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy)
          O.__proto__ = proto;
        else
          set(O, proto);
        return O;
      };
    }({}, false) : undefined),
    check: check
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("37", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = Object.is || function is(x, y) {
    return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("38", ["2", "e", "6"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var $ = require("2"),
      SPECIES = require("e")('species');
  module.exports = function(C) {
    if (require("6") && !(SPECIES in C))
      $.setDesc(C, SPECIES, {
        configurable: true,
        get: function() {
          return this;
        }
      });
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("39", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = function(fn, args, that) {
    var un = that === undefined;
    switch (args.length) {
      case 0:
        return un ? fn() : fn.call(that);
      case 1:
        return un ? fn(args[0]) : fn.call(that, args[0]);
      case 2:
        return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);
      case 3:
        return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);
      case 4:
        return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
    }
    return fn.apply(that, args);
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("3a", ["3"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("3").document && document.documentElement;
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("3b", ["17", "3"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var isObject = require("17"),
      document = require("3").document,
      is = isObject(document) && isObject(document.createElement);
  module.exports = function(it) {
    return is ? document.createElement(it) : {};
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("3c", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var process = module.exports = {};
  var queue = [];
  var draining = false;
  function drainQueue() {
    if (draining) {
      return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while (len) {
      currentQueue = queue;
      queue = [];
      var i = -1;
      while (++i < len) {
        currentQueue[i]();
      }
      len = queue.length;
    }
    draining = false;
  }
  process.nextTick = function(fun) {
    queue.push(fun);
    if (!draining) {
      setTimeout(drainQueue, 0);
    }
  };
  process.title = 'browser';
  process.browser = true;
  process.env = {};
  process.argv = [];
  process.version = '';
  process.versions = {};
  function noop() {}
  process.on = noop;
  process.addListener = noop;
  process.once = noop;
  process.off = noop;
  process.removeListener = noop;
  process.removeAllListeners = noop;
  process.emit = noop;
  process.binding = function(name) {
    throw new Error('process.binding is not supported');
  };
  process.cwd = function() {
    return '/';
  };
  process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
  };
  process.umask = function() {
    return 0;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("3d", ["3c"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("3c");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("3e", ["3d"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = $__System._nodeRequire ? process : require("3d");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("3f", ["3e"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("3e");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("40", ["2e", "39", "3a", "3b", "3", "10", "3f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    var ctx = require("2e"),
        invoke = require("39"),
        html = require("3a"),
        cel = require("3b"),
        global = require("3"),
        process = global.process,
        setTask = global.setImmediate,
        clearTask = global.clearImmediate,
        MessageChannel = global.MessageChannel,
        counter = 0,
        queue = {},
        ONREADYSTATECHANGE = 'onreadystatechange',
        defer,
        channel,
        port;
    var run = function() {
      var id = +this;
      if (queue.hasOwnProperty(id)) {
        var fn = queue[id];
        delete queue[id];
        fn();
      }
    };
    var listner = function(event) {
      run.call(event.data);
    };
    if (!setTask || !clearTask) {
      setTask = function setImmediate(fn) {
        var args = [],
            i = 1;
        while (arguments.length > i)
          args.push(arguments[i++]);
        queue[++counter] = function() {
          invoke(typeof fn == 'function' ? fn : Function(fn), args);
        };
        defer(counter);
        return counter;
      };
      clearTask = function clearImmediate(id) {
        delete queue[id];
      };
      if (require("10")(process) == 'process') {
        defer = function(id) {
          process.nextTick(ctx(run, id, 1));
        };
      } else if (MessageChannel) {
        channel = new MessageChannel;
        port = channel.port2;
        channel.port1.onmessage = listner;
        defer = ctx(port.postMessage, port, 1);
      } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScript) {
        defer = function(id) {
          global.postMessage(id + '', '*');
        };
        global.addEventListener('message', listner, false);
      } else if (ONREADYSTATECHANGE in cel('script')) {
        defer = function(id) {
          html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function() {
            html.removeChild(this);
            run.call(id);
          };
        };
      } else {
        defer = function(id) {
          setTimeout(ctx(run, id, 1), 0);
        };
      }
    }
    module.exports = {
      set: setTask,
      clear: clearTask
    };
  })(require("3f"));
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("41", ["3", "40", "10", "3f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    var global = require("3"),
        macrotask = require("40").set,
        Observer = global.MutationObserver || global.WebKitMutationObserver,
        process = global.process,
        isNode = require("10")(process) == 'process',
        head,
        last,
        notify;
    var flush = function() {
      var parent,
          domain;
      if (isNode && (parent = process.domain)) {
        process.domain = null;
        parent.exit();
      }
      while (head) {
        domain = head.domain;
        if (domain)
          domain.enter();
        head.fn.call();
        if (domain)
          domain.exit();
        head = head.next;
      }
      last = undefined;
      if (parent)
        parent.enter();
    };
    if (isNode) {
      notify = function() {
        process.nextTick(flush);
      };
    } else if (Observer) {
      var toggle = 1,
          node = document.createTextNode('');
      new Observer(flush).observe(node, {characterData: true});
      notify = function() {
        node.data = toggle = -toggle;
      };
    } else {
      notify = function() {
        macrotask.call(global, flush);
      };
    }
    module.exports = function asap(fn) {
      var task = {
        fn: fn,
        next: undefined,
        domain: isNode && process.domain
      };
      if (last)
        last.next = task;
      if (!head) {
        head = task;
        notify();
      }
      last = task;
    };
  })(require("3f"));
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("42", ["b"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var $redef = require("b");
  module.exports = function(target, src) {
    for (var key in src)
      $redef(target, key, src[key]);
    return target;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("43", ["e"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var SYMBOL_ITERATOR = require("e")('iterator'),
      SAFE_CLOSING = false;
  try {
    var riter = [7][SYMBOL_ITERATOR]();
    riter['return'] = function() {
      SAFE_CLOSING = true;
    };
    Array.from(riter, function() {
      throw 2;
    });
  } catch (e) {}
  module.exports = function(exec) {
    if (!SAFE_CLOSING)
      return false;
    var safe = false;
    try {
      var arr = [7],
          iter = arr[SYMBOL_ITERATOR]();
      iter.next = function() {
        safe = true;
      };
      arr[SYMBOL_ITERATOR] = function() {
        return iter;
      };
      exec(arr);
    } catch (e) {}
    return safe;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("44", ["2", "19", "3", "2e", "2f", "8", "17", "18", "2d", "30", "35", "36", "37", "38", "e", "d", "41", "6", "42", "f", "7", "43", "3f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    var $ = require("2"),
        LIBRARY = require("19"),
        global = require("3"),
        ctx = require("2e"),
        classof = require("2f"),
        $def = require("8"),
        isObject = require("17"),
        anObject = require("18"),
        aFunction = require("2d"),
        strictNew = require("30"),
        forOf = require("35"),
        setProto = require("36").set,
        same = require("37"),
        species = require("38"),
        SPECIES = require("e")('species'),
        RECORD = require("d")('record'),
        asap = require("41"),
        PROMISE = 'Promise',
        process = global.process,
        isNode = classof(process) == 'process',
        P = global[PROMISE],
        Wrapper;
    var testResolve = function(sub) {
      var test = new P(function() {});
      if (sub)
        test.constructor = Object;
      return P.resolve(test) === test;
    };
    var useNative = function() {
      var works = false;
      function P2(x) {
        var self = new P(x);
        setProto(self, P2.prototype);
        return self;
      }
      try {
        works = P && P.resolve && testResolve();
        setProto(P2, P);
        P2.prototype = $.create(P.prototype, {constructor: {value: P2}});
        if (!(P2.resolve(5).then(function() {}) instanceof P2)) {
          works = false;
        }
        if (works && require("6")) {
          var thenableThenGotten = false;
          P.resolve($.setDesc({}, 'then', {get: function() {
              thenableThenGotten = true;
            }}));
          works = thenableThenGotten;
        }
      } catch (e) {
        works = false;
      }
      return works;
    }();
    var isPromise = function(it) {
      return isObject(it) && (useNative ? classof(it) == 'Promise' : RECORD in it);
    };
    var sameConstructor = function(a, b) {
      if (LIBRARY && a === P && b === Wrapper)
        return true;
      return same(a, b);
    };
    var getConstructor = function(C) {
      var S = anObject(C)[SPECIES];
      return S != undefined ? S : C;
    };
    var isThenable = function(it) {
      var then;
      return isObject(it) && typeof(then = it.then) == 'function' ? then : false;
    };
    var notify = function(record, isReject) {
      if (record.n)
        return;
      record.n = true;
      var chain = record.c;
      asap(function() {
        var value = record.v,
            ok = record.s == 1,
            i = 0;
        var run = function(react) {
          var cb = ok ? react.ok : react.fail,
              ret,
              then;
          try {
            if (cb) {
              if (!ok)
                record.h = true;
              ret = cb === true ? value : cb(value);
              if (ret === react.P) {
                react.rej(TypeError('Promise-chain cycle'));
              } else if (then = isThenable(ret)) {
                then.call(ret, react.res, react.rej);
              } else
                react.res(ret);
            } else
              react.rej(value);
          } catch (err) {
            react.rej(err);
          }
        };
        while (chain.length > i)
          run(chain[i++]);
        chain.length = 0;
        record.n = false;
        if (isReject)
          setTimeout(function() {
            var promise = record.p,
                handler,
                console;
            if (isUnhandled(promise)) {
              if (isNode) {
                process.emit('unhandledRejection', value, promise);
              } else if (handler = global.onunhandledrejection) {
                handler({
                  promise: promise,
                  reason: value
                });
              } else if ((console = global.console) && console.error) {
                console.error('Unhandled promise rejection', value);
              }
            }
            record.a = undefined;
          }, 1);
      });
    };
    var isUnhandled = function(promise) {
      var record = promise[RECORD],
          chain = record.a || record.c,
          i = 0,
          react;
      if (record.h)
        return false;
      while (chain.length > i) {
        react = chain[i++];
        if (react.fail || !isUnhandled(react.P))
          return false;
      }
      return true;
    };
    var $reject = function(value) {
      var record = this;
      if (record.d)
        return;
      record.d = true;
      record = record.r || record;
      record.v = value;
      record.s = 2;
      record.a = record.c.slice();
      notify(record, true);
    };
    var $resolve = function(value) {
      var record = this,
          then;
      if (record.d)
        return;
      record.d = true;
      record = record.r || record;
      try {
        if (then = isThenable(value)) {
          asap(function() {
            var wrapper = {
              r: record,
              d: false
            };
            try {
              then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
            } catch (e) {
              $reject.call(wrapper, e);
            }
          });
        } else {
          record.v = value;
          record.s = 1;
          notify(record, false);
        }
      } catch (e) {
        $reject.call({
          r: record,
          d: false
        }, e);
      }
    };
    if (!useNative) {
      P = function Promise(executor) {
        aFunction(executor);
        var record = {
          p: strictNew(this, P, PROMISE),
          c: [],
          a: undefined,
          s: 0,
          d: false,
          v: undefined,
          h: false,
          n: false
        };
        this[RECORD] = record;
        try {
          executor(ctx($resolve, record, 1), ctx($reject, record, 1));
        } catch (err) {
          $reject.call(record, err);
        }
      };
      require("42")(P.prototype, {
        then: function then(onFulfilled, onRejected) {
          var S = anObject(anObject(this).constructor)[SPECIES];
          var react = {
            ok: typeof onFulfilled == 'function' ? onFulfilled : true,
            fail: typeof onRejected == 'function' ? onRejected : false
          };
          var promise = react.P = new (S != undefined ? S : P)(function(res, rej) {
            react.res = res;
            react.rej = rej;
          });
          aFunction(react.res);
          aFunction(react.rej);
          var record = this[RECORD];
          record.c.push(react);
          if (record.a)
            record.a.push(react);
          if (record.s)
            notify(record, false);
          return promise;
        },
        'catch': function(onRejected) {
          return this.then(undefined, onRejected);
        }
      });
    }
    $def($def.G + $def.W + $def.F * !useNative, {Promise: P});
    require("f")(P, PROMISE);
    species(P);
    species(Wrapper = require("7")[PROMISE]);
    $def($def.S + $def.F * !useNative, PROMISE, {reject: function reject(r) {
        return new this(function(res, rej) {
          rej(r);
        });
      }});
    $def($def.S + $def.F * (!useNative || testResolve(true)), PROMISE, {resolve: function resolve(x) {
        return isPromise(x) && sameConstructor(x.constructor, this) ? x : new this(function(res) {
          res(x);
        });
      }});
    $def($def.S + $def.F * !(useNative && require("43")(function(iter) {
      P.all(iter)['catch'](function() {});
    })), PROMISE, {
      all: function all(iterable) {
        var C = getConstructor(this),
            values = [];
        return new C(function(res, rej) {
          forOf(iterable, false, values.push, values);
          var remaining = values.length,
              results = Array(remaining);
          if (remaining)
            $.each.call(values, function(promise, index) {
              C.resolve(promise).then(function(value) {
                results[index] = value;
                --remaining || res(results);
              }, rej);
            });
          else
            res(results);
        });
      },
      race: function race(iterable) {
        var C = getConstructor(this);
        return new C(function(res, rej) {
          forOf(iterable, false, function(promise) {
            C.resolve(promise).then(res, rej);
          });
        });
      }
    });
  })(require("3f"));
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("45", ["2c", "23", "27", "44", "7"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  require("2c");
  require("23");
  require("27");
  require("44");
  module.exports = require("7").Promise;
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("46", ["45"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": require("45"),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("47", ["1d", "29", "2b", "46", "3f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    "use strict";
    var _Symbol = require("1d")["default"];
    var _Symbol$iterator = require("29")["default"];
    var _Object$create = require("2b")["default"];
    var _Promise = require("46")["default"];
    !(function(global) {
      "use strict";
      var hasOwn = Object.prototype.hasOwnProperty;
      var undefined;
      var iteratorSymbol = typeof _Symbol === "function" && _Symbol$iterator || "@@iterator";
      var inModule = typeof module === "object";
      var runtime = global.regeneratorRuntime;
      if (runtime) {
        if (inModule) {
          module.exports = runtime;
        }
        return;
      }
      runtime = global.regeneratorRuntime = inModule ? module.exports : {};
      function wrap(innerFn, outerFn, self, tryLocsList) {
        var generator = _Object$create((outerFn || Generator).prototype);
        generator._invoke = makeInvokeMethod(innerFn, self || null, new Context(tryLocsList || []));
        return generator;
      }
      runtime.wrap = wrap;
      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }
      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed";
      var ContinueSentinel = {};
      function Generator() {}
      function GeneratorFunction() {}
      function GeneratorFunctionPrototype() {}
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
      GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
      GeneratorFunctionPrototype.constructor = GeneratorFunction;
      GeneratorFunction.displayName = "GeneratorFunction";
      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function(method) {
          prototype[method] = function(arg) {
            return this._invoke(method, arg);
          };
        });
      }
      runtime.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
      };
      runtime.mark = function(genFun) {
        genFun.__proto__ = GeneratorFunctionPrototype;
        genFun.prototype = _Object$create(Gp);
        return genFun;
      };
      runtime.awrap = function(arg) {
        return new AwaitArgument(arg);
      };
      function AwaitArgument(arg) {
        this.arg = arg;
      }
      function AsyncIterator(generator) {
        function invoke(method, arg) {
          var result = generator[method](arg);
          var value = result.value;
          return value instanceof AwaitArgument ? _Promise.resolve(value.arg).then(invokeNext, invokeThrow) : _Promise.resolve(value).then(function(unwrapped) {
            result.value = unwrapped;
            return result;
          });
        }
        if (typeof process === "object" && process.domain) {
          invoke = process.domain.bind(invoke);
        }
        var invokeNext = invoke.bind(generator, "next");
        var invokeThrow = invoke.bind(generator, "throw");
        var invokeReturn = invoke.bind(generator, "return");
        var previousPromise;
        function enqueue(method, arg) {
          var enqueueResult = previousPromise ? previousPromise.then(function() {
            return invoke(method, arg);
          }) : new _Promise(function(resolve) {
            resolve(invoke(method, arg));
          });
          previousPromise = enqueueResult["catch"](function(ignored) {});
          return enqueueResult;
        }
        this._invoke = enqueue;
      }
      defineIteratorMethods(AsyncIterator.prototype);
      runtime.async = function(innerFn, outerFn, self, tryLocsList) {
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
        return runtime.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
      };
      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }
          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            }
            return doneResult();
          }
          while (true) {
            var delegate = context.delegate;
            if (delegate) {
              if (method === "return" || method === "throw" && delegate.iterator[method] === undefined) {
                context.delegate = null;
                var returnMethod = delegate.iterator["return"];
                if (returnMethod) {
                  var record = tryCatch(returnMethod, delegate.iterator, arg);
                  if (record.type === "throw") {
                    method = "throw";
                    arg = record.arg;
                    continue;
                  }
                }
                if (method === "return") {
                  continue;
                }
              }
              var record = tryCatch(delegate.iterator[method], delegate.iterator, arg);
              if (record.type === "throw") {
                context.delegate = null;
                method = "throw";
                arg = record.arg;
                continue;
              }
              method = "next";
              arg = undefined;
              var info = record.arg;
              if (info.done) {
                context[delegate.resultName] = info.value;
                context.next = delegate.nextLoc;
              } else {
                state = GenStateSuspendedYield;
                return info;
              }
              context.delegate = null;
            }
            if (method === "next") {
              if (state === GenStateSuspendedYield) {
                context.sent = arg;
              } else {
                context.sent = undefined;
              }
            } else if (method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw arg;
              }
              if (context.dispatchException(arg)) {
                method = "next";
                arg = undefined;
              }
            } else if (method === "return") {
              context.abrupt("return", arg);
            }
            state = GenStateExecuting;
            var record = tryCatch(innerFn, self, context);
            if (record.type === "normal") {
              state = context.done ? GenStateCompleted : GenStateSuspendedYield;
              var info = {
                value: record.arg,
                done: context.done
              };
              if (record.arg === ContinueSentinel) {
                if (context.delegate && method === "next") {
                  arg = undefined;
                }
              } else {
                return info;
              }
            } else if (record.type === "throw") {
              state = GenStateCompleted;
              method = "throw";
              arg = record.arg;
            }
          }
        };
      }
      defineIteratorMethods(Gp);
      Gp[iteratorSymbol] = function() {
        return this;
      };
      Gp.toString = function() {
        return "[object Generator]";
      };
      function pushTryEntry(locs) {
        var entry = {tryLoc: locs[0]};
        if (1 in locs) {
          entry.catchLoc = locs[1];
        }
        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }
        this.tryEntries.push(entry);
      }
      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }
      function Context(tryLocsList) {
        this.tryEntries = [{tryLoc: "root"}];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }
      runtime.keys = function(object) {
        var keys = [];
        for (var key in object) {
          keys.push(key);
        }
        keys.reverse();
        return function next() {
          while (keys.length) {
            var key = keys.pop();
            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          }
          next.done = true;
          return next;
        };
      };
      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }
          if (typeof iterable.next === "function") {
            return iterable;
          }
          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
                  while (++i < iterable.length) {
                    if (hasOwn.call(iterable, i)) {
                      next.value = iterable[i];
                      next.done = false;
                      return next;
                    }
                  }
                  next.value = undefined;
                  next.done = true;
                  return next;
                };
            return next.next = next;
          }
        }
        return {next: doneResult};
      }
      runtime.values = values;
      function doneResult() {
        return {
          value: undefined,
          done: true
        };
      }
      Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          this.prev = 0;
          this.next = 0;
          this.sent = undefined;
          this.done = false;
          this.delegate = null;
          this.tryEntries.forEach(resetTryEntry);
          if (!skipTempReset) {
            for (var name in this) {
              if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                this[name] = undefined;
              }
            }
          }
        },
        stop: function stop() {
          this.done = true;
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;
          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) {
            throw exception;
          }
          var context = this;
          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;
            return !!caught;
          }
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;
            if (entry.tryLoc === "root") {
              return handle("end");
            }
            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");
              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }
          if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
            finallyEntry = null;
          }
          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;
          if (finallyEntry) {
            this.next = finallyEntry.finallyLoc;
          } else {
            this.complete(record);
          }
          return ContinueSentinel;
        },
        complete: function complete(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }
          if (record.type === "break" || record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = record.arg;
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
        "catch": function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;
              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }
              return thrown;
            }
          }
          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };
          return ContinueSentinel;
        }
      };
    })(typeof global === "object" ? global : typeof window === "object" ? window : typeof self === "object" ? self : undefined);
  })(require("3f"));
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("48", ["47"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var g = typeof global === "object" ? global : typeof window === "object" ? window : typeof self === "object" ? self : this;
  var hadRuntime = g.regeneratorRuntime && Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;
  var oldRuntime = hadRuntime && g.regeneratorRuntime;
  g.regeneratorRuntime = undefined;
  module.exports = require("47");
  if (hadRuntime) {
    g.regeneratorRuntime = oldRuntime;
  } else {
    try {
      delete g.regeneratorRuntime;
    } catch (e) {
      g.regeneratorRuntime = undefined;
    }
  }
  module.exports = {
    "default": module.exports,
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("49", ["48"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("48");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("4a", ["12"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var defined = require("12");
  module.exports = function(it) {
    return Object(defined(it));
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("4b", ["8", "7", "5"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = function(KEY, exec) {
    var $def = require("8"),
        fn = (require("7").Object || {})[KEY] || Object[KEY],
        exp = {};
    exp[KEY] = exec(fn);
    $def($def.S + $def.F * require("5")(function() {
      fn(1);
    }), 'Object', exp);
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("4c", ["4a", "4b"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var toObject = require("4a");
  require("4b")('keys', function($keys) {
    return function keys(it) {
      return $keys(toObject(it));
    };
  });
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("4d", ["4c", "7"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  require("4c");
  module.exports = require("7").Object.keys;
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("4e", ["4d"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": require("4d"),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("4f", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var y = d * 365.25;
  module.exports = function(val, options) {
    options = options || {};
    if ('string' == typeof val)
      return parse(val);
    return options.long ? long(val) : short(val);
  };
  function parse(str) {
    str = '' + str;
    if (str.length > 10000)
      return;
    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
    if (!match)
      return;
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y;
      case 'days':
      case 'day':
      case 'd':
        return n * d;
      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h;
      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m;
      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s;
      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n;
    }
  }
  function short(ms) {
    if (ms >= d)
      return Math.round(ms / d) + 'd';
    if (ms >= h)
      return Math.round(ms / h) + 'h';
    if (ms >= m)
      return Math.round(ms / m) + 'm';
    if (ms >= s)
      return Math.round(ms / s) + 's';
    return ms + 'ms';
  }
  function long(ms) {
    return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
  }
  function plural(ms, n, name) {
    if (ms < n)
      return;
    if (ms < n * 1.5)
      return Math.floor(ms / n) + ' ' + name;
    return Math.ceil(ms / n) + ' ' + name + 's';
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("50", ["4f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("4f");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("51", ["50"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  exports = module.exports = debug;
  exports.coerce = coerce;
  exports.disable = disable;
  exports.enable = enable;
  exports.enabled = enabled;
  exports.humanize = require("50");
  exports.names = [];
  exports.skips = [];
  exports.formatters = {};
  var prevColor = 0;
  var prevTime;
  function selectColor() {
    return exports.colors[prevColor++ % exports.colors.length];
  }
  function debug(namespace) {
    function disabled() {}
    disabled.enabled = false;
    function enabled() {
      var self = enabled;
      var curr = +new Date();
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;
      if (null == self.useColors)
        self.useColors = exports.useColors();
      if (null == self.color && self.useColors)
        self.color = selectColor();
      var args = Array.prototype.slice.call(arguments);
      args[0] = exports.coerce(args[0]);
      if ('string' !== typeof args[0]) {
        args = ['%o'].concat(args);
      }
      var index = 0;
      args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
        if (match === '%%')
          return match;
        index++;
        var formatter = exports.formatters[format];
        if ('function' === typeof formatter) {
          var val = args[index];
          match = formatter.call(self, val);
          args.splice(index, 1);
          index--;
        }
        return match;
      });
      if ('function' === typeof exports.formatArgs) {
        args = exports.formatArgs.apply(self, args);
      }
      var logFn = enabled.log || exports.log || console.log.bind(console);
      logFn.apply(self, args);
    }
    enabled.enabled = true;
    var fn = exports.enabled(namespace) ? enabled : disabled;
    fn.namespace = namespace;
    return fn;
  }
  function enable(namespaces) {
    exports.save(namespaces);
    var split = (namespaces || '').split(/[\s,]+/);
    var len = split.length;
    for (var i = 0; i < len; i++) {
      if (!split[i])
        continue;
      namespaces = split[i].replace(/\*/g, '.*?');
      if (namespaces[0] === '-') {
        exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        exports.names.push(new RegExp('^' + namespaces + '$'));
      }
    }
  }
  function disable() {
    exports.enable('');
  }
  function enabled(name) {
    var i,
        len;
    for (i = 0, len = exports.skips.length; i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = exports.names.length; i < len; i++) {
      if (exports.names[i].test(name)) {
        return true;
      }
    }
    return false;
  }
  function coerce(val) {
    if (val instanceof Error)
      return val.stack || val.message;
    return val;
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("52", ["51"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  exports = module.exports = require("51");
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();
  exports.colors = ['lightseagreen', 'forestgreen', 'goldenrod', 'dodgerblue', 'darkorchid', 'crimson'];
  function useColors() {
    return ('WebkitAppearance' in document.documentElement.style) || (window.console && (console.firebug || (console.exception && console.table))) || (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
  }
  exports.formatters.j = function(v) {
    return JSON.stringify(v);
  };
  function formatArgs() {
    var args = arguments;
    var useColors = this.useColors;
    args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);
    if (!useColors)
      return args;
    var c = 'color: ' + this.color;
    args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-z%]/g, function(match) {
      if ('%%' === match)
        return;
      index++;
      if ('%c' === match) {
        lastC = index;
      }
    });
    args.splice(lastC, 0, c);
    return args;
  }
  function log() {
    return 'object' === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);
  }
  function save(namespaces) {
    try {
      if (null == namespaces) {
        exports.storage.removeItem('debug');
      } else {
        exports.storage.debug = namespaces;
      }
    } catch (e) {}
  }
  function load() {
    var r;
    try {
      r = exports.storage.debug;
    } catch (e) {}
    return r;
  }
  exports.enable(load());
  function localstorage() {
    try {
      return window.localStorage;
    } catch (e) {}
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("53", ["52"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("52");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("54", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  function EventEmitter() {
    this._events = this._events || {};
    this._maxListeners = this._maxListeners || undefined;
  }
  module.exports = EventEmitter;
  EventEmitter.EventEmitter = EventEmitter;
  EventEmitter.prototype._events = undefined;
  EventEmitter.prototype._maxListeners = undefined;
  EventEmitter.defaultMaxListeners = 10;
  EventEmitter.prototype.setMaxListeners = function(n) {
    if (!isNumber(n) || n < 0 || isNaN(n))
      throw TypeError('n must be a positive number');
    this._maxListeners = n;
    return this;
  };
  EventEmitter.prototype.emit = function(type) {
    var er,
        handler,
        len,
        args,
        i,
        listeners;
    if (!this._events)
      this._events = {};
    if (type === 'error') {
      if (!this._events.error || (isObject(this._events.error) && !this._events.error.length)) {
        er = arguments[1];
        if (er instanceof Error) {
          throw er;
        }
        throw TypeError('Uncaught, unspecified "error" event.');
      }
    }
    handler = this._events[type];
    if (isUndefined(handler))
      return false;
    if (isFunction(handler)) {
      switch (arguments.length) {
        case 1:
          handler.call(this);
          break;
        case 2:
          handler.call(this, arguments[1]);
          break;
        case 3:
          handler.call(this, arguments[1], arguments[2]);
          break;
        default:
          len = arguments.length;
          args = new Array(len - 1);
          for (i = 1; i < len; i++)
            args[i - 1] = arguments[i];
          handler.apply(this, args);
      }
    } else if (isObject(handler)) {
      len = arguments.length;
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      listeners = handler.slice();
      len = listeners.length;
      for (i = 0; i < len; i++)
        listeners[i].apply(this, args);
    }
    return true;
  };
  EventEmitter.prototype.addListener = function(type, listener) {
    var m;
    if (!isFunction(listener))
      throw TypeError('listener must be a function');
    if (!this._events)
      this._events = {};
    if (this._events.newListener)
      this.emit('newListener', type, isFunction(listener.listener) ? listener.listener : listener);
    if (!this._events[type])
      this._events[type] = listener;
    else if (isObject(this._events[type]))
      this._events[type].push(listener);
    else
      this._events[type] = [this._events[type], listener];
    if (isObject(this._events[type]) && !this._events[type].warned) {
      var m;
      if (!isUndefined(this._maxListeners)) {
        m = this._maxListeners;
      } else {
        m = EventEmitter.defaultMaxListeners;
      }
      if (m && m > 0 && this._events[type].length > m) {
        this._events[type].warned = true;
        console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);
        if (typeof console.trace === 'function') {
          console.trace();
        }
      }
    }
    return this;
  };
  EventEmitter.prototype.on = EventEmitter.prototype.addListener;
  EventEmitter.prototype.once = function(type, listener) {
    if (!isFunction(listener))
      throw TypeError('listener must be a function');
    var fired = false;
    function g() {
      this.removeListener(type, g);
      if (!fired) {
        fired = true;
        listener.apply(this, arguments);
      }
    }
    g.listener = listener;
    this.on(type, g);
    return this;
  };
  EventEmitter.prototype.removeListener = function(type, listener) {
    var list,
        position,
        length,
        i;
    if (!isFunction(listener))
      throw TypeError('listener must be a function');
    if (!this._events || !this._events[type])
      return this;
    list = this._events[type];
    length = list.length;
    position = -1;
    if (list === listener || (isFunction(list.listener) && list.listener === listener)) {
      delete this._events[type];
      if (this._events.removeListener)
        this.emit('removeListener', type, listener);
    } else if (isObject(list)) {
      for (i = length; i-- > 0; ) {
        if (list[i] === listener || (list[i].listener && list[i].listener === listener)) {
          position = i;
          break;
        }
      }
      if (position < 0)
        return this;
      if (list.length === 1) {
        list.length = 0;
        delete this._events[type];
      } else {
        list.splice(position, 1);
      }
      if (this._events.removeListener)
        this.emit('removeListener', type, listener);
    }
    return this;
  };
  EventEmitter.prototype.removeAllListeners = function(type) {
    var key,
        listeners;
    if (!this._events)
      return this;
    if (!this._events.removeListener) {
      if (arguments.length === 0)
        this._events = {};
      else if (this._events[type])
        delete this._events[type];
      return this;
    }
    if (arguments.length === 0) {
      for (key in this._events) {
        if (key === 'removeListener')
          continue;
        this.removeAllListeners(key);
      }
      this.removeAllListeners('removeListener');
      this._events = {};
      return this;
    }
    listeners = this._events[type];
    if (isFunction(listeners)) {
      this.removeListener(type, listeners);
    } else {
      while (listeners.length)
        this.removeListener(type, listeners[listeners.length - 1]);
    }
    delete this._events[type];
    return this;
  };
  EventEmitter.prototype.listeners = function(type) {
    var ret;
    if (!this._events || !this._events[type])
      ret = [];
    else if (isFunction(this._events[type]))
      ret = [this._events[type]];
    else
      ret = this._events[type].slice();
    return ret;
  };
  EventEmitter.listenerCount = function(emitter, type) {
    var ret;
    if (!emitter._events || !emitter._events[type])
      ret = 0;
    else if (isFunction(emitter._events[type]))
      ret = 1;
    else
      ret = emitter._events[type].length;
    return ret;
  };
  function isFunction(arg) {
    return typeof arg === 'function';
  }
  function isNumber(arg) {
    return typeof arg === 'number';
  }
  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }
  function isUndefined(arg) {
    return arg === void 0;
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("55", ["54"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("54");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("56", ["55"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = $__System._nodeRequire ? $__System._nodeRequire('events') : require("55");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("57", ["56"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("56");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("58", ["3f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  (function(process) {
    !function(e) {
      if ("object" == typeof exports && "undefined" != typeof module)
        module.exports = e();
      else if ("function" == typeof define && define.amd)
        define([], e);
      else {
        var f;
        "undefined" != typeof window ? f = window : "undefined" != typeof global ? f = global : "undefined" != typeof self && (f = self), f.Promise = e();
      }
    }(function() {
      var define,
          module,
          exports;
      return (function e(t, n, r) {
        function s(o, u) {
          if (!n[o]) {
            if (!t[o]) {
              var a = typeof _dereq_ == "function" && _dereq_;
              if (!u && a)
                return a(o, !0);
              if (i)
                return i(o, !0);
              var f = new Error("Cannot find module '" + o + "'");
              throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {exports: {}};
            t[o][0].call(l.exports, function(e) {
              var n = t[o][1][e];
              return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
          }
          return n[o].exports;
        }
        var i = typeof _dereq_ == "function" && _dereq_;
        for (var o = 0; o < r.length; o++)
          s(r[o]);
        return s;
      })({
        1: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(Promise) {
            var SomePromiseArray = Promise._SomePromiseArray;
            function any(promises) {
              var ret = new SomePromiseArray(promises);
              var promise = ret.promise();
              ret.setHowMany(1);
              ret.setUnwrap();
              ret.init();
              return promise;
            }
            Promise.any = function(promises) {
              return any(promises);
            };
            Promise.prototype.any = function() {
              return any(this);
            };
          };
        }, {}],
        2: [function(_dereq_, module, exports) {
          "use strict";
          var firstLineError;
          try {
            throw new Error();
          } catch (e) {
            firstLineError = e;
          }
          var schedule = _dereq_("./schedule.js");
          var Queue = _dereq_("./queue.js");
          var util = _dereq_("./util.js");
          function Async() {
            this._isTickUsed = false;
            this._lateQueue = new Queue(16);
            this._normalQueue = new Queue(16);
            this._trampolineEnabled = true;
            var self = this;
            this.drainQueues = function() {
              self._drainQueues();
            };
            this._schedule = schedule.isStatic ? schedule(this.drainQueues) : schedule;
          }
          Async.prototype.disableTrampolineIfNecessary = function() {
            if (util.hasDevTools) {
              this._trampolineEnabled = false;
            }
          };
          Async.prototype.enableTrampoline = function() {
            if (!this._trampolineEnabled) {
              this._trampolineEnabled = true;
              this._schedule = function(fn) {
                setTimeout(fn, 0);
              };
            }
          };
          Async.prototype.haveItemsQueued = function() {
            return this._normalQueue.length() > 0;
          };
          Async.prototype.throwLater = function(fn, arg) {
            if (arguments.length === 1) {
              arg = fn;
              fn = function() {
                throw arg;
              };
            }
            if (typeof setTimeout !== "undefined") {
              setTimeout(function() {
                fn(arg);
              }, 0);
            } else
              try {
                this._schedule(function() {
                  fn(arg);
                });
              } catch (e) {
                throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/m3OTXk\u000a");
              }
          };
          function AsyncInvokeLater(fn, receiver, arg) {
            this._lateQueue.push(fn, receiver, arg);
            this._queueTick();
          }
          function AsyncInvoke(fn, receiver, arg) {
            this._normalQueue.push(fn, receiver, arg);
            this._queueTick();
          }
          function AsyncSettlePromises(promise) {
            this._normalQueue._pushOne(promise);
            this._queueTick();
          }
          if (!util.hasDevTools) {
            Async.prototype.invokeLater = AsyncInvokeLater;
            Async.prototype.invoke = AsyncInvoke;
            Async.prototype.settlePromises = AsyncSettlePromises;
          } else {
            if (schedule.isStatic) {
              schedule = function(fn) {
                setTimeout(fn, 0);
              };
            }
            Async.prototype.invokeLater = function(fn, receiver, arg) {
              if (this._trampolineEnabled) {
                AsyncInvokeLater.call(this, fn, receiver, arg);
              } else {
                this._schedule(function() {
                  setTimeout(function() {
                    fn.call(receiver, arg);
                  }, 100);
                });
              }
            };
            Async.prototype.invoke = function(fn, receiver, arg) {
              if (this._trampolineEnabled) {
                AsyncInvoke.call(this, fn, receiver, arg);
              } else {
                this._schedule(function() {
                  fn.call(receiver, arg);
                });
              }
            };
            Async.prototype.settlePromises = function(promise) {
              if (this._trampolineEnabled) {
                AsyncSettlePromises.call(this, promise);
              } else {
                this._schedule(function() {
                  promise._settlePromises();
                });
              }
            };
          }
          Async.prototype.invokeFirst = function(fn, receiver, arg) {
            this._normalQueue.unshift(fn, receiver, arg);
            this._queueTick();
          };
          Async.prototype._drainQueue = function(queue) {
            while (queue.length() > 0) {
              var fn = queue.shift();
              if (typeof fn !== "function") {
                fn._settlePromises();
                continue;
              }
              var receiver = queue.shift();
              var arg = queue.shift();
              fn.call(receiver, arg);
            }
          };
          Async.prototype._drainQueues = function() {
            this._drainQueue(this._normalQueue);
            this._reset();
            this._drainQueue(this._lateQueue);
          };
          Async.prototype._queueTick = function() {
            if (!this._isTickUsed) {
              this._isTickUsed = true;
              this._schedule(this.drainQueues);
            }
          };
          Async.prototype._reset = function() {
            this._isTickUsed = false;
          };
          module.exports = new Async();
          module.exports.firstLineError = firstLineError;
        }, {
          "./queue.js": 28,
          "./schedule.js": 31,
          "./util.js": 38
        }],
        3: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(Promise, INTERNAL, tryConvertToPromise) {
            var rejectThis = function(_, e) {
              this._reject(e);
            };
            var targetRejected = function(e, context) {
              context.promiseRejectionQueued = true;
              context.bindingPromise._then(rejectThis, rejectThis, null, this, e);
            };
            var bindingResolved = function(thisArg, context) {
              if (this._isPending()) {
                this._resolveCallback(context.target);
              }
            };
            var bindingRejected = function(e, context) {
              if (!context.promiseRejectionQueued)
                this._reject(e);
            };
            Promise.prototype.bind = function(thisArg) {
              var maybePromise = tryConvertToPromise(thisArg);
              var ret = new Promise(INTERNAL);
              ret._propagateFrom(this, 1);
              var target = this._target();
              ret._setBoundTo(maybePromise);
              if (maybePromise instanceof Promise) {
                var context = {
                  promiseRejectionQueued: false,
                  promise: ret,
                  target: target,
                  bindingPromise: maybePromise
                };
                target._then(INTERNAL, targetRejected, ret._progress, ret, context);
                maybePromise._then(bindingResolved, bindingRejected, ret._progress, ret, context);
              } else {
                ret._resolveCallback(target);
              }
              return ret;
            };
            Promise.prototype._setBoundTo = function(obj) {
              if (obj !== undefined) {
                this._bitField = this._bitField | 131072;
                this._boundTo = obj;
              } else {
                this._bitField = this._bitField & (~131072);
              }
            };
            Promise.prototype._isBound = function() {
              return (this._bitField & 131072) === 131072;
            };
            Promise.bind = function(thisArg, value) {
              var maybePromise = tryConvertToPromise(thisArg);
              var ret = new Promise(INTERNAL);
              ret._setBoundTo(maybePromise);
              if (maybePromise instanceof Promise) {
                maybePromise._then(function() {
                  ret._resolveCallback(value);
                }, ret._reject, ret._progress, ret, null);
              } else {
                ret._resolveCallback(value);
              }
              return ret;
            };
          };
        }, {}],
        4: [function(_dereq_, module, exports) {
          "use strict";
          var old;
          if (typeof Promise !== "undefined")
            old = Promise;
          function noConflict() {
            try {
              if (Promise === bluebird)
                Promise = old;
            } catch (e) {}
            return bluebird;
          }
          var bluebird = _dereq_("./promise.js")();
          bluebird.noConflict = noConflict;
          module.exports = bluebird;
        }, {"./promise.js": 23}],
        5: [function(_dereq_, module, exports) {
          "use strict";
          var cr = Object.create;
          if (cr) {
            var callerCache = cr(null);
            var getterCache = cr(null);
            callerCache[" size"] = getterCache[" size"] = 0;
          }
          module.exports = function(Promise) {
            var util = _dereq_("./util.js");
            var canEvaluate = util.canEvaluate;
            var isIdentifier = util.isIdentifier;
            var getMethodCaller;
            var getGetter;
            if (!true) {
              var makeMethodCaller = function(methodName) {
                return new Function("ensureMethod", "                                    \n\
        return function(obj) {                                               \n\
            'use strict'                                                     \n\
            var len = this.length;                                           \n\
            ensureMethod(obj, 'methodName');                                 \n\
            switch(len) {                                                    \n\
                case 1: return obj.methodName(this[0]);                      \n\
                case 2: return obj.methodName(this[0], this[1]);             \n\
                case 3: return obj.methodName(this[0], this[1], this[2]);    \n\
                case 0: return obj.methodName();                             \n\
                default:                                                     \n\
                    return obj.methodName.apply(obj, this);                  \n\
            }                                                                \n\
        };                                                                   \n\
        ".replace(/methodName/g, methodName))(ensureMethod);
              };
              var makeGetter = function(propertyName) {
                return new Function("obj", "                                             \n\
        'use strict';                                                        \n\
        return obj.propertyName;                                             \n\
        ".replace("propertyName", propertyName));
              };
              var getCompiled = function(name, compiler, cache) {
                var ret = cache[name];
                if (typeof ret !== "function") {
                  if (!isIdentifier(name)) {
                    return null;
                  }
                  ret = compiler(name);
                  cache[name] = ret;
                  cache[" size"]++;
                  if (cache[" size"] > 512) {
                    var keys = Object.keys(cache);
                    for (var i = 0; i < 256; ++i)
                      delete cache[keys[i]];
                    cache[" size"] = keys.length - 256;
                  }
                }
                return ret;
              };
              getMethodCaller = function(name) {
                return getCompiled(name, makeMethodCaller, callerCache);
              };
              getGetter = function(name) {
                return getCompiled(name, makeGetter, getterCache);
              };
            }
            function ensureMethod(obj, methodName) {
              var fn;
              if (obj != null)
                fn = obj[methodName];
              if (typeof fn !== "function") {
                var message = "Object " + util.classString(obj) + " has no method '" + util.toString(methodName) + "'";
                throw new Promise.TypeError(message);
              }
              return fn;
            }
            function caller(obj) {
              var methodName = this.pop();
              var fn = ensureMethod(obj, methodName);
              return fn.apply(obj, this);
            }
            Promise.prototype.call = function(methodName) {
              var $_len = arguments.length;
              var args = new Array($_len - 1);
              for (var $_i = 1; $_i < $_len; ++$_i) {
                args[$_i - 1] = arguments[$_i];
              }
              if (!true) {
                if (canEvaluate) {
                  var maybeCaller = getMethodCaller(methodName);
                  if (maybeCaller !== null) {
                    return this._then(maybeCaller, undefined, undefined, args, undefined);
                  }
                }
              }
              args.push(methodName);
              return this._then(caller, undefined, undefined, args, undefined);
            };
            function namedGetter(obj) {
              return obj[this];
            }
            function indexedGetter(obj) {
              var index = +this;
              if (index < 0)
                index = Math.max(0, index + obj.length);
              return obj[index];
            }
            Promise.prototype.get = function(propertyName) {
              var isIndex = (typeof propertyName === "number");
              var getter;
              if (!isIndex) {
                if (canEvaluate) {
                  var maybeGetter = getGetter(propertyName);
                  getter = maybeGetter !== null ? maybeGetter : namedGetter;
                } else {
                  getter = namedGetter;
                }
              } else {
                getter = indexedGetter;
              }
              return this._then(getter, undefined, undefined, propertyName, undefined);
            };
          };
        }, {"./util.js": 38}],
        6: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(Promise) {
            var errors = _dereq_("./errors.js");
            var async = _dereq_("./async.js");
            var CancellationError = errors.CancellationError;
            Promise.prototype._cancel = function(reason) {
              if (!this.isCancellable())
                return this;
              var parent;
              var promiseToReject = this;
              while ((parent = promiseToReject._cancellationParent) !== undefined && parent.isCancellable()) {
                promiseToReject = parent;
              }
              this._unsetCancellable();
              promiseToReject._target()._rejectCallback(reason, false, true);
            };
            Promise.prototype.cancel = function(reason) {
              if (!this.isCancellable())
                return this;
              if (reason === undefined)
                reason = new CancellationError();
              async.invokeLater(this._cancel, this, reason);
              return this;
            };
            Promise.prototype.cancellable = function() {
              if (this._cancellable())
                return this;
              async.enableTrampoline();
              this._setCancellable();
              this._cancellationParent = undefined;
              return this;
            };
            Promise.prototype.uncancellable = function() {
              var ret = this.then();
              ret._unsetCancellable();
              return ret;
            };
            Promise.prototype.fork = function(didFulfill, didReject, didProgress) {
              var ret = this._then(didFulfill, didReject, didProgress, undefined, undefined);
              ret._setCancellable();
              ret._cancellationParent = undefined;
              return ret;
            };
          };
        }, {
          "./async.js": 2,
          "./errors.js": 13
        }],
        7: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function() {
            var async = _dereq_("./async.js");
            var util = _dereq_("./util.js");
            var bluebirdFramePattern = /[\\\/]bluebird[\\\/]js[\\\/](main|debug|zalgo|instrumented)/;
            var stackFramePattern = null;
            var formatStack = null;
            var indentStackFrames = false;
            var warn;
            function CapturedTrace(parent) {
              this._parent = parent;
              var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
              captureStackTrace(this, CapturedTrace);
              if (length > 32)
                this.uncycle();
            }
            util.inherits(CapturedTrace, Error);
            CapturedTrace.prototype.uncycle = function() {
              var length = this._length;
              if (length < 2)
                return;
              var nodes = [];
              var stackToIndex = {};
              for (var i = 0,
                  node = this; node !== undefined; ++i) {
                nodes.push(node);
                node = node._parent;
              }
              length = this._length = i;
              for (var i = length - 1; i >= 0; --i) {
                var stack = nodes[i].stack;
                if (stackToIndex[stack] === undefined) {
                  stackToIndex[stack] = i;
                }
              }
              for (var i = 0; i < length; ++i) {
                var currentStack = nodes[i].stack;
                var index = stackToIndex[currentStack];
                if (index !== undefined && index !== i) {
                  if (index > 0) {
                    nodes[index - 1]._parent = undefined;
                    nodes[index - 1]._length = 1;
                  }
                  nodes[i]._parent = undefined;
                  nodes[i]._length = 1;
                  var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;
                  if (index < length - 1) {
                    cycleEdgeNode._parent = nodes[index + 1];
                    cycleEdgeNode._parent.uncycle();
                    cycleEdgeNode._length = cycleEdgeNode._parent._length + 1;
                  } else {
                    cycleEdgeNode._parent = undefined;
                    cycleEdgeNode._length = 1;
                  }
                  var currentChildLength = cycleEdgeNode._length + 1;
                  for (var j = i - 2; j >= 0; --j) {
                    nodes[j]._length = currentChildLength;
                    currentChildLength++;
                  }
                  return;
                }
              }
            };
            CapturedTrace.prototype.parent = function() {
              return this._parent;
            };
            CapturedTrace.prototype.hasParent = function() {
              return this._parent !== undefined;
            };
            CapturedTrace.prototype.attachExtraTrace = function(error) {
              if (error.__stackCleaned__)
                return;
              this.uncycle();
              var parsed = CapturedTrace.parseStackAndMessage(error);
              var message = parsed.message;
              var stacks = [parsed.stack];
              var trace = this;
              while (trace !== undefined) {
                stacks.push(cleanStack(trace.stack.split("\n")));
                trace = trace._parent;
              }
              removeCommonRoots(stacks);
              removeDuplicateOrEmptyJumps(stacks);
              util.notEnumerableProp(error, "stack", reconstructStack(message, stacks));
              util.notEnumerableProp(error, "__stackCleaned__", true);
            };
            function reconstructStack(message, stacks) {
              for (var i = 0; i < stacks.length - 1; ++i) {
                stacks[i].push("From previous event:");
                stacks[i] = stacks[i].join("\n");
              }
              if (i < stacks.length) {
                stacks[i] = stacks[i].join("\n");
              }
              return message + "\n" + stacks.join("\n");
            }
            function removeDuplicateOrEmptyJumps(stacks) {
              for (var i = 0; i < stacks.length; ++i) {
                if (stacks[i].length === 0 || ((i + 1 < stacks.length) && stacks[i][0] === stacks[i + 1][0])) {
                  stacks.splice(i, 1);
                  i--;
                }
              }
            }
            function removeCommonRoots(stacks) {
              var current = stacks[0];
              for (var i = 1; i < stacks.length; ++i) {
                var prev = stacks[i];
                var currentLastIndex = current.length - 1;
                var currentLastLine = current[currentLastIndex];
                var commonRootMeetPoint = -1;
                for (var j = prev.length - 1; j >= 0; --j) {
                  if (prev[j] === currentLastLine) {
                    commonRootMeetPoint = j;
                    break;
                  }
                }
                for (var j = commonRootMeetPoint; j >= 0; --j) {
                  var line = prev[j];
                  if (current[currentLastIndex] === line) {
                    current.pop();
                    currentLastIndex--;
                  } else {
                    break;
                  }
                }
                current = prev;
              }
            }
            function cleanStack(stack) {
              var ret = [];
              for (var i = 0; i < stack.length; ++i) {
                var line = stack[i];
                var isTraceLine = stackFramePattern.test(line) || "    (No stack trace)" === line;
                var isInternalFrame = isTraceLine && shouldIgnore(line);
                if (isTraceLine && !isInternalFrame) {
                  if (indentStackFrames && line.charAt(0) !== " ") {
                    line = "    " + line;
                  }
                  ret.push(line);
                }
              }
              return ret;
            }
            function stackFramesAsArray(error) {
              var stack = error.stack.replace(/\s+$/g, "").split("\n");
              for (var i = 0; i < stack.length; ++i) {
                var line = stack[i];
                if ("    (No stack trace)" === line || stackFramePattern.test(line)) {
                  break;
                }
              }
              if (i > 0) {
                stack = stack.slice(i);
              }
              return stack;
            }
            CapturedTrace.parseStackAndMessage = function(error) {
              var stack = error.stack;
              var message = error.toString();
              stack = typeof stack === "string" && stack.length > 0 ? stackFramesAsArray(error) : ["    (No stack trace)"];
              return {
                message: message,
                stack: cleanStack(stack)
              };
            };
            CapturedTrace.formatAndLogError = function(error, title) {
              if (typeof console !== "undefined") {
                var message;
                if (typeof error === "object" || typeof error === "function") {
                  var stack = error.stack;
                  message = title + formatStack(stack, error);
                } else {
                  message = title + String(error);
                }
                if (typeof warn === "function") {
                  warn(message);
                } else if (typeof console.log === "function" || typeof console.log === "object") {
                  console.log(message);
                }
              }
            };
            CapturedTrace.unhandledRejection = function(reason) {
              CapturedTrace.formatAndLogError(reason, "^--- With additional stack trace: ");
            };
            CapturedTrace.isSupported = function() {
              return typeof captureStackTrace === "function";
            };
            CapturedTrace.fireRejectionEvent = function(name, localHandler, reason, promise) {
              var localEventFired = false;
              try {
                if (typeof localHandler === "function") {
                  localEventFired = true;
                  if (name === "rejectionHandled") {
                    localHandler(promise);
                  } else {
                    localHandler(reason, promise);
                  }
                }
              } catch (e) {
                async.throwLater(e);
              }
              var globalEventFired = false;
              try {
                globalEventFired = fireGlobalEvent(name, reason, promise);
              } catch (e) {
                globalEventFired = true;
                async.throwLater(e);
              }
              var domEventFired = false;
              if (fireDomEvent) {
                try {
                  domEventFired = fireDomEvent(name.toLowerCase(), {
                    reason: reason,
                    promise: promise
                  });
                } catch (e) {
                  domEventFired = true;
                  async.throwLater(e);
                }
              }
              if (!globalEventFired && !localEventFired && !domEventFired && name === "unhandledRejection") {
                CapturedTrace.formatAndLogError(reason, "Unhandled rejection ");
              }
            };
            function formatNonError(obj) {
              var str;
              if (typeof obj === "function") {
                str = "[function " + (obj.name || "anonymous") + "]";
              } else {
                str = obj.toString();
                var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
                if (ruselessToString.test(str)) {
                  try {
                    var newStr = JSON.stringify(obj);
                    str = newStr;
                  } catch (e) {}
                }
                if (str.length === 0) {
                  str = "(empty array)";
                }
              }
              return ("(<" + snip(str) + ">, no stack trace)");
            }
            function snip(str) {
              var maxChars = 41;
              if (str.length < maxChars) {
                return str;
              }
              return str.substr(0, maxChars - 3) + "...";
            }
            var shouldIgnore = function() {
              return false;
            };
            var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
            function parseLineInfo(line) {
              var matches = line.match(parseLineInfoRegex);
              if (matches) {
                return {
                  fileName: matches[1],
                  line: parseInt(matches[2], 10)
                };
              }
            }
            CapturedTrace.setBounds = function(firstLineError, lastLineError) {
              if (!CapturedTrace.isSupported())
                return;
              var firstStackLines = firstLineError.stack.split("\n");
              var lastStackLines = lastLineError.stack.split("\n");
              var firstIndex = -1;
              var lastIndex = -1;
              var firstFileName;
              var lastFileName;
              for (var i = 0; i < firstStackLines.length; ++i) {
                var result = parseLineInfo(firstStackLines[i]);
                if (result) {
                  firstFileName = result.fileName;
                  firstIndex = result.line;
                  break;
                }
              }
              for (var i = 0; i < lastStackLines.length; ++i) {
                var result = parseLineInfo(lastStackLines[i]);
                if (result) {
                  lastFileName = result.fileName;
                  lastIndex = result.line;
                  break;
                }
              }
              if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName || firstFileName !== lastFileName || firstIndex >= lastIndex) {
                return;
              }
              shouldIgnore = function(line) {
                if (bluebirdFramePattern.test(line))
                  return true;
                var info = parseLineInfo(line);
                if (info) {
                  if (info.fileName === firstFileName && (firstIndex <= info.line && info.line <= lastIndex)) {
                    return true;
                  }
                }
                return false;
              };
            };
            var captureStackTrace = (function stackDetection() {
              var v8stackFramePattern = /^\s*at\s*/;
              var v8stackFormatter = function(stack, error) {
                if (typeof stack === "string")
                  return stack;
                if (error.name !== undefined && error.message !== undefined) {
                  return error.toString();
                }
                return formatNonError(error);
              };
              if (typeof Error.stackTraceLimit === "number" && typeof Error.captureStackTrace === "function") {
                Error.stackTraceLimit = Error.stackTraceLimit + 6;
                stackFramePattern = v8stackFramePattern;
                formatStack = v8stackFormatter;
                var captureStackTrace = Error.captureStackTrace;
                shouldIgnore = function(line) {
                  return bluebirdFramePattern.test(line);
                };
                return function(receiver, ignoreUntil) {
                  Error.stackTraceLimit = Error.stackTraceLimit + 6;
                  captureStackTrace(receiver, ignoreUntil);
                  Error.stackTraceLimit = Error.stackTraceLimit - 6;
                };
              }
              var err = new Error();
              if (typeof err.stack === "string" && err.stack.split("\n")[0].indexOf("stackDetection@") >= 0) {
                stackFramePattern = /@/;
                formatStack = v8stackFormatter;
                indentStackFrames = true;
                return function captureStackTrace(o) {
                  o.stack = new Error().stack;
                };
              }
              var hasStackAfterThrow;
              try {
                throw new Error();
              } catch (e) {
                hasStackAfterThrow = ("stack" in e);
              }
              if (!("stack" in err) && hasStackAfterThrow && typeof Error.stackTraceLimit === "number") {
                stackFramePattern = v8stackFramePattern;
                formatStack = v8stackFormatter;
                return function captureStackTrace(o) {
                  Error.stackTraceLimit = Error.stackTraceLimit + 6;
                  try {
                    throw new Error();
                  } catch (e) {
                    o.stack = e.stack;
                  }
                  Error.stackTraceLimit = Error.stackTraceLimit - 6;
                };
              }
              formatStack = function(stack, error) {
                if (typeof stack === "string")
                  return stack;
                if ((typeof error === "object" || typeof error === "function") && error.name !== undefined && error.message !== undefined) {
                  return error.toString();
                }
                return formatNonError(error);
              };
              return null;
            })([]);
            var fireDomEvent;
            var fireGlobalEvent = (function() {
              if (util.isNode) {
                return function(name, reason, promise) {
                  if (name === "rejectionHandled") {
                    return process.emit(name, promise);
                  } else {
                    return process.emit(name, reason, promise);
                  }
                };
              } else {
                var customEventWorks = false;
                var anyEventWorks = true;
                try {
                  var ev = new self.CustomEvent("test");
                  customEventWorks = ev instanceof CustomEvent;
                } catch (e) {}
                if (!customEventWorks) {
                  try {
                    var event = document.createEvent("CustomEvent");
                    event.initCustomEvent("testingtheevent", false, true, {});
                    self.dispatchEvent(event);
                  } catch (e) {
                    anyEventWorks = false;
                  }
                }
                if (anyEventWorks) {
                  fireDomEvent = function(type, detail) {
                    var event;
                    if (customEventWorks) {
                      event = new self.CustomEvent(type, {
                        detail: detail,
                        bubbles: false,
                        cancelable: true
                      });
                    } else if (self.dispatchEvent) {
                      event = document.createEvent("CustomEvent");
                      event.initCustomEvent(type, false, true, detail);
                    }
                    return event ? !self.dispatchEvent(event) : false;
                  };
                }
                var toWindowMethodNameMap = {};
                toWindowMethodNameMap["unhandledRejection"] = ("on" + "unhandledRejection").toLowerCase();
                toWindowMethodNameMap["rejectionHandled"] = ("on" + "rejectionHandled").toLowerCase();
                return function(name, reason, promise) {
                  var methodName = toWindowMethodNameMap[name];
                  var method = self[methodName];
                  if (!method)
                    return false;
                  if (name === "rejectionHandled") {
                    method.call(self, promise);
                  } else {
                    method.call(self, reason, promise);
                  }
                  return true;
                };
              }
            })();
            if (typeof console !== "undefined" && typeof console.warn !== "undefined") {
              warn = function(message) {
                console.warn(message);
              };
              if (util.isNode && process.stderr.isTTY) {
                warn = function(message) {
                  process.stderr.write("\u001b[31m" + message + "\u001b[39m\n");
                };
              } else if (!util.isNode && typeof(new Error().stack) === "string") {
                warn = function(message) {
                  console.warn("%c" + message, "color: red");
                };
              }
            }
            return CapturedTrace;
          };
        }, {
          "./async.js": 2,
          "./util.js": 38
        }],
        8: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(NEXT_FILTER) {
            var util = _dereq_("./util.js");
            var errors = _dereq_("./errors.js");
            var tryCatch = util.tryCatch;
            var errorObj = util.errorObj;
            var keys = _dereq_("./es5.js").keys;
            var TypeError = errors.TypeError;
            function CatchFilter(instances, callback, promise) {
              this._instances = instances;
              this._callback = callback;
              this._promise = promise;
            }
            function safePredicate(predicate, e) {
              var safeObject = {};
              var retfilter = tryCatch(predicate).call(safeObject, e);
              if (retfilter === errorObj)
                return retfilter;
              var safeKeys = keys(safeObject);
              if (safeKeys.length) {
                errorObj.e = new TypeError("Catch filter must inherit from Error or be a simple predicate function\u000a\u000a    See http://goo.gl/o84o68\u000a");
                return errorObj;
              }
              return retfilter;
            }
            CatchFilter.prototype.doFilter = function(e) {
              var cb = this._callback;
              var promise = this._promise;
              var boundTo = promise._boundValue();
              for (var i = 0,
                  len = this._instances.length; i < len; ++i) {
                var item = this._instances[i];
                var itemIsErrorType = item === Error || (item != null && item.prototype instanceof Error);
                if (itemIsErrorType && e instanceof item) {
                  var ret = tryCatch(cb).call(boundTo, e);
                  if (ret === errorObj) {
                    NEXT_FILTER.e = ret.e;
                    return NEXT_FILTER;
                  }
                  return ret;
                } else if (typeof item === "function" && !itemIsErrorType) {
                  var shouldHandle = safePredicate(item, e);
                  if (shouldHandle === errorObj) {
                    e = errorObj.e;
                    break;
                  } else if (shouldHandle) {
                    var ret = tryCatch(cb).call(boundTo, e);
                    if (ret === errorObj) {
                      NEXT_FILTER.e = ret.e;
                      return NEXT_FILTER;
                    }
                    return ret;
                  }
                }
              }
              NEXT_FILTER.e = e;
              return NEXT_FILTER;
            };
            return CatchFilter;
          };
        }, {
          "./errors.js": 13,
          "./es5.js": 14,
          "./util.js": 38
        }],
        9: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(Promise, CapturedTrace, isDebugging) {
            var contextStack = [];
            function Context() {
              this._trace = new CapturedTrace(peekContext());
            }
            Context.prototype._pushContext = function() {
              if (!isDebugging())
                return;
              if (this._trace !== undefined) {
                contextStack.push(this._trace);
              }
            };
            Context.prototype._popContext = function() {
              if (!isDebugging())
                return;
              if (this._trace !== undefined) {
                contextStack.pop();
              }
            };
            function createContext() {
              if (isDebugging())
                return new Context();
            }
            function peekContext() {
              var lastIndex = contextStack.length - 1;
              if (lastIndex >= 0) {
                return contextStack[lastIndex];
              }
              return undefined;
            }
            Promise.prototype._peekContext = peekContext;
            Promise.prototype._pushContext = Context.prototype._pushContext;
            Promise.prototype._popContext = Context.prototype._popContext;
            return createContext;
          };
        }, {}],
        10: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(Promise, CapturedTrace) {
            var getDomain = Promise._getDomain;
            var async = _dereq_("./async.js");
            var Warning = _dereq_("./errors.js").Warning;
            var util = _dereq_("./util.js");
            var canAttachTrace = util.canAttachTrace;
            var unhandledRejectionHandled;
            var possiblyUnhandledRejection;
            var debugging = false || (util.isNode && (!!process.env["BLUEBIRD_DEBUG"] || process.env["NODE_ENV"] === "development"));
            if (util.isNode && process.env["BLUEBIRD_DEBUG"] == 0)
              debugging = false;
            if (debugging) {
              async.disableTrampolineIfNecessary();
            }
            Promise.prototype._ignoreRejections = function() {
              this._unsetRejectionIsUnhandled();
              this._bitField = this._bitField | 16777216;
            };
            Promise.prototype._ensurePossibleRejectionHandled = function() {
              if ((this._bitField & 16777216) !== 0)
                return;
              this._setRejectionIsUnhandled();
              async.invokeLater(this._notifyUnhandledRejection, this, undefined);
            };
            Promise.prototype._notifyUnhandledRejectionIsHandled = function() {
              CapturedTrace.fireRejectionEvent("rejectionHandled", unhandledRejectionHandled, undefined, this);
            };
            Promise.prototype._notifyUnhandledRejection = function() {
              if (this._isRejectionUnhandled()) {
                var reason = this._getCarriedStackTrace() || this._settledValue;
                this._setUnhandledRejectionIsNotified();
                CapturedTrace.fireRejectionEvent("unhandledRejection", possiblyUnhandledRejection, reason, this);
              }
            };
            Promise.prototype._setUnhandledRejectionIsNotified = function() {
              this._bitField = this._bitField | 524288;
            };
            Promise.prototype._unsetUnhandledRejectionIsNotified = function() {
              this._bitField = this._bitField & (~524288);
            };
            Promise.prototype._isUnhandledRejectionNotified = function() {
              return (this._bitField & 524288) > 0;
            };
            Promise.prototype._setRejectionIsUnhandled = function() {
              this._bitField = this._bitField | 2097152;
            };
            Promise.prototype._unsetRejectionIsUnhandled = function() {
              this._bitField = this._bitField & (~2097152);
              if (this._isUnhandledRejectionNotified()) {
                this._unsetUnhandledRejectionIsNotified();
                this._notifyUnhandledRejectionIsHandled();
              }
            };
            Promise.prototype._isRejectionUnhandled = function() {
              return (this._bitField & 2097152) > 0;
            };
            Promise.prototype._setCarriedStackTrace = function(capturedTrace) {
              this._bitField = this._bitField | 1048576;
              this._fulfillmentHandler0 = capturedTrace;
            };
            Promise.prototype._isCarryingStackTrace = function() {
              return (this._bitField & 1048576) > 0;
            };
            Promise.prototype._getCarriedStackTrace = function() {
              return this._isCarryingStackTrace() ? this._fulfillmentHandler0 : undefined;
            };
            Promise.prototype._captureStackTrace = function() {
              if (debugging) {
                this._trace = new CapturedTrace(this._peekContext());
              }
              return this;
            };
            Promise.prototype._attachExtraTrace = function(error, ignoreSelf) {
              if (debugging && canAttachTrace(error)) {
                var trace = this._trace;
                if (trace !== undefined) {
                  if (ignoreSelf)
                    trace = trace._parent;
                }
                if (trace !== undefined) {
                  trace.attachExtraTrace(error);
                } else if (!error.__stackCleaned__) {
                  var parsed = CapturedTrace.parseStackAndMessage(error);
                  util.notEnumerableProp(error, "stack", parsed.message + "\n" + parsed.stack.join("\n"));
                  util.notEnumerableProp(error, "__stackCleaned__", true);
                }
              }
            };
            Promise.prototype._warn = function(message) {
              var warning = new Warning(message);
              var ctx = this._peekContext();
              if (ctx) {
                ctx.attachExtraTrace(warning);
              } else {
                var parsed = CapturedTrace.parseStackAndMessage(warning);
                warning.stack = parsed.message + "\n" + parsed.stack.join("\n");
              }
              CapturedTrace.formatAndLogError(warning, "");
            };
            Promise.onPossiblyUnhandledRejection = function(fn) {
              var domain = getDomain();
              possiblyUnhandledRejection = typeof fn === "function" ? (domain === null ? fn : domain.bind(fn)) : undefined;
            };
            Promise.onUnhandledRejectionHandled = function(fn) {
              var domain = getDomain();
              unhandledRejectionHandled = typeof fn === "function" ? (domain === null ? fn : domain.bind(fn)) : undefined;
            };
            Promise.longStackTraces = function() {
              if (async.haveItemsQueued() && debugging === false) {
                throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/DT1qyG\u000a");
              }
              debugging = CapturedTrace.isSupported();
              if (debugging) {
                async.disableTrampolineIfNecessary();
              }
            };
            Promise.hasLongStackTraces = function() {
              return debugging && CapturedTrace.isSupported();
            };
            if (!CapturedTrace.isSupported()) {
              Promise.longStackTraces = function() {};
              debugging = false;
            }
            return function() {
              return debugging;
            };
          };
        }, {
          "./async.js": 2,
          "./errors.js": 13,
          "./util.js": 38
        }],
        11: [function(_dereq_, module, exports) {
          "use strict";
          var util = _dereq_("./util.js");
          var isPrimitive = util.isPrimitive;
          module.exports = function(Promise) {
            var returner = function() {
              return this;
            };
            var thrower = function() {
              throw this;
            };
            var returnUndefined = function() {};
            var throwUndefined = function() {
              throw undefined;
            };
            var wrapper = function(value, action) {
              if (action === 1) {
                return function() {
                  throw value;
                };
              } else if (action === 2) {
                return function() {
                  return value;
                };
              }
            };
            Promise.prototype["return"] = Promise.prototype.thenReturn = function(value) {
              if (value === undefined)
                return this.then(returnUndefined);
              if (isPrimitive(value)) {
                return this._then(wrapper(value, 2), undefined, undefined, undefined, undefined);
              } else if (value instanceof Promise) {
                value._ignoreRejections();
              }
              return this._then(returner, undefined, undefined, value, undefined);
            };
            Promise.prototype["throw"] = Promise.prototype.thenThrow = function(reason) {
              if (reason === undefined)
                return this.then(throwUndefined);
              if (isPrimitive(reason)) {
                return this._then(wrapper(reason, 1), undefined, undefined, undefined, undefined);
              }
              return this._then(thrower, undefined, undefined, reason, undefined);
            };
          };
        }, {"./util.js": 38}],
        12: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(Promise, INTERNAL) {
            var PromiseReduce = Promise.reduce;
            Promise.prototype.each = function(fn) {
              return PromiseReduce(this, fn, null, INTERNAL);
            };
            Promise.each = function(promises, fn) {
              return PromiseReduce(promises, fn, null, INTERNAL);
            };
          };
        }, {}],
        13: [function(_dereq_, module, exports) {
          "use strict";
          var es5 = _dereq_("./es5.js");
          var Objectfreeze = es5.freeze;
          var util = _dereq_("./util.js");
          var inherits = util.inherits;
          var notEnumerableProp = util.notEnumerableProp;
          function subError(nameProperty, defaultMessage) {
            function SubError(message) {
              if (!(this instanceof SubError))
                return new SubError(message);
              notEnumerableProp(this, "message", typeof message === "string" ? message : defaultMessage);
              notEnumerableProp(this, "name", nameProperty);
              if (Error.captureStackTrace) {
                Error.captureStackTrace(this, this.constructor);
              } else {
                Error.call(this);
              }
            }
            inherits(SubError, Error);
            return SubError;
          }
          var _TypeError,
              _RangeError;
          var Warning = subError("Warning", "warning");
          var CancellationError = subError("CancellationError", "cancellation error");
          var TimeoutError = subError("TimeoutError", "timeout error");
          var AggregateError = subError("AggregateError", "aggregate error");
          try {
            _TypeError = TypeError;
            _RangeError = RangeError;
          } catch (e) {
            _TypeError = subError("TypeError", "type error");
            _RangeError = subError("RangeError", "range error");
          }
          var methods = ("join pop push shift unshift slice filter forEach some " + "every map indexOf lastIndexOf reduce reduceRight sort reverse").split(" ");
          for (var i = 0; i < methods.length; ++i) {
            if (typeof Array.prototype[methods[i]] === "function") {
              AggregateError.prototype[methods[i]] = Array.prototype[methods[i]];
            }
          }
          es5.defineProperty(AggregateError.prototype, "length", {
            value: 0,
            configurable: false,
            writable: true,
            enumerable: true
          });
          AggregateError.prototype["isOperational"] = true;
          var level = 0;
          AggregateError.prototype.toString = function() {
            var indent = Array(level * 4 + 1).join(" ");
            var ret = "\n" + indent + "AggregateError of:" + "\n";
            level++;
            indent = Array(level * 4 + 1).join(" ");
            for (var i = 0; i < this.length; ++i) {
              var str = this[i] === this ? "[Circular AggregateError]" : this[i] + "";
              var lines = str.split("\n");
              for (var j = 0; j < lines.length; ++j) {
                lines[j] = indent + lines[j];
              }
              str = lines.join("\n");
              ret += str + "\n";
            }
            level--;
            return ret;
          };
          function OperationalError(message) {
            if (!(this instanceof OperationalError))
              return new OperationalError(message);
            notEnumerableProp(this, "name", "OperationalError");
            notEnumerableProp(this, "message", message);
            this.cause = message;
            this["isOperational"] = true;
            if (message instanceof Error) {
              notEnumerableProp(this, "message", message.message);
              notEnumerableProp(this, "stack", message.stack);
            } else if (Error.captureStackTrace) {
              Error.captureStackTrace(this, this.constructor);
            }
          }
          inherits(OperationalError, Error);
          var errorTypes = Error["__BluebirdErrorTypes__"];
          if (!errorTypes) {
            errorTypes = Objectfreeze({
              CancellationError: CancellationError,
              TimeoutError: TimeoutError,
              OperationalError: OperationalError,
              RejectionError: OperationalError,
              AggregateError: AggregateError
            });
            notEnumerableProp(Error, "__BluebirdErrorTypes__", errorTypes);
          }
          module.exports = {
            Error: Error,
            TypeError: _TypeError,
            RangeError: _RangeError,
            CancellationError: errorTypes.CancellationError,
            OperationalError: errorTypes.OperationalError,
            TimeoutError: errorTypes.TimeoutError,
            AggregateError: errorTypes.AggregateError,
            Warning: Warning
          };
        }, {
          "./es5.js": 14,
          "./util.js": 38
        }],
        14: [function(_dereq_, module, exports) {
          var isES5 = (function() {
            "use strict";
            return this === undefined;
          })();
          if (isES5) {
            module.exports = {
              freeze: Object.freeze,
              defineProperty: Object.defineProperty,
              getDescriptor: Object.getOwnPropertyDescriptor,
              keys: Object.keys,
              names: Object.getOwnPropertyNames,
              getPrototypeOf: Object.getPrototypeOf,
              isArray: Array.isArray,
              isES5: isES5,
              propertyIsWritable: function(obj, prop) {
                var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
                return !!(!descriptor || descriptor.writable || descriptor.set);
              }
            };
          } else {
            var has = {}.hasOwnProperty;
            var str = {}.toString;
            var proto = {}.constructor.prototype;
            var ObjectKeys = function(o) {
              var ret = [];
              for (var key in o) {
                if (has.call(o, key)) {
                  ret.push(key);
                }
              }
              return ret;
            };
            var ObjectGetDescriptor = function(o, key) {
              return {value: o[key]};
            };
            var ObjectDefineProperty = function(o, key, desc) {
              o[key] = desc.value;
              return o;
            };
            var ObjectFreeze = function(obj) {
              return obj;
            };
            var ObjectGetPrototypeOf = function(obj) {
              try {
                return Object(obj).constructor.prototype;
              } catch (e) {
                return proto;
              }
            };
            var ArrayIsArray = function(obj) {
              try {
                return str.call(obj) === "[object Array]";
              } catch (e) {
                return false;
              }
            };
            module.exports = {
              isArray: ArrayIsArray,
              keys: ObjectKeys,
              names: ObjectKeys,
              defineProperty: ObjectDefineProperty,
              getDescriptor: ObjectGetDescriptor,
              freeze: ObjectFreeze,
              getPrototypeOf: ObjectGetPrototypeOf,
              isES5: isES5,
              propertyIsWritable: function() {
                return true;
              }
            };
          }
        }, {}],
        15: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(Promise, INTERNAL) {
            var PromiseMap = Promise.map;
            Promise.prototype.filter = function(fn, options) {
              return PromiseMap(this, fn, options, INTERNAL);
            };
            Promise.filter = function(promises, fn, options) {
              return PromiseMap(promises, fn, options, INTERNAL);
            };
          };
        }, {}],
        16: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(Promise, NEXT_FILTER, tryConvertToPromise) {
            var util = _dereq_("./util.js");
            var isPrimitive = util.isPrimitive;
            var thrower = util.thrower;
            function returnThis() {
              return this;
            }
            function throwThis() {
              throw this;
            }
            function return$(r) {
              return function() {
                return r;
              };
            }
            function throw$(r) {
              return function() {
                throw r;
              };
            }
            function promisedFinally(ret, reasonOrValue, isFulfilled) {
              var then;
              if (isPrimitive(reasonOrValue)) {
                then = isFulfilled ? return$(reasonOrValue) : throw$(reasonOrValue);
              } else {
                then = isFulfilled ? returnThis : throwThis;
              }
              return ret._then(then, thrower, undefined, reasonOrValue, undefined);
            }
            function finallyHandler(reasonOrValue) {
              var promise = this.promise;
              var handler = this.handler;
              var ret = promise._isBound() ? handler.call(promise._boundValue()) : handler();
              if (ret !== undefined) {
                var maybePromise = tryConvertToPromise(ret, promise);
                if (maybePromise instanceof Promise) {
                  maybePromise = maybePromise._target();
                  return promisedFinally(maybePromise, reasonOrValue, promise.isFulfilled());
                }
              }
              if (promise.isRejected()) {
                NEXT_FILTER.e = reasonOrValue;
                return NEXT_FILTER;
              } else {
                return reasonOrValue;
              }
            }
            function tapHandler(value) {
              var promise = this.promise;
              var handler = this.handler;
              var ret = promise._isBound() ? handler.call(promise._boundValue(), value) : handler(value);
              if (ret !== undefined) {
                var maybePromise = tryConvertToPromise(ret, promise);
                if (maybePromise instanceof Promise) {
                  maybePromise = maybePromise._target();
                  return promisedFinally(maybePromise, value, true);
                }
              }
              return value;
            }
            Promise.prototype._passThroughHandler = function(handler, isFinally) {
              if (typeof handler !== "function")
                return this.then();
              var promiseAndHandler = {
                promise: this,
                handler: handler
              };
              return this._then(isFinally ? finallyHandler : tapHandler, isFinally ? finallyHandler : undefined, undefined, promiseAndHandler, undefined);
            };
            Promise.prototype.lastly = Promise.prototype["finally"] = function(handler) {
              return this._passThroughHandler(handler, true);
            };
            Promise.prototype.tap = function(handler) {
              return this._passThroughHandler(handler, false);
            };
          };
        }, {"./util.js": 38}],
        17: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(Promise, apiRejection, INTERNAL, tryConvertToPromise) {
            var errors = _dereq_("./errors.js");
            var TypeError = errors.TypeError;
            var util = _dereq_("./util.js");
            var errorObj = util.errorObj;
            var tryCatch = util.tryCatch;
            var yieldHandlers = [];
            function promiseFromYieldHandler(value, yieldHandlers, traceParent) {
              for (var i = 0; i < yieldHandlers.length; ++i) {
                traceParent._pushContext();
                var result = tryCatch(yieldHandlers[i])(value);
                traceParent._popContext();
                if (result === errorObj) {
                  traceParent._pushContext();
                  var ret = Promise.reject(errorObj.e);
                  traceParent._popContext();
                  return ret;
                }
                var maybePromise = tryConvertToPromise(result, traceParent);
                if (maybePromise instanceof Promise)
                  return maybePromise;
              }
              return null;
            }
            function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
              var promise = this._promise = new Promise(INTERNAL);
              promise._captureStackTrace();
              this._stack = stack;
              this._generatorFunction = generatorFunction;
              this._receiver = receiver;
              this._generator = undefined;
              this._yieldHandlers = typeof yieldHandler === "function" ? [yieldHandler].concat(yieldHandlers) : yieldHandlers;
            }
            PromiseSpawn.prototype.promise = function() {
              return this._promise;
            };
            PromiseSpawn.prototype._run = function() {
              this._generator = this._generatorFunction.call(this._receiver);
              this._receiver = this._generatorFunction = undefined;
              this._next(undefined);
            };
            PromiseSpawn.prototype._continue = function(result) {
              if (result === errorObj) {
                return this._promise._rejectCallback(result.e, false, true);
              }
              var value = result.value;
              if (result.done === true) {
                this._promise._resolveCallback(value);
              } else {
                var maybePromise = tryConvertToPromise(value, this._promise);
                if (!(maybePromise instanceof Promise)) {
                  maybePromise = promiseFromYieldHandler(maybePromise, this._yieldHandlers, this._promise);
                  if (maybePromise === null) {
                    this._throw(new TypeError("A value %s was yielded that could not be treated as a promise\u000a\u000a    See http://goo.gl/4Y4pDk\u000a\u000a".replace("%s", value) + "From coroutine:\u000a" + this._stack.split("\n").slice(1, -7).join("\n")));
                    return;
                  }
                }
                maybePromise._then(this._next, this._throw, undefined, this, null);
              }
            };
            PromiseSpawn.prototype._throw = function(reason) {
              this._promise._attachExtraTrace(reason);
              this._promise._pushContext();
              var result = tryCatch(this._generator["throw"]).call(this._generator, reason);
              this._promise._popContext();
              this._continue(result);
            };
            PromiseSpawn.prototype._next = function(value) {
              this._promise._pushContext();
              var result = tryCatch(this._generator.next).call(this._generator, value);
              this._promise._popContext();
              this._continue(result);
            };
            Promise.coroutine = function(generatorFunction, options) {
              if (typeof generatorFunction !== "function") {
                throw new TypeError("generatorFunction must be a function\u000a\u000a    See http://goo.gl/6Vqhm0\u000a");
              }
              var yieldHandler = Object(options).yieldHandler;
              var PromiseSpawn$ = PromiseSpawn;
              var stack = new Error().stack;
              return function() {
                var generator = generatorFunction.apply(this, arguments);
                var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler, stack);
                spawn._generator = generator;
                spawn._next(undefined);
                return spawn.promise();
              };
            };
            Promise.coroutine.addYieldHandler = function(fn) {
              if (typeof fn !== "function")
                throw new TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
              yieldHandlers.push(fn);
            };
            Promise.spawn = function(generatorFunction) {
              if (typeof generatorFunction !== "function") {
                return apiRejection("generatorFunction must be a function\u000a\u000a    See http://goo.gl/6Vqhm0\u000a");
              }
              var spawn = new PromiseSpawn(generatorFunction, this);
              var ret = spawn.promise();
              spawn._run(Promise.spawn);
              return ret;
            };
          };
        }, {
          "./errors.js": 13,
          "./util.js": 38
        }],
        18: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(Promise, PromiseArray, tryConvertToPromise, INTERNAL) {
            var util = _dereq_("./util.js");
            var canEvaluate = util.canEvaluate;
            var tryCatch = util.tryCatch;
            var errorObj = util.errorObj;
            var reject;
            if (!true) {
              if (canEvaluate) {
                var thenCallback = function(i) {
                  return new Function("value", "holder", "                             \n\
            'use strict';                                                    \n\
            holder.pIndex = value;                                           \n\
            holder.checkFulfillment(this);                                   \n\
            ".replace(/Index/g, i));
                };
                var caller = function(count) {
                  var values = [];
                  for (var i = 1; i <= count; ++i)
                    values.push("holder.p" + i);
                  return new Function("holder", "                                      \n\
            'use strict';                                                    \n\
            var callback = holder.fn;                                        \n\
            return callback(values);                                         \n\
            ".replace(/values/g, values.join(", ")));
                };
                var thenCallbacks = [];
                var callers = [undefined];
                for (var i = 1; i <= 5; ++i) {
                  thenCallbacks.push(thenCallback(i));
                  callers.push(caller(i));
                }
                var Holder = function(total, fn) {
                  this.p1 = this.p2 = this.p3 = this.p4 = this.p5 = null;
                  this.fn = fn;
                  this.total = total;
                  this.now = 0;
                };
                Holder.prototype.callers = callers;
                Holder.prototype.checkFulfillment = function(promise) {
                  var now = this.now;
                  now++;
                  var total = this.total;
                  if (now >= total) {
                    var handler = this.callers[total];
                    promise._pushContext();
                    var ret = tryCatch(handler)(this);
                    promise._popContext();
                    if (ret === errorObj) {
                      promise._rejectCallback(ret.e, false, true);
                    } else {
                      promise._resolveCallback(ret);
                    }
                  } else {
                    this.now = now;
                  }
                };
                var reject = function(reason) {
                  this._reject(reason);
                };
              }
            }
            Promise.join = function() {
              var last = arguments.length - 1;
              var fn;
              if (last > 0 && typeof arguments[last] === "function") {
                fn = arguments[last];
                if (!true) {
                  if (last < 6 && canEvaluate) {
                    var ret = new Promise(INTERNAL);
                    ret._captureStackTrace();
                    var holder = new Holder(last, fn);
                    var callbacks = thenCallbacks;
                    for (var i = 0; i < last; ++i) {
                      var maybePromise = tryConvertToPromise(arguments[i], ret);
                      if (maybePromise instanceof Promise) {
                        maybePromise = maybePromise._target();
                        if (maybePromise._isPending()) {
                          maybePromise._then(callbacks[i], reject, undefined, ret, holder);
                        } else if (maybePromise._isFulfilled()) {
                          callbacks[i].call(ret, maybePromise._value(), holder);
                        } else {
                          ret._reject(maybePromise._reason());
                        }
                      } else {
                        callbacks[i].call(ret, maybePromise, holder);
                      }
                    }
                    return ret;
                  }
                }
              }
              var $_len = arguments.length;
              var args = new Array($_len);
              for (var $_i = 0; $_i < $_len; ++$_i) {
                args[$_i] = arguments[$_i];
              }
              if (fn)
                args.pop();
              var ret = new PromiseArray(args).promise();
              return fn !== undefined ? ret.spread(fn) : ret;
            };
          };
        }, {"./util.js": 38}],
        19: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL) {
            var getDomain = Promise._getDomain;
            var async = _dereq_("./async.js");
            var util = _dereq_("./util.js");
            var tryCatch = util.tryCatch;
            var errorObj = util.errorObj;
            var PENDING = {};
            var EMPTY_ARRAY = [];
            function MappingPromiseArray(promises, fn, limit, _filter) {
              this.constructor$(promises);
              this._promise._captureStackTrace();
              var domain = getDomain();
              this._callback = domain === null ? fn : domain.bind(fn);
              this._preservedValues = _filter === INTERNAL ? new Array(this.length()) : null;
              this._limit = limit;
              this._inFlight = 0;
              this._queue = limit >= 1 ? [] : EMPTY_ARRAY;
              async.invoke(init, this, undefined);
            }
            util.inherits(MappingPromiseArray, PromiseArray);
            function init() {
              this._init$(undefined, -2);
            }
            MappingPromiseArray.prototype._init = function() {};
            MappingPromiseArray.prototype._promiseFulfilled = function(value, index) {
              var values = this._values;
              var length = this.length();
              var preservedValues = this._preservedValues;
              var limit = this._limit;
              if (values[index] === PENDING) {
                values[index] = value;
                if (limit >= 1) {
                  this._inFlight--;
                  this._drainQueue();
                  if (this._isResolved())
                    return;
                }
              } else {
                if (limit >= 1 && this._inFlight >= limit) {
                  values[index] = value;
                  this._queue.push(index);
                  return;
                }
                if (preservedValues !== null)
                  preservedValues[index] = value;
                var callback = this._callback;
                var receiver = this._promise._boundValue();
                this._promise._pushContext();
                var ret = tryCatch(callback).call(receiver, value, index, length);
                this._promise._popContext();
                if (ret === errorObj)
                  return this._reject(ret.e);
                var maybePromise = tryConvertToPromise(ret, this._promise);
                if (maybePromise instanceof Promise) {
                  maybePromise = maybePromise._target();
                  if (maybePromise._isPending()) {
                    if (limit >= 1)
                      this._inFlight++;
                    values[index] = PENDING;
                    return maybePromise._proxyPromiseArray(this, index);
                  } else if (maybePromise._isFulfilled()) {
                    ret = maybePromise._value();
                  } else {
                    return this._reject(maybePromise._reason());
                  }
                }
                values[index] = ret;
              }
              var totalResolved = ++this._totalResolved;
              if (totalResolved >= length) {
                if (preservedValues !== null) {
                  this._filter(values, preservedValues);
                } else {
                  this._resolve(values);
                }
              }
            };
            MappingPromiseArray.prototype._drainQueue = function() {
              var queue = this._queue;
              var limit = this._limit;
              var values = this._values;
              while (queue.length > 0 && this._inFlight < limit) {
                if (this._isResolved())
                  return;
                var index = queue.pop();
                this._promiseFulfilled(values[index], index);
              }
            };
            MappingPromiseArray.prototype._filter = function(booleans, values) {
              var len = values.length;
              var ret = new Array(len);
              var j = 0;
              for (var i = 0; i < len; ++i) {
                if (booleans[i])
                  ret[j++] = values[i];
              }
              ret.length = j;
              this._resolve(ret);
            };
            MappingPromiseArray.prototype.preservedValues = function() {
              return this._preservedValues;
            };
            function map(promises, fn, options, _filter) {
              var limit = typeof options === "object" && options !== null ? options.concurrency : 0;
              limit = typeof limit === "number" && isFinite(limit) && limit >= 1 ? limit : 0;
              return new MappingPromiseArray(promises, fn, limit, _filter);
            }
            Promise.prototype.map = function(fn, options) {
              if (typeof fn !== "function")
                return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
              return map(this, fn, options, null).promise();
            };
            Promise.map = function(promises, fn, options, _filter) {
              if (typeof fn !== "function")
                return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
              return map(promises, fn, options, _filter).promise();
            };
          };
        }, {
          "./async.js": 2,
          "./util.js": 38
        }],
        20: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(Promise, INTERNAL, tryConvertToPromise, apiRejection) {
            var util = _dereq_("./util.js");
            var tryCatch = util.tryCatch;
            Promise.method = function(fn) {
              if (typeof fn !== "function") {
                throw new Promise.TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
              }
              return function() {
                var ret = new Promise(INTERNAL);
                ret._captureStackTrace();
                ret._pushContext();
                var value = tryCatch(fn).apply(this, arguments);
                ret._popContext();
                ret._resolveFromSyncValue(value);
                return ret;
              };
            };
            Promise.attempt = Promise["try"] = function(fn, args, ctx) {
              if (typeof fn !== "function") {
                return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
              }
              var ret = new Promise(INTERNAL);
              ret._captureStackTrace();
              ret._pushContext();
              var value = util.isArray(args) ? tryCatch(fn).apply(ctx, args) : tryCatch(fn).call(ctx, args);
              ret._popContext();
              ret._resolveFromSyncValue(value);
              return ret;
            };
            Promise.prototype._resolveFromSyncValue = function(value) {
              if (value === util.errorObj) {
                this._rejectCallback(value.e, false, true);
              } else {
                this._resolveCallback(value, true);
              }
            };
          };
        }, {"./util.js": 38}],
        21: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(Promise) {
            var util = _dereq_("./util.js");
            var async = _dereq_("./async.js");
            var tryCatch = util.tryCatch;
            var errorObj = util.errorObj;
            function spreadAdapter(val, nodeback) {
              var promise = this;
              if (!util.isArray(val))
                return successAdapter.call(promise, val, nodeback);
              var ret = tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));
              if (ret === errorObj) {
                async.throwLater(ret.e);
              }
            }
            function successAdapter(val, nodeback) {
              var promise = this;
              var receiver = promise._boundValue();
              var ret = val === undefined ? tryCatch(nodeback).call(receiver, null) : tryCatch(nodeback).call(receiver, null, val);
              if (ret === errorObj) {
                async.throwLater(ret.e);
              }
            }
            function errorAdapter(reason, nodeback) {
              var promise = this;
              if (!reason) {
                var target = promise._target();
                var newReason = target._getCarriedStackTrace();
                newReason.cause = reason;
                reason = newReason;
              }
              var ret = tryCatch(nodeback).call(promise._boundValue(), reason);
              if (ret === errorObj) {
                async.throwLater(ret.e);
              }
            }
            Promise.prototype.asCallback = Promise.prototype.nodeify = function(nodeback, options) {
              if (typeof nodeback == "function") {
                var adapter = successAdapter;
                if (options !== undefined && Object(options).spread) {
                  adapter = spreadAdapter;
                }
                this._then(adapter, errorAdapter, undefined, this, nodeback);
              }
              return this;
            };
          };
        }, {
          "./async.js": 2,
          "./util.js": 38
        }],
        22: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(Promise, PromiseArray) {
            var util = _dereq_("./util.js");
            var async = _dereq_("./async.js");
            var tryCatch = util.tryCatch;
            var errorObj = util.errorObj;
            Promise.prototype.progressed = function(handler) {
              return this._then(undefined, undefined, handler, undefined, undefined);
            };
            Promise.prototype._progress = function(progressValue) {
              if (this._isFollowingOrFulfilledOrRejected())
                return;
              this._target()._progressUnchecked(progressValue);
            };
            Promise.prototype._progressHandlerAt = function(index) {
              return index === 0 ? this._progressHandler0 : this[(index << 2) + index - 5 + 2];
            };
            Promise.prototype._doProgressWith = function(progression) {
              var progressValue = progression.value;
              var handler = progression.handler;
              var promise = progression.promise;
              var receiver = progression.receiver;
              var ret = tryCatch(handler).call(receiver, progressValue);
              if (ret === errorObj) {
                if (ret.e != null && ret.e.name !== "StopProgressPropagation") {
                  var trace = util.canAttachTrace(ret.e) ? ret.e : new Error(util.toString(ret.e));
                  promise._attachExtraTrace(trace);
                  promise._progress(ret.e);
                }
              } else if (ret instanceof Promise) {
                ret._then(promise._progress, null, null, promise, undefined);
              } else {
                promise._progress(ret);
              }
            };
            Promise.prototype._progressUnchecked = function(progressValue) {
              var len = this._length();
              var progress = this._progress;
              for (var i = 0; i < len; i++) {
                var handler = this._progressHandlerAt(i);
                var promise = this._promiseAt(i);
                if (!(promise instanceof Promise)) {
                  var receiver = this._receiverAt(i);
                  if (typeof handler === "function") {
                    handler.call(receiver, progressValue, promise);
                  } else if (receiver instanceof PromiseArray && !receiver._isResolved()) {
                    receiver._promiseProgressed(progressValue, promise);
                  }
                  continue;
                }
                if (typeof handler === "function") {
                  async.invoke(this._doProgressWith, this, {
                    handler: handler,
                    promise: promise,
                    receiver: this._receiverAt(i),
                    value: progressValue
                  });
                } else {
                  async.invoke(progress, promise, progressValue);
                }
              }
            };
          };
        }, {
          "./async.js": 2,
          "./util.js": 38
        }],
        23: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function() {
            var makeSelfResolutionError = function() {
              return new TypeError("circular promise resolution chain\u000a\u000a    See http://goo.gl/LhFpo0\u000a");
            };
            var reflect = function() {
              return new Promise.PromiseInspection(this._target());
            };
            var apiRejection = function(msg) {
              return Promise.reject(new TypeError(msg));
            };
            var util = _dereq_("./util.js");
            var getDomain;
            if (util.isNode) {
              getDomain = function() {
                var ret = process.domain;
                if (ret === undefined)
                  ret = null;
                return ret;
              };
            } else {
              getDomain = function() {
                return null;
              };
            }
            util.notEnumerableProp(Promise, "_getDomain", getDomain);
            var UNDEFINED_BINDING = {};
            var async = _dereq_("./async.js");
            var errors = _dereq_("./errors.js");
            var TypeError = Promise.TypeError = errors.TypeError;
            Promise.RangeError = errors.RangeError;
            Promise.CancellationError = errors.CancellationError;
            Promise.TimeoutError = errors.TimeoutError;
            Promise.OperationalError = errors.OperationalError;
            Promise.RejectionError = errors.OperationalError;
            Promise.AggregateError = errors.AggregateError;
            var INTERNAL = function() {};
            var APPLY = {};
            var NEXT_FILTER = {e: null};
            var tryConvertToPromise = _dereq_("./thenables.js")(Promise, INTERNAL);
            var PromiseArray = _dereq_("./promise_array.js")(Promise, INTERNAL, tryConvertToPromise, apiRejection);
            var CapturedTrace = _dereq_("./captured_trace.js")();
            var isDebugging = _dereq_("./debuggability.js")(Promise, CapturedTrace);
            var createContext = _dereq_("./context.js")(Promise, CapturedTrace, isDebugging);
            var CatchFilter = _dereq_("./catch_filter.js")(NEXT_FILTER);
            var PromiseResolver = _dereq_("./promise_resolver.js");
            var nodebackForPromise = PromiseResolver._nodebackForPromise;
            var errorObj = util.errorObj;
            var tryCatch = util.tryCatch;
            function Promise(resolver) {
              if (typeof resolver !== "function") {
                throw new TypeError("the promise constructor requires a resolver function\u000a\u000a    See http://goo.gl/EC22Yn\u000a");
              }
              if (this.constructor !== Promise) {
                throw new TypeError("the promise constructor cannot be invoked directly\u000a\u000a    See http://goo.gl/KsIlge\u000a");
              }
              this._bitField = 0;
              this._fulfillmentHandler0 = undefined;
              this._rejectionHandler0 = undefined;
              this._progressHandler0 = undefined;
              this._promise0 = undefined;
              this._receiver0 = undefined;
              this._settledValue = undefined;
              if (resolver !== INTERNAL)
                this._resolveFromResolver(resolver);
            }
            Promise.prototype.toString = function() {
              return "[object Promise]";
            };
            Promise.prototype.caught = Promise.prototype["catch"] = function(fn) {
              var len = arguments.length;
              if (len > 1) {
                var catchInstances = new Array(len - 1),
                    j = 0,
                    i;
                for (i = 0; i < len - 1; ++i) {
                  var item = arguments[i];
                  if (typeof item === "function") {
                    catchInstances[j++] = item;
                  } else {
                    return Promise.reject(new TypeError("Catch filter must inherit from Error or be a simple predicate function\u000a\u000a    See http://goo.gl/o84o68\u000a"));
                  }
                }
                catchInstances.length = j;
                fn = arguments[i];
                var catchFilter = new CatchFilter(catchInstances, fn, this);
                return this._then(undefined, catchFilter.doFilter, undefined, catchFilter, undefined);
              }
              return this._then(undefined, fn, undefined, undefined, undefined);
            };
            Promise.prototype.reflect = function() {
              return this._then(reflect, reflect, undefined, this, undefined);
            };
            Promise.prototype.then = function(didFulfill, didReject, didProgress) {
              if (isDebugging() && arguments.length > 0 && typeof didFulfill !== "function" && typeof didReject !== "function") {
                var msg = ".then() only accepts functions but was passed: " + util.classString(didFulfill);
                if (arguments.length > 1) {
                  msg += ", " + util.classString(didReject);
                }
                this._warn(msg);
              }
              return this._then(didFulfill, didReject, didProgress, undefined, undefined);
            };
            Promise.prototype.done = function(didFulfill, didReject, didProgress) {
              var promise = this._then(didFulfill, didReject, didProgress, undefined, undefined);
              promise._setIsFinal();
            };
            Promise.prototype.spread = function(didFulfill, didReject) {
              return this.all()._then(didFulfill, didReject, undefined, APPLY, undefined);
            };
            Promise.prototype.isCancellable = function() {
              return !this.isResolved() && this._cancellable();
            };
            Promise.prototype.toJSON = function() {
              var ret = {
                isFulfilled: false,
                isRejected: false,
                fulfillmentValue: undefined,
                rejectionReason: undefined
              };
              if (this.isFulfilled()) {
                ret.fulfillmentValue = this.value();
                ret.isFulfilled = true;
              } else if (this.isRejected()) {
                ret.rejectionReason = this.reason();
                ret.isRejected = true;
              }
              return ret;
            };
            Promise.prototype.all = function() {
              return new PromiseArray(this).promise();
            };
            Promise.prototype.error = function(fn) {
              return this.caught(util.originatesFromRejection, fn);
            };
            Promise.is = function(val) {
              return val instanceof Promise;
            };
            Promise.fromNode = function(fn) {
              var ret = new Promise(INTERNAL);
              var result = tryCatch(fn)(nodebackForPromise(ret));
              if (result === errorObj) {
                ret._rejectCallback(result.e, true, true);
              }
              return ret;
            };
            Promise.all = function(promises) {
              return new PromiseArray(promises).promise();
            };
            Promise.defer = Promise.pending = function() {
              var promise = new Promise(INTERNAL);
              return new PromiseResolver(promise);
            };
            Promise.cast = function(obj) {
              var ret = tryConvertToPromise(obj);
              if (!(ret instanceof Promise)) {
                var val = ret;
                ret = new Promise(INTERNAL);
                ret._fulfillUnchecked(val);
              }
              return ret;
            };
            Promise.resolve = Promise.fulfilled = Promise.cast;
            Promise.reject = Promise.rejected = function(reason) {
              var ret = new Promise(INTERNAL);
              ret._captureStackTrace();
              ret._rejectCallback(reason, true);
              return ret;
            };
            Promise.setScheduler = function(fn) {
              if (typeof fn !== "function")
                throw new TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
              var prev = async._schedule;
              async._schedule = fn;
              return prev;
            };
            Promise.prototype._then = function(didFulfill, didReject, didProgress, receiver, internalData) {
              var haveInternalData = internalData !== undefined;
              var ret = haveInternalData ? internalData : new Promise(INTERNAL);
              if (!haveInternalData) {
                ret._propagateFrom(this, 4 | 1);
                ret._captureStackTrace();
              }
              var target = this._target();
              if (target !== this) {
                if (receiver === undefined)
                  receiver = this._boundTo;
                if (!haveInternalData)
                  ret._setIsMigrated();
              }
              var callbackIndex = target._addCallbacks(didFulfill, didReject, didProgress, ret, receiver, getDomain());
              if (target._isResolved() && !target._isSettlePromisesQueued()) {
                async.invoke(target._settlePromiseAtPostResolution, target, callbackIndex);
              }
              return ret;
            };
            Promise.prototype._settlePromiseAtPostResolution = function(index) {
              if (this._isRejectionUnhandled())
                this._unsetRejectionIsUnhandled();
              this._settlePromiseAt(index);
            };
            Promise.prototype._length = function() {
              return this._bitField & 131071;
            };
            Promise.prototype._isFollowingOrFulfilledOrRejected = function() {
              return (this._bitField & 939524096) > 0;
            };
            Promise.prototype._isFollowing = function() {
              return (this._bitField & 536870912) === 536870912;
            };
            Promise.prototype._setLength = function(len) {
              this._bitField = (this._bitField & -131072) | (len & 131071);
            };
            Promise.prototype._setFulfilled = function() {
              this._bitField = this._bitField | 268435456;
            };
            Promise.prototype._setRejected = function() {
              this._bitField = this._bitField | 134217728;
            };
            Promise.prototype._setFollowing = function() {
              this._bitField = this._bitField | 536870912;
            };
            Promise.prototype._setIsFinal = function() {
              this._bitField = this._bitField | 33554432;
            };
            Promise.prototype._isFinal = function() {
              return (this._bitField & 33554432) > 0;
            };
            Promise.prototype._cancellable = function() {
              return (this._bitField & 67108864) > 0;
            };
            Promise.prototype._setCancellable = function() {
              this._bitField = this._bitField | 67108864;
            };
            Promise.prototype._unsetCancellable = function() {
              this._bitField = this._bitField & (~67108864);
            };
            Promise.prototype._setIsMigrated = function() {
              this._bitField = this._bitField | 4194304;
            };
            Promise.prototype._unsetIsMigrated = function() {
              this._bitField = this._bitField & (~4194304);
            };
            Promise.prototype._isMigrated = function() {
              return (this._bitField & 4194304) > 0;
            };
            Promise.prototype._receiverAt = function(index) {
              var ret = index === 0 ? this._receiver0 : this[index * 5 - 5 + 4];
              if (ret === UNDEFINED_BINDING) {
                return undefined;
              } else if (ret === undefined && this._isBound()) {
                return this._boundValue();
              }
              return ret;
            };
            Promise.prototype._promiseAt = function(index) {
              return index === 0 ? this._promise0 : this[index * 5 - 5 + 3];
            };
            Promise.prototype._fulfillmentHandlerAt = function(index) {
              return index === 0 ? this._fulfillmentHandler0 : this[index * 5 - 5 + 0];
            };
            Promise.prototype._rejectionHandlerAt = function(index) {
              return index === 0 ? this._rejectionHandler0 : this[index * 5 - 5 + 1];
            };
            Promise.prototype._boundValue = function() {
              var ret = this._boundTo;
              if (ret !== undefined) {
                if (ret instanceof Promise) {
                  if (ret.isFulfilled()) {
                    return ret.value();
                  } else {
                    return undefined;
                  }
                }
              }
              return ret;
            };
            Promise.prototype._migrateCallbacks = function(follower, index) {
              var fulfill = follower._fulfillmentHandlerAt(index);
              var reject = follower._rejectionHandlerAt(index);
              var progress = follower._progressHandlerAt(index);
              var promise = follower._promiseAt(index);
              var receiver = follower._receiverAt(index);
              if (promise instanceof Promise)
                promise._setIsMigrated();
              if (receiver === undefined)
                receiver = UNDEFINED_BINDING;
              this._addCallbacks(fulfill, reject, progress, promise, receiver, null);
            };
            Promise.prototype._addCallbacks = function(fulfill, reject, progress, promise, receiver, domain) {
              var index = this._length();
              if (index >= 131071 - 5) {
                index = 0;
                this._setLength(0);
              }
              if (index === 0) {
                this._promise0 = promise;
                if (receiver !== undefined)
                  this._receiver0 = receiver;
                if (typeof fulfill === "function" && !this._isCarryingStackTrace()) {
                  this._fulfillmentHandler0 = domain === null ? fulfill : domain.bind(fulfill);
                }
                if (typeof reject === "function") {
                  this._rejectionHandler0 = domain === null ? reject : domain.bind(reject);
                }
                if (typeof progress === "function") {
                  this._progressHandler0 = domain === null ? progress : domain.bind(progress);
                }
              } else {
                var base = index * 5 - 5;
                this[base + 3] = promise;
                this[base + 4] = receiver;
                if (typeof fulfill === "function") {
                  this[base + 0] = domain === null ? fulfill : domain.bind(fulfill);
                }
                if (typeof reject === "function") {
                  this[base + 1] = domain === null ? reject : domain.bind(reject);
                }
                if (typeof progress === "function") {
                  this[base + 2] = domain === null ? progress : domain.bind(progress);
                }
              }
              this._setLength(index + 1);
              return index;
            };
            Promise.prototype._setProxyHandlers = function(receiver, promiseSlotValue) {
              var index = this._length();
              if (index >= 131071 - 5) {
                index = 0;
                this._setLength(0);
              }
              if (index === 0) {
                this._promise0 = promiseSlotValue;
                this._receiver0 = receiver;
              } else {
                var base = index * 5 - 5;
                this[base + 3] = promiseSlotValue;
                this[base + 4] = receiver;
              }
              this._setLength(index + 1);
            };
            Promise.prototype._proxyPromiseArray = function(promiseArray, index) {
              this._setProxyHandlers(promiseArray, index);
            };
            Promise.prototype._resolveCallback = function(value, shouldBind) {
              if (this._isFollowingOrFulfilledOrRejected())
                return;
              if (value === this)
                return this._rejectCallback(makeSelfResolutionError(), false, true);
              var maybePromise = tryConvertToPromise(value, this);
              if (!(maybePromise instanceof Promise))
                return this._fulfill(value);
              var propagationFlags = 1 | (shouldBind ? 4 : 0);
              this._propagateFrom(maybePromise, propagationFlags);
              var promise = maybePromise._target();
              if (promise._isPending()) {
                var len = this._length();
                for (var i = 0; i < len; ++i) {
                  promise._migrateCallbacks(this, i);
                }
                this._setFollowing();
                this._setLength(0);
                this._setFollowee(promise);
              } else if (promise._isFulfilled()) {
                this._fulfillUnchecked(promise._value());
              } else {
                this._rejectUnchecked(promise._reason(), promise._getCarriedStackTrace());
              }
            };
            Promise.prototype._rejectCallback = function(reason, synchronous, shouldNotMarkOriginatingFromRejection) {
              if (!shouldNotMarkOriginatingFromRejection) {
                util.markAsOriginatingFromRejection(reason);
              }
              var trace = util.ensureErrorObject(reason);
              var hasStack = trace === reason;
              this._attachExtraTrace(trace, synchronous ? hasStack : false);
              this._reject(reason, hasStack ? undefined : trace);
            };
            Promise.prototype._resolveFromResolver = function(resolver) {
              var promise = this;
              this._captureStackTrace();
              this._pushContext();
              var synchronous = true;
              var r = tryCatch(resolver)(function(value) {
                if (promise === null)
                  return;
                promise._resolveCallback(value);
                promise = null;
              }, function(reason) {
                if (promise === null)
                  return;
                promise._rejectCallback(reason, synchronous);
                promise = null;
              });
              synchronous = false;
              this._popContext();
              if (r !== undefined && r === errorObj && promise !== null) {
                promise._rejectCallback(r.e, true, true);
                promise = null;
              }
            };
            Promise.prototype._settlePromiseFromHandler = function(handler, receiver, value, promise) {
              if (promise._isRejected())
                return;
              promise._pushContext();
              var x;
              if (receiver === APPLY && !this._isRejected()) {
                x = tryCatch(handler).apply(this._boundValue(), value);
              } else {
                x = tryCatch(handler).call(receiver, value);
              }
              promise._popContext();
              if (x === errorObj || x === promise || x === NEXT_FILTER) {
                var err = x === promise ? makeSelfResolutionError() : x.e;
                promise._rejectCallback(err, false, true);
              } else {
                promise._resolveCallback(x);
              }
            };
            Promise.prototype._target = function() {
              var ret = this;
              while (ret._isFollowing())
                ret = ret._followee();
              return ret;
            };
            Promise.prototype._followee = function() {
              return this._rejectionHandler0;
            };
            Promise.prototype._setFollowee = function(promise) {
              this._rejectionHandler0 = promise;
            };
            Promise.prototype._cleanValues = function() {
              if (this._cancellable()) {
                this._cancellationParent = undefined;
              }
            };
            Promise.prototype._propagateFrom = function(parent, flags) {
              if ((flags & 1) > 0 && parent._cancellable()) {
                this._setCancellable();
                this._cancellationParent = parent;
              }
              if ((flags & 4) > 0 && parent._isBound()) {
                this._setBoundTo(parent._boundTo);
              }
            };
            Promise.prototype._fulfill = function(value) {
              if (this._isFollowingOrFulfilledOrRejected())
                return;
              this._fulfillUnchecked(value);
            };
            Promise.prototype._reject = function(reason, carriedStackTrace) {
              if (this._isFollowingOrFulfilledOrRejected())
                return;
              this._rejectUnchecked(reason, carriedStackTrace);
            };
            Promise.prototype._settlePromiseAt = function(index) {
              var promise = this._promiseAt(index);
              var isPromise = promise instanceof Promise;
              if (isPromise && promise._isMigrated()) {
                promise._unsetIsMigrated();
                return async.invoke(this._settlePromiseAt, this, index);
              }
              var handler = this._isFulfilled() ? this._fulfillmentHandlerAt(index) : this._rejectionHandlerAt(index);
              var carriedStackTrace = this._isCarryingStackTrace() ? this._getCarriedStackTrace() : undefined;
              var value = this._settledValue;
              var receiver = this._receiverAt(index);
              this._clearCallbackDataAtIndex(index);
              if (typeof handler === "function") {
                if (!isPromise) {
                  handler.call(receiver, value, promise);
                } else {
                  this._settlePromiseFromHandler(handler, receiver, value, promise);
                }
              } else if (receiver instanceof PromiseArray) {
                if (!receiver._isResolved()) {
                  if (this._isFulfilled()) {
                    receiver._promiseFulfilled(value, promise);
                  } else {
                    receiver._promiseRejected(value, promise);
                  }
                }
              } else if (isPromise) {
                if (this._isFulfilled()) {
                  promise._fulfill(value);
                } else {
                  promise._reject(value, carriedStackTrace);
                }
              }
              if (index >= 4 && (index & 31) === 4)
                async.invokeLater(this._setLength, this, 0);
            };
            Promise.prototype._clearCallbackDataAtIndex = function(index) {
              if (index === 0) {
                if (!this._isCarryingStackTrace()) {
                  this._fulfillmentHandler0 = undefined;
                }
                this._rejectionHandler0 = this._progressHandler0 = this._receiver0 = this._promise0 = undefined;
              } else {
                var base = index * 5 - 5;
                this[base + 3] = this[base + 4] = this[base + 0] = this[base + 1] = this[base + 2] = undefined;
              }
            };
            Promise.prototype._isSettlePromisesQueued = function() {
              return (this._bitField & -1073741824) === -1073741824;
            };
            Promise.prototype._setSettlePromisesQueued = function() {
              this._bitField = this._bitField | -1073741824;
            };
            Promise.prototype._unsetSettlePromisesQueued = function() {
              this._bitField = this._bitField & (~-1073741824);
            };
            Promise.prototype._queueSettlePromises = function() {
              async.settlePromises(this);
              this._setSettlePromisesQueued();
            };
            Promise.prototype._fulfillUnchecked = function(value) {
              if (value === this) {
                var err = makeSelfResolutionError();
                this._attachExtraTrace(err);
                return this._rejectUnchecked(err, undefined);
              }
              this._setFulfilled();
              this._settledValue = value;
              this._cleanValues();
              if (this._length() > 0) {
                this._queueSettlePromises();
              }
            };
            Promise.prototype._rejectUncheckedCheckError = function(reason) {
              var trace = util.ensureErrorObject(reason);
              this._rejectUnchecked(reason, trace === reason ? undefined : trace);
            };
            Promise.prototype._rejectUnchecked = function(reason, trace) {
              if (reason === this) {
                var err = makeSelfResolutionError();
                this._attachExtraTrace(err);
                return this._rejectUnchecked(err);
              }
              this._setRejected();
              this._settledValue = reason;
              this._cleanValues();
              if (this._isFinal()) {
                async.throwLater(function(e) {
                  if ("stack" in e) {
                    async.invokeFirst(CapturedTrace.unhandledRejection, undefined, e);
                  }
                  throw e;
                }, trace === undefined ? reason : trace);
                return;
              }
              if (trace !== undefined && trace !== reason) {
                this._setCarriedStackTrace(trace);
              }
              if (this._length() > 0) {
                this._queueSettlePromises();
              } else {
                this._ensurePossibleRejectionHandled();
              }
            };
            Promise.prototype._settlePromises = function() {
              this._unsetSettlePromisesQueued();
              var len = this._length();
              for (var i = 0; i < len; i++) {
                this._settlePromiseAt(i);
              }
            };
            util.notEnumerableProp(Promise, "_makeSelfResolutionError", makeSelfResolutionError);
            _dereq_("./progress.js")(Promise, PromiseArray);
            _dereq_("./method.js")(Promise, INTERNAL, tryConvertToPromise, apiRejection);
            _dereq_("./bind.js")(Promise, INTERNAL, tryConvertToPromise);
            _dereq_("./finally.js")(Promise, NEXT_FILTER, tryConvertToPromise);
            _dereq_("./direct_resolve.js")(Promise);
            _dereq_("./synchronous_inspection.js")(Promise);
            _dereq_("./join.js")(Promise, PromiseArray, tryConvertToPromise, INTERNAL);
            Promise.Promise = Promise;
            _dereq_('./map.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL);
            _dereq_('./cancel.js')(Promise);
            _dereq_('./using.js')(Promise, apiRejection, tryConvertToPromise, createContext);
            _dereq_('./generators.js')(Promise, apiRejection, INTERNAL, tryConvertToPromise);
            _dereq_('./nodeify.js')(Promise);
            _dereq_('./call_get.js')(Promise);
            _dereq_('./props.js')(Promise, PromiseArray, tryConvertToPromise, apiRejection);
            _dereq_('./race.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
            _dereq_('./reduce.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL);
            _dereq_('./settle.js')(Promise, PromiseArray);
            _dereq_('./some.js')(Promise, PromiseArray, apiRejection);
            _dereq_('./promisify.js')(Promise, INTERNAL);
            _dereq_('./any.js')(Promise);
            _dereq_('./each.js')(Promise, INTERNAL);
            _dereq_('./timers.js')(Promise, INTERNAL);
            _dereq_('./filter.js')(Promise, INTERNAL);
            util.toFastProperties(Promise);
            util.toFastProperties(Promise.prototype);
            function fillTypes(value) {
              var p = new Promise(INTERNAL);
              p._fulfillmentHandler0 = value;
              p._rejectionHandler0 = value;
              p._progressHandler0 = value;
              p._promise0 = value;
              p._receiver0 = value;
              p._settledValue = value;
            }
            fillTypes({a: 1});
            fillTypes({b: 2});
            fillTypes({c: 3});
            fillTypes(1);
            fillTypes(function() {});
            fillTypes(undefined);
            fillTypes(false);
            fillTypes(new Promise(INTERNAL));
            CapturedTrace.setBounds(async.firstLineError, util.lastLineError);
            return Promise;
          };
        }, {
          "./any.js": 1,
          "./async.js": 2,
          "./bind.js": 3,
          "./call_get.js": 5,
          "./cancel.js": 6,
          "./captured_trace.js": 7,
          "./catch_filter.js": 8,
          "./context.js": 9,
          "./debuggability.js": 10,
          "./direct_resolve.js": 11,
          "./each.js": 12,
          "./errors.js": 13,
          "./filter.js": 15,
          "./finally.js": 16,
          "./generators.js": 17,
          "./join.js": 18,
          "./map.js": 19,
          "./method.js": 20,
          "./nodeify.js": 21,
          "./progress.js": 22,
          "./promise_array.js": 24,
          "./promise_resolver.js": 25,
          "./promisify.js": 26,
          "./props.js": 27,
          "./race.js": 29,
          "./reduce.js": 30,
          "./settle.js": 32,
          "./some.js": 33,
          "./synchronous_inspection.js": 34,
          "./thenables.js": 35,
          "./timers.js": 36,
          "./using.js": 37,
          "./util.js": 38
        }],
        24: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(Promise, INTERNAL, tryConvertToPromise, apiRejection) {
            var util = _dereq_("./util.js");
            var isArray = util.isArray;
            function toResolutionValue(val) {
              switch (val) {
                case -2:
                  return [];
                case -3:
                  return {};
              }
            }
            function PromiseArray(values) {
              var promise = this._promise = new Promise(INTERNAL);
              var parent;
              if (values instanceof Promise) {
                parent = values;
                promise._propagateFrom(parent, 1 | 4);
              }
              this._values = values;
              this._length = 0;
              this._totalResolved = 0;
              this._init(undefined, -2);
            }
            PromiseArray.prototype.length = function() {
              return this._length;
            };
            PromiseArray.prototype.promise = function() {
              return this._promise;
            };
            PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
              var values = tryConvertToPromise(this._values, this._promise);
              if (values instanceof Promise) {
                values = values._target();
                this._values = values;
                if (values._isFulfilled()) {
                  values = values._value();
                  if (!isArray(values)) {
                    var err = new Promise.TypeError("expecting an array, a promise or a thenable\u000a\u000a    See http://goo.gl/s8MMhc\u000a");
                    this.__hardReject__(err);
                    return;
                  }
                } else if (values._isPending()) {
                  values._then(init, this._reject, undefined, this, resolveValueIfEmpty);
                  return;
                } else {
                  this._reject(values._reason());
                  return;
                }
              } else if (!isArray(values)) {
                this._promise._reject(apiRejection("expecting an array, a promise or a thenable\u000a\u000a    See http://goo.gl/s8MMhc\u000a")._reason());
                return;
              }
              if (values.length === 0) {
                if (resolveValueIfEmpty === -5) {
                  this._resolveEmptyArray();
                } else {
                  this._resolve(toResolutionValue(resolveValueIfEmpty));
                }
                return;
              }
              var len = this.getActualLength(values.length);
              this._length = len;
              this._values = this.shouldCopyValues() ? new Array(len) : this._values;
              var promise = this._promise;
              for (var i = 0; i < len; ++i) {
                var isResolved = this._isResolved();
                var maybePromise = tryConvertToPromise(values[i], promise);
                if (maybePromise instanceof Promise) {
                  maybePromise = maybePromise._target();
                  if (isResolved) {
                    maybePromise._ignoreRejections();
                  } else if (maybePromise._isPending()) {
                    maybePromise._proxyPromiseArray(this, i);
                  } else if (maybePromise._isFulfilled()) {
                    this._promiseFulfilled(maybePromise._value(), i);
                  } else {
                    this._promiseRejected(maybePromise._reason(), i);
                  }
                } else if (!isResolved) {
                  this._promiseFulfilled(maybePromise, i);
                }
              }
            };
            PromiseArray.prototype._isResolved = function() {
              return this._values === null;
            };
            PromiseArray.prototype._resolve = function(value) {
              this._values = null;
              this._promise._fulfill(value);
            };
            PromiseArray.prototype.__hardReject__ = PromiseArray.prototype._reject = function(reason) {
              this._values = null;
              this._promise._rejectCallback(reason, false, true);
            };
            PromiseArray.prototype._promiseProgressed = function(progressValue, index) {
              this._promise._progress({
                index: index,
                value: progressValue
              });
            };
            PromiseArray.prototype._promiseFulfilled = function(value, index) {
              this._values[index] = value;
              var totalResolved = ++this._totalResolved;
              if (totalResolved >= this._length) {
                this._resolve(this._values);
              }
            };
            PromiseArray.prototype._promiseRejected = function(reason, index) {
              this._totalResolved++;
              this._reject(reason);
            };
            PromiseArray.prototype.shouldCopyValues = function() {
              return true;
            };
            PromiseArray.prototype.getActualLength = function(len) {
              return len;
            };
            return PromiseArray;
          };
        }, {"./util.js": 38}],
        25: [function(_dereq_, module, exports) {
          "use strict";
          var util = _dereq_("./util.js");
          var maybeWrapAsError = util.maybeWrapAsError;
          var errors = _dereq_("./errors.js");
          var TimeoutError = errors.TimeoutError;
          var OperationalError = errors.OperationalError;
          var haveGetters = util.haveGetters;
          var es5 = _dereq_("./es5.js");
          function isUntypedError(obj) {
            return obj instanceof Error && es5.getPrototypeOf(obj) === Error.prototype;
          }
          var rErrorKey = /^(?:name|message|stack|cause)$/;
          function wrapAsOperationalError(obj) {
            var ret;
            if (isUntypedError(obj)) {
              ret = new OperationalError(obj);
              ret.name = obj.name;
              ret.message = obj.message;
              ret.stack = obj.stack;
              var keys = es5.keys(obj);
              for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                if (!rErrorKey.test(key)) {
                  ret[key] = obj[key];
                }
              }
              return ret;
            }
            util.markAsOriginatingFromRejection(obj);
            return obj;
          }
          function nodebackForPromise(promise) {
            return function(err, value) {
              if (promise === null)
                return;
              if (err) {
                var wrapped = wrapAsOperationalError(maybeWrapAsError(err));
                promise._attachExtraTrace(wrapped);
                promise._reject(wrapped);
              } else if (arguments.length > 2) {
                var $_len = arguments.length;
                var args = new Array($_len - 1);
                for (var $_i = 1; $_i < $_len; ++$_i) {
                  args[$_i - 1] = arguments[$_i];
                }
                promise._fulfill(args);
              } else {
                promise._fulfill(value);
              }
              promise = null;
            };
          }
          var PromiseResolver;
          if (!haveGetters) {
            PromiseResolver = function(promise) {
              this.promise = promise;
              this.asCallback = nodebackForPromise(promise);
              this.callback = this.asCallback;
            };
          } else {
            PromiseResolver = function(promise) {
              this.promise = promise;
            };
          }
          if (haveGetters) {
            var prop = {get: function() {
                return nodebackForPromise(this.promise);
              }};
            es5.defineProperty(PromiseResolver.prototype, "asCallback", prop);
            es5.defineProperty(PromiseResolver.prototype, "callback", prop);
          }
          PromiseResolver._nodebackForPromise = nodebackForPromise;
          PromiseResolver.prototype.toString = function() {
            return "[object PromiseResolver]";
          };
          PromiseResolver.prototype.resolve = PromiseResolver.prototype.fulfill = function(value) {
            if (!(this instanceof PromiseResolver)) {
              throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\u000a\u000a    See http://goo.gl/sdkXL9\u000a");
            }
            this.promise._resolveCallback(value);
          };
          PromiseResolver.prototype.reject = function(reason) {
            if (!(this instanceof PromiseResolver)) {
              throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\u000a\u000a    See http://goo.gl/sdkXL9\u000a");
            }
            this.promise._rejectCallback(reason);
          };
          PromiseResolver.prototype.progress = function(value) {
            if (!(this instanceof PromiseResolver)) {
              throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\u000a\u000a    See http://goo.gl/sdkXL9\u000a");
            }
            this.promise._progress(value);
          };
          PromiseResolver.prototype.cancel = function(err) {
            this.promise.cancel(err);
          };
          PromiseResolver.prototype.timeout = function() {
            this.reject(new TimeoutError("timeout"));
          };
          PromiseResolver.prototype.isResolved = function() {
            return this.promise.isResolved();
          };
          PromiseResolver.prototype.toJSON = function() {
            return this.promise.toJSON();
          };
          module.exports = PromiseResolver;
        }, {
          "./errors.js": 13,
          "./es5.js": 14,
          "./util.js": 38
        }],
        26: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(Promise, INTERNAL) {
            var THIS = {};
            var util = _dereq_("./util.js");
            var nodebackForPromise = _dereq_("./promise_resolver.js")._nodebackForPromise;
            var withAppended = util.withAppended;
            var maybeWrapAsError = util.maybeWrapAsError;
            var canEvaluate = util.canEvaluate;
            var TypeError = _dereq_("./errors").TypeError;
            var defaultSuffix = "Async";
            var defaultPromisified = {__isPromisified__: true};
            var noCopyProps = ["arity", "length", "name", "arguments", "caller", "callee", "prototype", "__isPromisified__"];
            var noCopyPropsPattern = new RegExp("^(?:" + noCopyProps.join("|") + ")$");
            var defaultFilter = function(name) {
              return util.isIdentifier(name) && name.charAt(0) !== "_" && name !== "constructor";
            };
            function propsFilter(key) {
              return !noCopyPropsPattern.test(key);
            }
            function isPromisified(fn) {
              try {
                return fn.__isPromisified__ === true;
              } catch (e) {
                return false;
              }
            }
            function hasPromisified(obj, key, suffix) {
              var val = util.getDataPropertyOrDefault(obj, key + suffix, defaultPromisified);
              return val ? isPromisified(val) : false;
            }
            function checkValid(ret, suffix, suffixRegexp) {
              for (var i = 0; i < ret.length; i += 2) {
                var key = ret[i];
                if (suffixRegexp.test(key)) {
                  var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
                  for (var j = 0; j < ret.length; j += 2) {
                    if (ret[j] === keyWithoutAsyncSuffix) {
                      throw new TypeError("Cannot promisify an API that has normal methods with '%s'-suffix\u000a\u000a    See http://goo.gl/iWrZbw\u000a".replace("%s", suffix));
                    }
                  }
                }
              }
            }
            function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
              var keys = util.inheritedDataKeys(obj);
              var ret = [];
              for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                var value = obj[key];
                var passesDefaultFilter = filter === defaultFilter ? true : defaultFilter(key, value, obj);
                if (typeof value === "function" && !isPromisified(value) && !hasPromisified(obj, key, suffix) && filter(key, value, obj, passesDefaultFilter)) {
                  ret.push(key, value);
                }
              }
              checkValid(ret, suffix, suffixRegexp);
              return ret;
            }
            var escapeIdentRegex = function(str) {
              return str.replace(/([$])/, "\\$");
            };
            var makeNodePromisifiedEval;
            if (!true) {
              var switchCaseArgumentOrder = function(likelyArgumentCount) {
                var ret = [likelyArgumentCount];
                var min = Math.max(0, likelyArgumentCount - 1 - 3);
                for (var i = likelyArgumentCount - 1; i >= min; --i) {
                  ret.push(i);
                }
                for (var i = likelyArgumentCount + 1; i <= 3; ++i) {
                  ret.push(i);
                }
                return ret;
              };
              var argumentSequence = function(argumentCount) {
                return util.filledRange(argumentCount, "_arg", "");
              };
              var parameterDeclaration = function(parameterCount) {
                return util.filledRange(Math.max(parameterCount, 3), "_arg", "");
              };
              var parameterCount = function(fn) {
                if (typeof fn.length === "number") {
                  return Math.max(Math.min(fn.length, 1023 + 1), 0);
                }
                return 0;
              };
              makeNodePromisifiedEval = function(callback, receiver, originalName, fn) {
                var newParameterCount = Math.max(0, parameterCount(fn) - 1);
                var argumentOrder = switchCaseArgumentOrder(newParameterCount);
                var shouldProxyThis = typeof callback === "string" || receiver === THIS;
                function generateCallForArgumentCount(count) {
                  var args = argumentSequence(count).join(", ");
                  var comma = count > 0 ? ", " : "";
                  var ret;
                  if (shouldProxyThis) {
                    ret = "ret = callback.call(this, {{args}}, nodeback); break;\n";
                  } else {
                    ret = receiver === undefined ? "ret = callback({{args}}, nodeback); break;\n" : "ret = callback.call(receiver, {{args}}, nodeback); break;\n";
                  }
                  return ret.replace("{{args}}", args).replace(", ", comma);
                }
                function generateArgumentSwitchCase() {
                  var ret = "";
                  for (var i = 0; i < argumentOrder.length; ++i) {
                    ret += "case " + argumentOrder[i] + ":" + generateCallForArgumentCount(argumentOrder[i]);
                  }
                  ret += "                                                             \n\
        default:                                                             \n\
            var args = new Array(len + 1);                                   \n\
            var i = 0;                                                       \n\
            for (var i = 0; i < len; ++i) {                                  \n\
               args[i] = arguments[i];                                       \n\
            }                                                                \n\
            args[i] = nodeback;                                              \n\
            [CodeForCall]                                                    \n\
            break;                                                           \n\
        ".replace("[CodeForCall]", (shouldProxyThis ? "ret = callback.apply(this, args);\n" : "ret = callback.apply(receiver, args);\n"));
                  return ret;
                }
                var getFunctionCode = typeof callback === "string" ? ("this != null ? this['" + callback + "'] : fn") : "fn";
                return new Function("Promise", "fn", "receiver", "withAppended", "maybeWrapAsError", "nodebackForPromise", "tryCatch", "errorObj", "notEnumerableProp", "INTERNAL", "'use strict';                            \n\
        var ret = function (Parameters) {                                    \n\
            'use strict';                                                    \n\
            var len = arguments.length;                                      \n\
            var promise = new Promise(INTERNAL);                             \n\
            promise._captureStackTrace();                                    \n\
            var nodeback = nodebackForPromise(promise);                      \n\
            var ret;                                                         \n\
            var callback = tryCatch([GetFunctionCode]);                      \n\
            switch(len) {                                                    \n\
                [CodeForSwitchCase]                                          \n\
            }                                                                \n\
            if (ret === errorObj) {                                          \n\
                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n\
            }                                                                \n\
            return promise;                                                  \n\
        };                                                                   \n\
        notEnumerableProp(ret, '__isPromisified__', true);                   \n\
        return ret;                                                          \n\
        ".replace("Parameters", parameterDeclaration(newParameterCount)).replace("[CodeForSwitchCase]", generateArgumentSwitchCase()).replace("[GetFunctionCode]", getFunctionCode))(Promise, fn, receiver, withAppended, maybeWrapAsError, nodebackForPromise, util.tryCatch, util.errorObj, util.notEnumerableProp, INTERNAL);
              };
            }
            function makeNodePromisifiedClosure(callback, receiver, _, fn) {
              var defaultThis = (function() {
                return this;
              })();
              var method = callback;
              if (typeof method === "string") {
                callback = fn;
              }
              function promisified() {
                var _receiver = receiver;
                if (receiver === THIS)
                  _receiver = this;
                var promise = new Promise(INTERNAL);
                promise._captureStackTrace();
                var cb = typeof method === "string" && this !== defaultThis ? this[method] : callback;
                var fn = nodebackForPromise(promise);
                try {
                  cb.apply(_receiver, withAppended(arguments, fn));
                } catch (e) {
                  promise._rejectCallback(maybeWrapAsError(e), true, true);
                }
                return promise;
              }
              util.notEnumerableProp(promisified, "__isPromisified__", true);
              return promisified;
            }
            var makeNodePromisified = canEvaluate ? makeNodePromisifiedEval : makeNodePromisifiedClosure;
            function promisifyAll(obj, suffix, filter, promisifier) {
              var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
              var methods = promisifiableMethods(obj, suffix, suffixRegexp, filter);
              for (var i = 0,
                  len = methods.length; i < len; i += 2) {
                var key = methods[i];
                var fn = methods[i + 1];
                var promisifiedKey = key + suffix;
                if (promisifier === makeNodePromisified) {
                  obj[promisifiedKey] = makeNodePromisified(key, THIS, key, fn, suffix);
                } else {
                  var promisified = promisifier(fn, function() {
                    return makeNodePromisified(key, THIS, key, fn, suffix);
                  });
                  util.notEnumerableProp(promisified, "__isPromisified__", true);
                  obj[promisifiedKey] = promisified;
                }
              }
              util.toFastProperties(obj);
              return obj;
            }
            function promisify(callback, receiver) {
              return makeNodePromisified(callback, receiver, undefined, callback);
            }
            Promise.promisify = function(fn, receiver) {
              if (typeof fn !== "function") {
                throw new TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
              }
              if (isPromisified(fn)) {
                return fn;
              }
              var ret = promisify(fn, arguments.length < 2 ? THIS : receiver);
              util.copyDescriptors(fn, ret, propsFilter);
              return ret;
            };
            Promise.promisifyAll = function(target, options) {
              if (typeof target !== "function" && typeof target !== "object") {
                throw new TypeError("the target of promisifyAll must be an object or a function\u000a\u000a    See http://goo.gl/9ITlV0\u000a");
              }
              options = Object(options);
              var suffix = options.suffix;
              if (typeof suffix !== "string")
                suffix = defaultSuffix;
              var filter = options.filter;
              if (typeof filter !== "function")
                filter = defaultFilter;
              var promisifier = options.promisifier;
              if (typeof promisifier !== "function")
                promisifier = makeNodePromisified;
              if (!util.isIdentifier(suffix)) {
                throw new RangeError("suffix must be a valid identifier\u000a\u000a    See http://goo.gl/8FZo5V\u000a");
              }
              var keys = util.inheritedDataKeys(target);
              for (var i = 0; i < keys.length; ++i) {
                var value = target[keys[i]];
                if (keys[i] !== "constructor" && util.isClass(value)) {
                  promisifyAll(value.prototype, suffix, filter, promisifier);
                  promisifyAll(value, suffix, filter, promisifier);
                }
              }
              return promisifyAll(target, suffix, filter, promisifier);
            };
          };
        }, {
          "./errors": 13,
          "./promise_resolver.js": 25,
          "./util.js": 38
        }],
        27: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(Promise, PromiseArray, tryConvertToPromise, apiRejection) {
            var util = _dereq_("./util.js");
            var isObject = util.isObject;
            var es5 = _dereq_("./es5.js");
            function PropertiesPromiseArray(obj) {
              var keys = es5.keys(obj);
              var len = keys.length;
              var values = new Array(len * 2);
              for (var i = 0; i < len; ++i) {
                var key = keys[i];
                values[i] = obj[key];
                values[i + len] = key;
              }
              this.constructor$(values);
            }
            util.inherits(PropertiesPromiseArray, PromiseArray);
            PropertiesPromiseArray.prototype._init = function() {
              this._init$(undefined, -3);
            };
            PropertiesPromiseArray.prototype._promiseFulfilled = function(value, index) {
              this._values[index] = value;
              var totalResolved = ++this._totalResolved;
              if (totalResolved >= this._length) {
                var val = {};
                var keyOffset = this.length();
                for (var i = 0,
                    len = this.length(); i < len; ++i) {
                  val[this._values[i + keyOffset]] = this._values[i];
                }
                this._resolve(val);
              }
            };
            PropertiesPromiseArray.prototype._promiseProgressed = function(value, index) {
              this._promise._progress({
                key: this._values[index + this.length()],
                value: value
              });
            };
            PropertiesPromiseArray.prototype.shouldCopyValues = function() {
              return false;
            };
            PropertiesPromiseArray.prototype.getActualLength = function(len) {
              return len >> 1;
            };
            function props(promises) {
              var ret;
              var castValue = tryConvertToPromise(promises);
              if (!isObject(castValue)) {
                return apiRejection("cannot await properties of a non-object\u000a\u000a    See http://goo.gl/OsFKC8\u000a");
              } else if (castValue instanceof Promise) {
                ret = castValue._then(Promise.props, undefined, undefined, undefined, undefined);
              } else {
                ret = new PropertiesPromiseArray(castValue).promise();
              }
              if (castValue instanceof Promise) {
                ret._propagateFrom(castValue, 4);
              }
              return ret;
            }
            Promise.prototype.props = function() {
              return props(this);
            };
            Promise.props = function(promises) {
              return props(promises);
            };
          };
        }, {
          "./es5.js": 14,
          "./util.js": 38
        }],
        28: [function(_dereq_, module, exports) {
          "use strict";
          function arrayMove(src, srcIndex, dst, dstIndex, len) {
            for (var j = 0; j < len; ++j) {
              dst[j + dstIndex] = src[j + srcIndex];
              src[j + srcIndex] = void 0;
            }
          }
          function Queue(capacity) {
            this._capacity = capacity;
            this._length = 0;
            this._front = 0;
          }
          Queue.prototype._willBeOverCapacity = function(size) {
            return this._capacity < size;
          };
          Queue.prototype._pushOne = function(arg) {
            var length = this.length();
            this._checkCapacity(length + 1);
            var i = (this._front + length) & (this._capacity - 1);
            this[i] = arg;
            this._length = length + 1;
          };
          Queue.prototype._unshiftOne = function(value) {
            var capacity = this._capacity;
            this._checkCapacity(this.length() + 1);
            var front = this._front;
            var i = ((((front - 1) & (capacity - 1)) ^ capacity) - capacity);
            this[i] = value;
            this._front = i;
            this._length = this.length() + 1;
          };
          Queue.prototype.unshift = function(fn, receiver, arg) {
            this._unshiftOne(arg);
            this._unshiftOne(receiver);
            this._unshiftOne(fn);
          };
          Queue.prototype.push = function(fn, receiver, arg) {
            var length = this.length() + 3;
            if (this._willBeOverCapacity(length)) {
              this._pushOne(fn);
              this._pushOne(receiver);
              this._pushOne(arg);
              return;
            }
            var j = this._front + length - 3;
            this._checkCapacity(length);
            var wrapMask = this._capacity - 1;
            this[(j + 0) & wrapMask] = fn;
            this[(j + 1) & wrapMask] = receiver;
            this[(j + 2) & wrapMask] = arg;
            this._length = length;
          };
          Queue.prototype.shift = function() {
            var front = this._front,
                ret = this[front];
            this[front] = undefined;
            this._front = (front + 1) & (this._capacity - 1);
            this._length--;
            return ret;
          };
          Queue.prototype.length = function() {
            return this._length;
          };
          Queue.prototype._checkCapacity = function(size) {
            if (this._capacity < size) {
              this._resizeTo(this._capacity << 1);
            }
          };
          Queue.prototype._resizeTo = function(capacity) {
            var oldCapacity = this._capacity;
            this._capacity = capacity;
            var front = this._front;
            var length = this._length;
            var moveItemsCount = (front + length) & (oldCapacity - 1);
            arrayMove(this, 0, this, oldCapacity, moveItemsCount);
          };
          module.exports = Queue;
        }, {}],
        29: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(Promise, INTERNAL, tryConvertToPromise, apiRejection) {
            var isArray = _dereq_("./util.js").isArray;
            var raceLater = function(promise) {
              return promise.then(function(array) {
                return race(array, promise);
              });
            };
            function race(promises, parent) {
              var maybePromise = tryConvertToPromise(promises);
              if (maybePromise instanceof Promise) {
                return raceLater(maybePromise);
              } else if (!isArray(promises)) {
                return apiRejection("expecting an array, a promise or a thenable\u000a\u000a    See http://goo.gl/s8MMhc\u000a");
              }
              var ret = new Promise(INTERNAL);
              if (parent !== undefined) {
                ret._propagateFrom(parent, 4 | 1);
              }
              var fulfill = ret._fulfill;
              var reject = ret._reject;
              for (var i = 0,
                  len = promises.length; i < len; ++i) {
                var val = promises[i];
                if (val === undefined && !(i in promises)) {
                  continue;
                }
                Promise.cast(val)._then(fulfill, reject, undefined, ret, null);
              }
              return ret;
            }
            Promise.race = function(promises) {
              return race(promises, undefined);
            };
            Promise.prototype.race = function() {
              return race(this, undefined);
            };
          };
        }, {"./util.js": 38}],
        30: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL) {
            var getDomain = Promise._getDomain;
            var async = _dereq_("./async.js");
            var util = _dereq_("./util.js");
            var tryCatch = util.tryCatch;
            var errorObj = util.errorObj;
            function ReductionPromiseArray(promises, fn, accum, _each) {
              this.constructor$(promises);
              this._promise._captureStackTrace();
              this._preservedValues = _each === INTERNAL ? [] : null;
              this._zerothIsAccum = (accum === undefined);
              this._gotAccum = false;
              this._reducingIndex = (this._zerothIsAccum ? 1 : 0);
              this._valuesPhase = undefined;
              var maybePromise = tryConvertToPromise(accum, this._promise);
              var rejected = false;
              var isPromise = maybePromise instanceof Promise;
              if (isPromise) {
                maybePromise = maybePromise._target();
                if (maybePromise._isPending()) {
                  maybePromise._proxyPromiseArray(this, -1);
                } else if (maybePromise._isFulfilled()) {
                  accum = maybePromise._value();
                  this._gotAccum = true;
                } else {
                  this._reject(maybePromise._reason());
                  rejected = true;
                }
              }
              if (!(isPromise || this._zerothIsAccum))
                this._gotAccum = true;
              var domain = getDomain();
              this._callback = domain === null ? fn : domain.bind(fn);
              this._accum = accum;
              if (!rejected)
                async.invoke(init, this, undefined);
            }
            function init() {
              this._init$(undefined, -5);
            }
            util.inherits(ReductionPromiseArray, PromiseArray);
            ReductionPromiseArray.prototype._init = function() {};
            ReductionPromiseArray.prototype._resolveEmptyArray = function() {
              if (this._gotAccum || this._zerothIsAccum) {
                this._resolve(this._preservedValues !== null ? [] : this._accum);
              }
            };
            ReductionPromiseArray.prototype._promiseFulfilled = function(value, index) {
              var values = this._values;
              values[index] = value;
              var length = this.length();
              var preservedValues = this._preservedValues;
              var isEach = preservedValues !== null;
              var gotAccum = this._gotAccum;
              var valuesPhase = this._valuesPhase;
              var valuesPhaseIndex;
              if (!valuesPhase) {
                valuesPhase = this._valuesPhase = new Array(length);
                for (valuesPhaseIndex = 0; valuesPhaseIndex < length; ++valuesPhaseIndex) {
                  valuesPhase[valuesPhaseIndex] = 0;
                }
              }
              valuesPhaseIndex = valuesPhase[index];
              if (index === 0 && this._zerothIsAccum) {
                this._accum = value;
                this._gotAccum = gotAccum = true;
                valuesPhase[index] = ((valuesPhaseIndex === 0) ? 1 : 2);
              } else if (index === -1) {
                this._accum = value;
                this._gotAccum = gotAccum = true;
              } else {
                if (valuesPhaseIndex === 0) {
                  valuesPhase[index] = 1;
                } else {
                  valuesPhase[index] = 2;
                  this._accum = value;
                }
              }
              if (!gotAccum)
                return;
              var callback = this._callback;
              var receiver = this._promise._boundValue();
              var ret;
              for (var i = this._reducingIndex; i < length; ++i) {
                valuesPhaseIndex = valuesPhase[i];
                if (valuesPhaseIndex === 2) {
                  this._reducingIndex = i + 1;
                  continue;
                }
                if (valuesPhaseIndex !== 1)
                  return;
                value = values[i];
                this._promise._pushContext();
                if (isEach) {
                  preservedValues.push(value);
                  ret = tryCatch(callback).call(receiver, value, i, length);
                } else {
                  ret = tryCatch(callback).call(receiver, this._accum, value, i, length);
                }
                this._promise._popContext();
                if (ret === errorObj)
                  return this._reject(ret.e);
                var maybePromise = tryConvertToPromise(ret, this._promise);
                if (maybePromise instanceof Promise) {
                  maybePromise = maybePromise._target();
                  if (maybePromise._isPending()) {
                    valuesPhase[i] = 4;
                    return maybePromise._proxyPromiseArray(this, i);
                  } else if (maybePromise._isFulfilled()) {
                    ret = maybePromise._value();
                  } else {
                    return this._reject(maybePromise._reason());
                  }
                }
                this._reducingIndex = i + 1;
                this._accum = ret;
              }
              this._resolve(isEach ? preservedValues : this._accum);
            };
            function reduce(promises, fn, initialValue, _each) {
              if (typeof fn !== "function")
                return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
              var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
              return array.promise();
            }
            Promise.prototype.reduce = function(fn, initialValue) {
              return reduce(this, fn, initialValue, null);
            };
            Promise.reduce = function(promises, fn, initialValue, _each) {
              return reduce(promises, fn, initialValue, _each);
            };
          };
        }, {
          "./async.js": 2,
          "./util.js": 38
        }],
        31: [function(_dereq_, module, exports) {
          "use strict";
          var schedule;
          var util = _dereq_("./util");
          var noAsyncScheduler = function() {
            throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/m3OTXk\u000a");
          };
          if (util.isNode && typeof MutationObserver === "undefined") {
            var GlobalSetImmediate = global.setImmediate;
            var ProcessNextTick = process.nextTick;
            schedule = util.isRecentNode ? function(fn) {
              GlobalSetImmediate.call(global, fn);
            } : function(fn) {
              ProcessNextTick.call(process, fn);
            };
          } else if ((typeof MutationObserver !== "undefined") && !(typeof window !== "undefined" && window.navigator && window.navigator.standalone)) {
            schedule = function(fn) {
              var div = document.createElement("div");
              var observer = new MutationObserver(fn);
              observer.observe(div, {attributes: true});
              return function() {
                div.classList.toggle("foo");
              };
            };
            schedule.isStatic = true;
          } else if (typeof setImmediate !== "undefined") {
            schedule = function(fn) {
              setImmediate(fn);
            };
          } else if (typeof setTimeout !== "undefined") {
            schedule = function(fn) {
              setTimeout(fn, 0);
            };
          } else {
            schedule = noAsyncScheduler;
          }
          module.exports = schedule;
        }, {"./util": 38}],
        32: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(Promise, PromiseArray) {
            var PromiseInspection = Promise.PromiseInspection;
            var util = _dereq_("./util.js");
            function SettledPromiseArray(values) {
              this.constructor$(values);
            }
            util.inherits(SettledPromiseArray, PromiseArray);
            SettledPromiseArray.prototype._promiseResolved = function(index, inspection) {
              this._values[index] = inspection;
              var totalResolved = ++this._totalResolved;
              if (totalResolved >= this._length) {
                this._resolve(this._values);
              }
            };
            SettledPromiseArray.prototype._promiseFulfilled = function(value, index) {
              var ret = new PromiseInspection();
              ret._bitField = 268435456;
              ret._settledValue = value;
              this._promiseResolved(index, ret);
            };
            SettledPromiseArray.prototype._promiseRejected = function(reason, index) {
              var ret = new PromiseInspection();
              ret._bitField = 134217728;
              ret._settledValue = reason;
              this._promiseResolved(index, ret);
            };
            Promise.settle = function(promises) {
              return new SettledPromiseArray(promises).promise();
            };
            Promise.prototype.settle = function() {
              return new SettledPromiseArray(this).promise();
            };
          };
        }, {"./util.js": 38}],
        33: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(Promise, PromiseArray, apiRejection) {
            var util = _dereq_("./util.js");
            var RangeError = _dereq_("./errors.js").RangeError;
            var AggregateError = _dereq_("./errors.js").AggregateError;
            var isArray = util.isArray;
            function SomePromiseArray(values) {
              this.constructor$(values);
              this._howMany = 0;
              this._unwrap = false;
              this._initialized = false;
            }
            util.inherits(SomePromiseArray, PromiseArray);
            SomePromiseArray.prototype._init = function() {
              if (!this._initialized) {
                return;
              }
              if (this._howMany === 0) {
                this._resolve([]);
                return;
              }
              this._init$(undefined, -5);
              var isArrayResolved = isArray(this._values);
              if (!this._isResolved() && isArrayResolved && this._howMany > this._canPossiblyFulfill()) {
                this._reject(this._getRangeError(this.length()));
              }
            };
            SomePromiseArray.prototype.init = function() {
              this._initialized = true;
              this._init();
            };
            SomePromiseArray.prototype.setUnwrap = function() {
              this._unwrap = true;
            };
            SomePromiseArray.prototype.howMany = function() {
              return this._howMany;
            };
            SomePromiseArray.prototype.setHowMany = function(count) {
              this._howMany = count;
            };
            SomePromiseArray.prototype._promiseFulfilled = function(value) {
              this._addFulfilled(value);
              if (this._fulfilled() === this.howMany()) {
                this._values.length = this.howMany();
                if (this.howMany() === 1 && this._unwrap) {
                  this._resolve(this._values[0]);
                } else {
                  this._resolve(this._values);
                }
              }
            };
            SomePromiseArray.prototype._promiseRejected = function(reason) {
              this._addRejected(reason);
              if (this.howMany() > this._canPossiblyFulfill()) {
                var e = new AggregateError();
                for (var i = this.length(); i < this._values.length; ++i) {
                  e.push(this._values[i]);
                }
                this._reject(e);
              }
            };
            SomePromiseArray.prototype._fulfilled = function() {
              return this._totalResolved;
            };
            SomePromiseArray.prototype._rejected = function() {
              return this._values.length - this.length();
            };
            SomePromiseArray.prototype._addRejected = function(reason) {
              this._values.push(reason);
            };
            SomePromiseArray.prototype._addFulfilled = function(value) {
              this._values[this._totalResolved++] = value;
            };
            SomePromiseArray.prototype._canPossiblyFulfill = function() {
              return this.length() - this._rejected();
            };
            SomePromiseArray.prototype._getRangeError = function(count) {
              var message = "Input array must contain at least " + this._howMany + " items but contains only " + count + " items";
              return new RangeError(message);
            };
            SomePromiseArray.prototype._resolveEmptyArray = function() {
              this._reject(this._getRangeError(0));
            };
            function some(promises, howMany) {
              if ((howMany | 0) !== howMany || howMany < 0) {
                return apiRejection("expecting a positive integer\u000a\u000a    See http://goo.gl/1wAmHx\u000a");
              }
              var ret = new SomePromiseArray(promises);
              var promise = ret.promise();
              ret.setHowMany(howMany);
              ret.init();
              return promise;
            }
            Promise.some = function(promises, howMany) {
              return some(promises, howMany);
            };
            Promise.prototype.some = function(howMany) {
              return some(this, howMany);
            };
            Promise._SomePromiseArray = SomePromiseArray;
          };
        }, {
          "./errors.js": 13,
          "./util.js": 38
        }],
        34: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(Promise) {
            function PromiseInspection(promise) {
              if (promise !== undefined) {
                promise = promise._target();
                this._bitField = promise._bitField;
                this._settledValue = promise._settledValue;
              } else {
                this._bitField = 0;
                this._settledValue = undefined;
              }
            }
            PromiseInspection.prototype.value = function() {
              if (!this.isFulfilled()) {
                throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/hc1DLj\u000a");
              }
              return this._settledValue;
            };
            PromiseInspection.prototype.error = PromiseInspection.prototype.reason = function() {
              if (!this.isRejected()) {
                throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/hPuiwB\u000a");
              }
              return this._settledValue;
            };
            PromiseInspection.prototype.isFulfilled = Promise.prototype._isFulfilled = function() {
              return (this._bitField & 268435456) > 0;
            };
            PromiseInspection.prototype.isRejected = Promise.prototype._isRejected = function() {
              return (this._bitField & 134217728) > 0;
            };
            PromiseInspection.prototype.isPending = Promise.prototype._isPending = function() {
              return (this._bitField & 402653184) === 0;
            };
            PromiseInspection.prototype.isResolved = Promise.prototype._isResolved = function() {
              return (this._bitField & 402653184) > 0;
            };
            Promise.prototype.isPending = function() {
              return this._target()._isPending();
            };
            Promise.prototype.isRejected = function() {
              return this._target()._isRejected();
            };
            Promise.prototype.isFulfilled = function() {
              return this._target()._isFulfilled();
            };
            Promise.prototype.isResolved = function() {
              return this._target()._isResolved();
            };
            Promise.prototype._value = function() {
              return this._settledValue;
            };
            Promise.prototype._reason = function() {
              this._unsetRejectionIsUnhandled();
              return this._settledValue;
            };
            Promise.prototype.value = function() {
              var target = this._target();
              if (!target.isFulfilled()) {
                throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/hc1DLj\u000a");
              }
              return target._settledValue;
            };
            Promise.prototype.reason = function() {
              var target = this._target();
              if (!target.isRejected()) {
                throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/hPuiwB\u000a");
              }
              target._unsetRejectionIsUnhandled();
              return target._settledValue;
            };
            Promise.PromiseInspection = PromiseInspection;
          };
        }, {}],
        35: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(Promise, INTERNAL) {
            var util = _dereq_("./util.js");
            var errorObj = util.errorObj;
            var isObject = util.isObject;
            function tryConvertToPromise(obj, context) {
              if (isObject(obj)) {
                if (obj instanceof Promise) {
                  return obj;
                } else if (isAnyBluebirdPromise(obj)) {
                  var ret = new Promise(INTERNAL);
                  obj._then(ret._fulfillUnchecked, ret._rejectUncheckedCheckError, ret._progressUnchecked, ret, null);
                  return ret;
                }
                var then = util.tryCatch(getThen)(obj);
                if (then === errorObj) {
                  if (context)
                    context._pushContext();
                  var ret = Promise.reject(then.e);
                  if (context)
                    context._popContext();
                  return ret;
                } else if (typeof then === "function") {
                  return doThenable(obj, then, context);
                }
              }
              return obj;
            }
            function getThen(obj) {
              return obj.then;
            }
            var hasProp = {}.hasOwnProperty;
            function isAnyBluebirdPromise(obj) {
              return hasProp.call(obj, "_promise0");
            }
            function doThenable(x, then, context) {
              var promise = new Promise(INTERNAL);
              var ret = promise;
              if (context)
                context._pushContext();
              promise._captureStackTrace();
              if (context)
                context._popContext();
              var synchronous = true;
              var result = util.tryCatch(then).call(x, resolveFromThenable, rejectFromThenable, progressFromThenable);
              synchronous = false;
              if (promise && result === errorObj) {
                promise._rejectCallback(result.e, true, true);
                promise = null;
              }
              function resolveFromThenable(value) {
                if (!promise)
                  return;
                promise._resolveCallback(value);
                promise = null;
              }
              function rejectFromThenable(reason) {
                if (!promise)
                  return;
                promise._rejectCallback(reason, synchronous, true);
                promise = null;
              }
              function progressFromThenable(value) {
                if (!promise)
                  return;
                if (typeof promise._progress === "function") {
                  promise._progress(value);
                }
              }
              return ret;
            }
            return tryConvertToPromise;
          };
        }, {"./util.js": 38}],
        36: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(Promise, INTERNAL) {
            var util = _dereq_("./util.js");
            var TimeoutError = Promise.TimeoutError;
            var afterTimeout = function(promise, message) {
              if (!promise.isPending())
                return;
              if (typeof message !== "string") {
                message = "operation timed out";
              }
              var err = new TimeoutError(message);
              util.markAsOriginatingFromRejection(err);
              promise._attachExtraTrace(err);
              promise._cancel(err);
            };
            var afterValue = function(value) {
              return delay(+this).thenReturn(value);
            };
            var delay = Promise.delay = function(value, ms) {
              if (ms === undefined) {
                ms = value;
                value = undefined;
                var ret = new Promise(INTERNAL);
                setTimeout(function() {
                  ret._fulfill();
                }, ms);
                return ret;
              }
              ms = +ms;
              return Promise.resolve(value)._then(afterValue, null, null, ms, undefined);
            };
            Promise.prototype.delay = function(ms) {
              return delay(this, ms);
            };
            function successClear(value) {
              var handle = this;
              if (handle instanceof Number)
                handle = +handle;
              clearTimeout(handle);
              return value;
            }
            function failureClear(reason) {
              var handle = this;
              if (handle instanceof Number)
                handle = +handle;
              clearTimeout(handle);
              throw reason;
            }
            Promise.prototype.timeout = function(ms, message) {
              ms = +ms;
              var ret = this.then().cancellable();
              ret._cancellationParent = this;
              var handle = setTimeout(function timeoutTimeout() {
                afterTimeout(ret, message);
              }, ms);
              return ret._then(successClear, failureClear, undefined, handle, undefined);
            };
          };
        }, {"./util.js": 38}],
        37: [function(_dereq_, module, exports) {
          "use strict";
          module.exports = function(Promise, apiRejection, tryConvertToPromise, createContext) {
            var TypeError = _dereq_("./errors.js").TypeError;
            var inherits = _dereq_("./util.js").inherits;
            var PromiseInspection = Promise.PromiseInspection;
            function inspectionMapper(inspections) {
              var len = inspections.length;
              for (var i = 0; i < len; ++i) {
                var inspection = inspections[i];
                if (inspection.isRejected()) {
                  return Promise.reject(inspection.error());
                }
                inspections[i] = inspection._settledValue;
              }
              return inspections;
            }
            function thrower(e) {
              setTimeout(function() {
                throw e;
              }, 0);
            }
            function castPreservingDisposable(thenable) {
              var maybePromise = tryConvertToPromise(thenable);
              if (maybePromise !== thenable && typeof thenable._isDisposable === "function" && typeof thenable._getDisposer === "function" && thenable._isDisposable()) {
                maybePromise._setDisposable(thenable._getDisposer());
              }
              return maybePromise;
            }
            function dispose(resources, inspection) {
              var i = 0;
              var len = resources.length;
              var ret = Promise.defer();
              function iterator() {
                if (i >= len)
                  return ret.resolve();
                var maybePromise = castPreservingDisposable(resources[i++]);
                if (maybePromise instanceof Promise && maybePromise._isDisposable()) {
                  try {
                    maybePromise = tryConvertToPromise(maybePromise._getDisposer().tryDispose(inspection), resources.promise);
                  } catch (e) {
                    return thrower(e);
                  }
                  if (maybePromise instanceof Promise) {
                    return maybePromise._then(iterator, thrower, null, null, null);
                  }
                }
                iterator();
              }
              iterator();
              return ret.promise;
            }
            function disposerSuccess(value) {
              var inspection = new PromiseInspection();
              inspection._settledValue = value;
              inspection._bitField = 268435456;
              return dispose(this, inspection).thenReturn(value);
            }
            function disposerFail(reason) {
              var inspection = new PromiseInspection();
              inspection._settledValue = reason;
              inspection._bitField = 134217728;
              return dispose(this, inspection).thenThrow(reason);
            }
            function Disposer(data, promise, context) {
              this._data = data;
              this._promise = promise;
              this._context = context;
            }
            Disposer.prototype.data = function() {
              return this._data;
            };
            Disposer.prototype.promise = function() {
              return this._promise;
            };
            Disposer.prototype.resource = function() {
              if (this.promise().isFulfilled()) {
                return this.promise().value();
              }
              return null;
            };
            Disposer.prototype.tryDispose = function(inspection) {
              var resource = this.resource();
              var context = this._context;
              if (context !== undefined)
                context._pushContext();
              var ret = resource !== null ? this.doDispose(resource, inspection) : null;
              if (context !== undefined)
                context._popContext();
              this._promise._unsetDisposable();
              this._data = null;
              return ret;
            };
            Disposer.isDisposer = function(d) {
              return (d != null && typeof d.resource === "function" && typeof d.tryDispose === "function");
            };
            function FunctionDisposer(fn, promise, context) {
              this.constructor$(fn, promise, context);
            }
            inherits(FunctionDisposer, Disposer);
            FunctionDisposer.prototype.doDispose = function(resource, inspection) {
              var fn = this.data();
              return fn.call(resource, resource, inspection);
            };
            function maybeUnwrapDisposer(value) {
              if (Disposer.isDisposer(value)) {
                this.resources[this.index]._setDisposable(value);
                return value.promise();
              }
              return value;
            }
            Promise.using = function() {
              var len = arguments.length;
              if (len < 2)
                return apiRejection("you must pass at least 2 arguments to Promise.using");
              var fn = arguments[len - 1];
              if (typeof fn !== "function")
                return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
              var input;
              var spreadArgs = true;
              if (len === 2 && Array.isArray(arguments[0])) {
                input = arguments[0];
                len = input.length;
                spreadArgs = false;
              } else {
                input = arguments;
                len--;
              }
              var resources = new Array(len);
              for (var i = 0; i < len; ++i) {
                var resource = input[i];
                if (Disposer.isDisposer(resource)) {
                  var disposer = resource;
                  resource = resource.promise();
                  resource._setDisposable(disposer);
                } else {
                  var maybePromise = tryConvertToPromise(resource);
                  if (maybePromise instanceof Promise) {
                    resource = maybePromise._then(maybeUnwrapDisposer, null, null, {
                      resources: resources,
                      index: i
                    }, undefined);
                  }
                }
                resources[i] = resource;
              }
              var promise = Promise.settle(resources).then(inspectionMapper).then(function(vals) {
                promise._pushContext();
                var ret;
                try {
                  ret = spreadArgs ? fn.apply(undefined, vals) : fn.call(undefined, vals);
                } finally {
                  promise._popContext();
                }
                return ret;
              })._then(disposerSuccess, disposerFail, undefined, resources, undefined);
              resources.promise = promise;
              return promise;
            };
            Promise.prototype._setDisposable = function(disposer) {
              this._bitField = this._bitField | 262144;
              this._disposer = disposer;
            };
            Promise.prototype._isDisposable = function() {
              return (this._bitField & 262144) > 0;
            };
            Promise.prototype._getDisposer = function() {
              return this._disposer;
            };
            Promise.prototype._unsetDisposable = function() {
              this._bitField = this._bitField & (~262144);
              this._disposer = undefined;
            };
            Promise.prototype.disposer = function(fn) {
              if (typeof fn === "function") {
                return new FunctionDisposer(fn, this, createContext());
              }
              throw new TypeError();
            };
          };
        }, {
          "./errors.js": 13,
          "./util.js": 38
        }],
        38: [function(_dereq_, module, exports) {
          "use strict";
          var es5 = _dereq_("./es5.js");
          var canEvaluate = typeof navigator == "undefined";
          var haveGetters = (function() {
            try {
              var o = {};
              es5.defineProperty(o, "f", {get: function() {
                  return 3;
                }});
              return o.f === 3;
            } catch (e) {
              return false;
            }
          })();
          var errorObj = {e: {}};
          var tryCatchTarget;
          function tryCatcher() {
            try {
              var target = tryCatchTarget;
              tryCatchTarget = null;
              return target.apply(this, arguments);
            } catch (e) {
              errorObj.e = e;
              return errorObj;
            }
          }
          function tryCatch(fn) {
            tryCatchTarget = fn;
            return tryCatcher;
          }
          var inherits = function(Child, Parent) {
            var hasProp = {}.hasOwnProperty;
            function T() {
              this.constructor = Child;
              this.constructor$ = Parent;
              for (var propertyName in Parent.prototype) {
                if (hasProp.call(Parent.prototype, propertyName) && propertyName.charAt(propertyName.length - 1) !== "$") {
                  this[propertyName + "$"] = Parent.prototype[propertyName];
                }
              }
            }
            T.prototype = Parent.prototype;
            Child.prototype = new T();
            return Child.prototype;
          };
          function isPrimitive(val) {
            return val == null || val === true || val === false || typeof val === "string" || typeof val === "number";
          }
          function isObject(value) {
            return !isPrimitive(value);
          }
          function maybeWrapAsError(maybeError) {
            if (!isPrimitive(maybeError))
              return maybeError;
            return new Error(safeToString(maybeError));
          }
          function withAppended(target, appendee) {
            var len = target.length;
            var ret = new Array(len + 1);
            var i;
            for (i = 0; i < len; ++i) {
              ret[i] = target[i];
            }
            ret[i] = appendee;
            return ret;
          }
          function getDataPropertyOrDefault(obj, key, defaultValue) {
            if (es5.isES5) {
              var desc = Object.getOwnPropertyDescriptor(obj, key);
              if (desc != null) {
                return desc.get == null && desc.set == null ? desc.value : defaultValue;
              }
            } else {
              return {}.hasOwnProperty.call(obj, key) ? obj[key] : undefined;
            }
          }
          function notEnumerableProp(obj, name, value) {
            if (isPrimitive(obj))
              return obj;
            var descriptor = {
              value: value,
              configurable: true,
              enumerable: false,
              writable: true
            };
            es5.defineProperty(obj, name, descriptor);
            return obj;
          }
          function thrower(r) {
            throw r;
          }
          var inheritedDataKeys = (function() {
            var excludedPrototypes = [Array.prototype, Object.prototype, Function.prototype];
            var isExcludedProto = function(val) {
              for (var i = 0; i < excludedPrototypes.length; ++i) {
                if (excludedPrototypes[i] === val) {
                  return true;
                }
              }
              return false;
            };
            if (es5.isES5) {
              var getKeys = Object.getOwnPropertyNames;
              return function(obj) {
                var ret = [];
                var visitedKeys = Object.create(null);
                while (obj != null && !isExcludedProto(obj)) {
                  var keys;
                  try {
                    keys = getKeys(obj);
                  } catch (e) {
                    return ret;
                  }
                  for (var i = 0; i < keys.length; ++i) {
                    var key = keys[i];
                    if (visitedKeys[key])
                      continue;
                    visitedKeys[key] = true;
                    var desc = Object.getOwnPropertyDescriptor(obj, key);
                    if (desc != null && desc.get == null && desc.set == null) {
                      ret.push(key);
                    }
                  }
                  obj = es5.getPrototypeOf(obj);
                }
                return ret;
              };
            } else {
              var hasProp = {}.hasOwnProperty;
              return function(obj) {
                if (isExcludedProto(obj))
                  return [];
                var ret = [];
                enumeration: for (var key in obj) {
                  if (hasProp.call(obj, key)) {
                    ret.push(key);
                  } else {
                    for (var i = 0; i < excludedPrototypes.length; ++i) {
                      if (hasProp.call(excludedPrototypes[i], key)) {
                        continue enumeration;
                      }
                    }
                    ret.push(key);
                  }
                }
                return ret;
              };
            }
          })();
          var thisAssignmentPattern = /this\s*\.\s*\S+\s*=/;
          function isClass(fn) {
            try {
              if (typeof fn === "function") {
                var keys = es5.names(fn.prototype);
                var hasMethods = es5.isES5 && keys.length > 1;
                var hasMethodsOtherThanConstructor = keys.length > 0 && !(keys.length === 1 && keys[0] === "constructor");
                var hasThisAssignmentAndStaticMethods = thisAssignmentPattern.test(fn + "") && es5.names(fn).length > 0;
                if (hasMethods || hasMethodsOtherThanConstructor || hasThisAssignmentAndStaticMethods) {
                  return true;
                }
              }
              return false;
            } catch (e) {
              return false;
            }
          }
          function toFastProperties(obj) {
            function f() {}
            f.prototype = obj;
            var l = 8;
            while (l--)
              new f();
            return obj;
            eval(obj);
          }
          var rident = /^[a-z$_][a-z$_0-9]*$/i;
          function isIdentifier(str) {
            return rident.test(str);
          }
          function filledRange(count, prefix, suffix) {
            var ret = new Array(count);
            for (var i = 0; i < count; ++i) {
              ret[i] = prefix + i + suffix;
            }
            return ret;
          }
          function safeToString(obj) {
            try {
              return obj + "";
            } catch (e) {
              return "[no string representation]";
            }
          }
          function markAsOriginatingFromRejection(e) {
            try {
              notEnumerableProp(e, "isOperational", true);
            } catch (ignore) {}
          }
          function originatesFromRejection(e) {
            if (e == null)
              return false;
            return ((e instanceof Error["__BluebirdErrorTypes__"].OperationalError) || e["isOperational"] === true);
          }
          function canAttachTrace(obj) {
            return obj instanceof Error && es5.propertyIsWritable(obj, "stack");
          }
          var ensureErrorObject = (function() {
            if (!("stack" in new Error())) {
              return function(value) {
                if (canAttachTrace(value))
                  return value;
                try {
                  throw new Error(safeToString(value));
                } catch (err) {
                  return err;
                }
              };
            } else {
              return function(value) {
                if (canAttachTrace(value))
                  return value;
                return new Error(safeToString(value));
              };
            }
          })();
          function classString(obj) {
            return {}.toString.call(obj);
          }
          function copyDescriptors(from, to, filter) {
            var keys = es5.names(from);
            for (var i = 0; i < keys.length; ++i) {
              var key = keys[i];
              if (filter(key)) {
                try {
                  es5.defineProperty(to, key, es5.getDescriptor(from, key));
                } catch (ignore) {}
              }
            }
          }
          var ret = {
            isClass: isClass,
            isIdentifier: isIdentifier,
            inheritedDataKeys: inheritedDataKeys,
            getDataPropertyOrDefault: getDataPropertyOrDefault,
            thrower: thrower,
            isArray: es5.isArray,
            haveGetters: haveGetters,
            notEnumerableProp: notEnumerableProp,
            isPrimitive: isPrimitive,
            isObject: isObject,
            canEvaluate: canEvaluate,
            errorObj: errorObj,
            tryCatch: tryCatch,
            inherits: inherits,
            withAppended: withAppended,
            maybeWrapAsError: maybeWrapAsError,
            toFastProperties: toFastProperties,
            filledRange: filledRange,
            toString: safeToString,
            canAttachTrace: canAttachTrace,
            ensureErrorObject: ensureErrorObject,
            originatesFromRejection: originatesFromRejection,
            markAsOriginatingFromRejection: markAsOriginatingFromRejection,
            classString: classString,
            copyDescriptors: copyDescriptors,
            hasDevTools: typeof chrome !== "undefined" && chrome && typeof chrome.loadTimes === "function",
            isNode: typeof process !== "undefined" && classString(process).toLowerCase() === "[object process]"
          };
          ret.isRecentNode = ret.isNode && (function() {
            var version = process.versions.node.split(".").map(Number);
            return (version[0] === 0 && version[1] > 10) || (version[0] > 0);
          })();
          if (ret.isNode)
            ret.toFastProperties(process);
          try {
            throw new Error();
          } catch (e) {
            ret.lastLineError = e;
          }
          module.exports = ret;
        }, {"./es5.js": 14}]
      }, {}, [4])(4);
    });
    ;
    if (typeof window !== 'undefined' && window !== null) {
      window.P = window.Promise;
    } else if (typeof self !== 'undefined' && self !== null) {
      self.P = self.Promise;
    }
  })(require("3f"));
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("59", ["58"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("58");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("5a", ["59"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  try {
    module.exports = require("59");
  } catch (_) {
    module.exports = global.Promise;
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("5b", ["5a", "3f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    module.exports = require("5a");
    if (!module.exports) {
      console.error('The file "%s" requires `Promise`,', module.parent.filename);
      console.error('but neither `bluebird` nor the native `Promise` implementation were found.');
      console.error('Please install `bluebird` yourself.');
      process.exit(1);
    }
  })(require("3f"));
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("5c", ["5b"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("5b");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("5d", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var slice = Array.prototype.slice;
  module.exports = co['default'] = co.co = co;
  co.wrap = function(fn) {
    createPromise.__generatorFunction__ = fn;
    return createPromise;
    function createPromise() {
      return co.call(this, fn.apply(this, arguments));
    }
  };
  function co(gen) {
    var ctx = this;
    var args = slice.call(arguments, 1);
    return new Promise(function(resolve, reject) {
      if (typeof gen === 'function')
        gen = gen.apply(ctx, args);
      if (!gen || typeof gen.next !== 'function')
        return resolve(gen);
      onFulfilled();
      function onFulfilled(res) {
        var ret;
        try {
          ret = gen.next(res);
        } catch (e) {
          return reject(e);
        }
        next(ret);
      }
      function onRejected(err) {
        var ret;
        try {
          ret = gen.throw(err);
        } catch (e) {
          return reject(e);
        }
        next(ret);
      }
      function next(ret) {
        if (ret.done)
          return resolve(ret.value);
        var value = toPromise.call(ctx, ret.value);
        if (value && isPromise(value))
          return value.then(onFulfilled, onRejected);
        return onRejected(new TypeError('You may only yield a function, promise, generator, array, or object, ' + 'but the following object was passed: "' + String(ret.value) + '"'));
      }
    });
  }
  function toPromise(obj) {
    if (!obj)
      return obj;
    if (isPromise(obj))
      return obj;
    if (isGeneratorFunction(obj) || isGenerator(obj))
      return co.call(this, obj);
    if ('function' == typeof obj)
      return thunkToPromise.call(this, obj);
    if (Array.isArray(obj))
      return arrayToPromise.call(this, obj);
    if (isObject(obj))
      return objectToPromise.call(this, obj);
    return obj;
  }
  function thunkToPromise(fn) {
    var ctx = this;
    return new Promise(function(resolve, reject) {
      fn.call(ctx, function(err, res) {
        if (err)
          return reject(err);
        if (arguments.length > 2)
          res = slice.call(arguments, 1);
        resolve(res);
      });
    });
  }
  function arrayToPromise(obj) {
    return Promise.all(obj.map(toPromise, this));
  }
  function objectToPromise(obj) {
    var results = new obj.constructor();
    var keys = Object.keys(obj);
    var promises = [];
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var promise = toPromise.call(this, obj[key]);
      if (promise && isPromise(promise))
        defer(promise, key);
      else
        results[key] = obj[key];
    }
    return Promise.all(promises).then(function() {
      return results;
    });
    function defer(promise, key) {
      results[key] = undefined;
      promises.push(promise.then(function(res) {
        results[key] = res;
      }));
    }
  }
  function isPromise(obj) {
    return 'function' == typeof obj.then;
  }
  function isGenerator(obj) {
    return 'function' == typeof obj.next && 'function' == typeof obj.throw;
  }
  function isGeneratorFunction(obj) {
    var constructor = obj.constructor;
    if (!constructor)
      return false;
    if ('GeneratorFunction' === constructor.name || 'GeneratorFunction' === constructor.displayName)
      return true;
    return isGenerator(constructor.prototype);
  }
  function isObject(val) {
    return Object == val.constructor;
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("5e", ["5d"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("5d");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("5f", ["5c", "5e"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var Promise = require("5c");
  var co = require("5e");
  module.exports = compose;
  compose.Wrap = Wrap;
  function compose(middleware) {
    return function(next) {
      next = next || new Wrap(noop);
      var i = middleware.length;
      while (i--)
        next = new Wrap(middleware[i], this, next);
      return next;
    };
  }
  function Wrap(fn, ctx, next) {
    if (typeof fn !== 'function')
      throw TypeError('Not a function!');
    this._fn = fn;
    this._ctx = ctx;
    this._next = next;
    this._called = false;
    this._value = undefined;
    this._promise = undefined;
    this._generator = undefined;
  }
  Wrap.prototype._getValue = function() {
    if (!this._called) {
      this._called = true;
      try {
        this._value = this._fn.call(this._ctx, this._next);
      } catch (e) {
        this._value = Promise.reject(e);
      }
    }
    return this._value;
  };
  Wrap.prototype._getPromise = function() {
    if (this._promise === undefined) {
      var value = this._getValue();
      this._promise = isGenerator(value) ? co.call(this._ctx, value) : Promise.resolve(value);
    }
    return this._promise;
  };
  Wrap.prototype._getGenerator = function() {
    if (this._generator === undefined) {
      var value = this._getValue();
      this._generator = isGenerator(value) ? value : promiseToGenerator.call(this._ctx, value);
    }
    return this._generator;
  };
  if (typeof Symbol !== 'undefined') {
    Wrap.prototype[Symbol.iterator] = function() {
      return this._getGenerator();
    };
  }
  var loggedDeprecationMessage = false;
  function* promiseToGenerator(promise) {
    if (!loggedDeprecationMessage) {
      console.error('A promise was converted into a generator, which is an anti-pattern. Please avoid using `yield* next`!');
      loggedDeprecationMessage = true;
    }
    return yield Promise.resolve(promise);
  }
  Wrap.prototype.then = function(resolve, reject) {
    return this._getPromise().then(resolve, reject);
  };
  Wrap.prototype.catch = function(reject) {
    return this._getPromise().catch(reject);
  };
  Wrap.prototype.next = function(val) {
    return this._getGenerator().next(val);
  };
  Wrap.prototype.throw = function(err) {
    return this._getGenerator().throw(err);
  };
  function isGenerator(obj) {
    return obj && typeof obj.next === 'function' && typeof obj.throw === 'function';
  }
  function noop() {}
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("60", ["5f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("5f");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("61", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  module.exports = first;
  function first(stuff, done) {
    if (!Array.isArray(stuff))
      throw new TypeError('arg must be an array of [ee, events...] arrays');
    var cleanups = [];
    for (var i = 0; i < stuff.length; i++) {
      var arr = stuff[i];
      if (!Array.isArray(arr) || arr.length < 2)
        throw new TypeError('each array member must be [ee, events...]');
      var ee = arr[0];
      for (var j = 1; j < arr.length; j++) {
        var event = arr[j];
        var fn = listener(event, callback);
        ee.on(event, fn);
        cleanups.push({
          ee: ee,
          event: event,
          fn: fn
        });
      }
    }
    function callback() {
      cleanup();
      done.apply(null, arguments);
    }
    function cleanup() {
      var x;
      for (var i = 0; i < cleanups.length; i++) {
        x = cleanups[i];
        x.ee.removeListener(x.event, x.fn);
      }
    }
    function thunk(fn) {
      done = fn;
    }
    thunk.cancel = cleanup;
    return thunk;
  }
  function listener(event, done) {
    return function onevent(arg1) {
      var args = new Array(arguments.length);
      var ee = this;
      var err = event === 'error' ? arg1 : null;
      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }
      done(err, ee, event, args);
    };
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("62", ["61"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("61");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("63", ["62", "3f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    module.exports = onFinished;
    module.exports.isFinished = isFinished;
    var first = require("62");
    var defer = typeof setImmediate === 'function' ? setImmediate : function(fn) {
      process.nextTick(fn.bind.apply(fn, arguments));
    };
    function onFinished(msg, listener) {
      if (isFinished(msg) !== false) {
        defer(listener, null, msg);
        return msg;
      }
      attachListener(msg, listener);
      return msg;
    }
    function isFinished(msg) {
      var socket = msg.socket;
      if (typeof msg.finished === 'boolean') {
        return Boolean(msg.finished || (socket && !socket.writable));
      }
      if (typeof msg.complete === 'boolean') {
        return Boolean(msg.upgrade || !socket || !socket.readable || (msg.complete && !msg.readable));
      }
      return undefined;
    }
    function attachFinishedListener(msg, callback) {
      var eeMsg;
      var eeSocket;
      var finished = false;
      function onFinish(error) {
        eeMsg.cancel();
        eeSocket.cancel();
        finished = true;
        callback(error);
      }
      eeMsg = eeSocket = first([[msg, 'end', 'finish']], onFinish);
      function onSocket(socket) {
        msg.removeListener('socket', onSocket);
        if (finished)
          return;
        if (eeMsg !== eeSocket)
          return;
        eeSocket = first([[socket, 'error', 'close']], onFinish);
      }
      if (msg.socket) {
        onSocket(msg.socket);
        return;
      }
      msg.on('socket', onSocket);
      if (msg.socket === undefined) {
        patchAssignSocket(msg, onSocket);
      }
    }
    function attachListener(msg, listener) {
      var attached = msg.__onFinished;
      if (!attached || !attached.queue) {
        attached = msg.__onFinished = createListener(msg);
        attachFinishedListener(msg, attached);
      }
      attached.queue.push(listener);
    }
    function createListener(msg) {
      function listener(err) {
        if (msg.__onFinished === listener)
          msg.__onFinished = null;
        if (!listener.queue)
          return;
        var queue = listener.queue;
        listener.queue = null;
        for (var i = 0; i < queue.length; i++) {
          queue[i](err, msg);
        }
      }
      listener.queue = [];
      return listener;
    }
    function patchAssignSocket(res, callback) {
      var assignSocket = res.assignSocket;
      if (typeof assignSocket !== 'function')
        return;
      res.assignSocket = function _assignSocket(socket) {
        assignSocket.call(this, socket);
        callback(socket);
      };
    }
  })(require("3f"));
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("64", ["63"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("63");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("65", ["3f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    function normalizeArray(parts, allowAboveRoot) {
      var up = 0;
      for (var i = parts.length - 1; i >= 0; i--) {
        var last = parts[i];
        if (last === '.') {
          parts.splice(i, 1);
        } else if (last === '..') {
          parts.splice(i, 1);
          up++;
        } else if (up) {
          parts.splice(i, 1);
          up--;
        }
      }
      if (allowAboveRoot) {
        for (; up--; up) {
          parts.unshift('..');
        }
      }
      return parts;
    }
    var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
    var splitPath = function(filename) {
      return splitPathRe.exec(filename).slice(1);
    };
    exports.resolve = function() {
      var resolvedPath = '',
          resolvedAbsolute = false;
      for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
        var path = (i >= 0) ? arguments[i] : process.cwd();
        if (typeof path !== 'string') {
          throw new TypeError('Arguments to path.resolve must be strings');
        } else if (!path) {
          continue;
        }
        resolvedPath = path + '/' + resolvedPath;
        resolvedAbsolute = path.charAt(0) === '/';
      }
      resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
        return !!p;
      }), !resolvedAbsolute).join('/');
      return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
    };
    exports.normalize = function(path) {
      var isAbsolute = exports.isAbsolute(path),
          trailingSlash = substr(path, -1) === '/';
      path = normalizeArray(filter(path.split('/'), function(p) {
        return !!p;
      }), !isAbsolute).join('/');
      if (!path && !isAbsolute) {
        path = '.';
      }
      if (path && trailingSlash) {
        path += '/';
      }
      return (isAbsolute ? '/' : '') + path;
    };
    exports.isAbsolute = function(path) {
      return path.charAt(0) === '/';
    };
    exports.join = function() {
      var paths = Array.prototype.slice.call(arguments, 0);
      return exports.normalize(filter(paths, function(p, index) {
        if (typeof p !== 'string') {
          throw new TypeError('Arguments to path.join must be strings');
        }
        return p;
      }).join('/'));
    };
    exports.relative = function(from, to) {
      from = exports.resolve(from).substr(1);
      to = exports.resolve(to).substr(1);
      function trim(arr) {
        var start = 0;
        for (; start < arr.length; start++) {
          if (arr[start] !== '')
            break;
        }
        var end = arr.length - 1;
        for (; end >= 0; end--) {
          if (arr[end] !== '')
            break;
        }
        if (start > end)
          return [];
        return arr.slice(start, end - start + 1);
      }
      var fromParts = trim(from.split('/'));
      var toParts = trim(to.split('/'));
      var length = Math.min(fromParts.length, toParts.length);
      var samePartsLength = length;
      for (var i = 0; i < length; i++) {
        if (fromParts[i] !== toParts[i]) {
          samePartsLength = i;
          break;
        }
      }
      var outputParts = [];
      for (var i = samePartsLength; i < fromParts.length; i++) {
        outputParts.push('..');
      }
      outputParts = outputParts.concat(toParts.slice(samePartsLength));
      return outputParts.join('/');
    };
    exports.sep = '/';
    exports.delimiter = ':';
    exports.dirname = function(path) {
      var result = splitPath(path),
          root = result[0],
          dir = result[1];
      if (!root && !dir) {
        return '.';
      }
      if (dir) {
        dir = dir.substr(0, dir.length - 1);
      }
      return root + dir;
    };
    exports.basename = function(path, ext) {
      var f = splitPath(path)[2];
      if (ext && f.substr(-1 * ext.length) === ext) {
        f = f.substr(0, f.length - ext.length);
      }
      return f;
    };
    exports.extname = function(path) {
      return splitPath(path)[3];
    };
    function filter(xs, f) {
      if (xs.filter)
        return xs.filter(f);
      var res = [];
      for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs))
          res.push(xs[i]);
      }
      return res;
    }
    var substr = 'ab'.substr(-1) === 'b' ? function(str, start, len) {
      return str.substr(start, len);
    } : function(str, start, len) {
      if (start < 0)
        start = str.length + start;
      return str.substr(start, len);
    };
    ;
  })(require("3f"));
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("66", ["65"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("65");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("67", ["66"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = $__System._nodeRequire ? $__System._nodeRequire('path') : require("66");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("68", ["67"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("67");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("69", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  ;
  (function(exports) {
    'use strict';
    var Arr = (typeof Uint8Array !== 'undefined') ? Uint8Array : Array;
    var PLUS = '+'.charCodeAt(0);
    var SLASH = '/'.charCodeAt(0);
    var NUMBER = '0'.charCodeAt(0);
    var LOWER = 'a'.charCodeAt(0);
    var UPPER = 'A'.charCodeAt(0);
    var PLUS_URL_SAFE = '-'.charCodeAt(0);
    var SLASH_URL_SAFE = '_'.charCodeAt(0);
    function decode(elt) {
      var code = elt.charCodeAt(0);
      if (code === PLUS || code === PLUS_URL_SAFE)
        return 62;
      if (code === SLASH || code === SLASH_URL_SAFE)
        return 63;
      if (code < NUMBER)
        return -1;
      if (code < NUMBER + 10)
        return code - NUMBER + 26 + 26;
      if (code < UPPER + 26)
        return code - UPPER;
      if (code < LOWER + 26)
        return code - LOWER + 26;
    }
    function b64ToByteArray(b64) {
      var i,
          j,
          l,
          tmp,
          placeHolders,
          arr;
      if (b64.length % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4');
      }
      var len = b64.length;
      placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0;
      arr = new Arr(b64.length * 3 / 4 - placeHolders);
      l = placeHolders > 0 ? b64.length - 4 : b64.length;
      var L = 0;
      function push(v) {
        arr[L++] = v;
      }
      for (i = 0, j = 0; i < l; i += 4, j += 3) {
        tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3));
        push((tmp & 0xFF0000) >> 16);
        push((tmp & 0xFF00) >> 8);
        push(tmp & 0xFF);
      }
      if (placeHolders === 2) {
        tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4);
        push(tmp & 0xFF);
      } else if (placeHolders === 1) {
        tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2);
        push((tmp >> 8) & 0xFF);
        push(tmp & 0xFF);
      }
      return arr;
    }
    function uint8ToBase64(uint8) {
      var i,
          extraBytes = uint8.length % 3,
          output = "",
          temp,
          length;
      function encode(num) {
        return lookup.charAt(num);
      }
      function tripletToBase64(num) {
        return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F);
      }
      for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
        temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
        output += tripletToBase64(temp);
      }
      switch (extraBytes) {
        case 1:
          temp = uint8[uint8.length - 1];
          output += encode(temp >> 2);
          output += encode((temp << 4) & 0x3F);
          output += '==';
          break;
        case 2:
          temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1]);
          output += encode(temp >> 10);
          output += encode((temp >> 4) & 0x3F);
          output += encode((temp << 2) & 0x3F);
          output += '=';
          break;
      }
      return output;
    }
    exports.toByteArray = b64ToByteArray;
    exports.fromByteArray = uint8ToBase64;
  }(typeof exports === 'undefined' ? (this.base64js = {}) : exports));
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("6a", ["69"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("69");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("6b", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e,
        m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? (nBytes - 1) : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & ((1 << (-nBits)) - 1);
    s >>= (-nBits);
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
    m = e & ((1 << (-nBits)) - 1);
    e >>= (-nBits);
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity);
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
  };
  exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e,
        m,
        c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
    var i = isLE ? 0 : (nBytes - 1);
    var d = isLE ? 1 : -1;
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }
    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
    e = (e << mLen) | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
    buffer[offset + i - d] |= s * 128;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("6c", ["6b"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("6b");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("6d", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var isArray = Array.isArray;
  var str = Object.prototype.toString;
  module.exports = isArray || function(val) {
    return !!val && '[object Array]' == str.call(val);
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("6e", ["6d"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("6d");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("6f", ["6a", "6c", "6e"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var base64 = require("6a");
  var ieee754 = require("6c");
  var isArray = require("6e");
  exports.Buffer = Buffer;
  exports.SlowBuffer = SlowBuffer;
  exports.INSPECT_MAX_BYTES = 50;
  Buffer.poolSize = 8192;
  var rootParent = {};
  Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : (function() {
    function Bar() {}
    try {
      var arr = new Uint8Array(1);
      arr.foo = function() {
        return 42;
      };
      arr.constructor = Bar;
      return arr.foo() === 42 && arr.constructor === Bar && typeof arr.subarray === 'function' && arr.subarray(1, 1).byteLength === 0;
    } catch (e) {
      return false;
    }
  })();
  function kMaxLength() {
    return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
  }
  function Buffer(arg) {
    if (!(this instanceof Buffer)) {
      if (arguments.length > 1)
        return new Buffer(arg, arguments[1]);
      return new Buffer(arg);
    }
    this.length = 0;
    this.parent = undefined;
    if (typeof arg === 'number') {
      return fromNumber(this, arg);
    }
    if (typeof arg === 'string') {
      return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8');
    }
    return fromObject(this, arg);
  }
  function fromNumber(that, length) {
    that = allocate(that, length < 0 ? 0 : checked(length) | 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < length; i++) {
        that[i] = 0;
      }
    }
    return that;
  }
  function fromString(that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '')
      encoding = 'utf8';
    var length = byteLength(string, encoding) | 0;
    that = allocate(that, length);
    that.write(string, encoding);
    return that;
  }
  function fromObject(that, object) {
    if (Buffer.isBuffer(object))
      return fromBuffer(that, object);
    if (isArray(object))
      return fromArray(that, object);
    if (object == null) {
      throw new TypeError('must start with number, buffer, array or string');
    }
    if (typeof ArrayBuffer !== 'undefined') {
      if (object.buffer instanceof ArrayBuffer) {
        return fromTypedArray(that, object);
      }
      if (object instanceof ArrayBuffer) {
        return fromArrayBuffer(that, object);
      }
    }
    if (object.length)
      return fromArrayLike(that, object);
    return fromJsonObject(that, object);
  }
  function fromBuffer(that, buffer) {
    var length = checked(buffer.length) | 0;
    that = allocate(that, length);
    buffer.copy(that, 0, 0, length);
    return that;
  }
  function fromArray(that, array) {
    var length = checked(array.length) | 0;
    that = allocate(that, length);
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that;
  }
  function fromTypedArray(that, array) {
    var length = checked(array.length) | 0;
    that = allocate(that, length);
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that;
  }
  function fromArrayBuffer(that, array) {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      array.byteLength;
      that = Buffer._augment(new Uint8Array(array));
    } else {
      that = fromTypedArray(that, new Uint8Array(array));
    }
    return that;
  }
  function fromArrayLike(that, array) {
    var length = checked(array.length) | 0;
    that = allocate(that, length);
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that;
  }
  function fromJsonObject(that, object) {
    var array;
    var length = 0;
    if (object.type === 'Buffer' && isArray(object.data)) {
      array = object.data;
      length = checked(array.length) | 0;
    }
    that = allocate(that, length);
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that;
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    Buffer.prototype.__proto__ = Uint8Array.prototype;
    Buffer.__proto__ = Uint8Array;
  }
  function allocate(that, length) {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      that = Buffer._augment(new Uint8Array(length));
      that.__proto__ = Buffer.prototype;
    } else {
      that.length = length;
      that._isBuffer = true;
    }
    var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1;
    if (fromPool)
      that.parent = rootParent;
    return that;
  }
  function checked(length) {
    if (length >= kMaxLength()) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
    }
    return length | 0;
  }
  function SlowBuffer(subject, encoding) {
    if (!(this instanceof SlowBuffer))
      return new SlowBuffer(subject, encoding);
    var buf = new Buffer(subject, encoding);
    delete buf.parent;
    return buf;
  }
  Buffer.isBuffer = function isBuffer(b) {
    return !!(b != null && b._isBuffer);
  };
  Buffer.compare = function compare(a, b) {
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
      throw new TypeError('Arguments must be Buffers');
    }
    if (a === b)
      return 0;
    var x = a.length;
    var y = b.length;
    var i = 0;
    var len = Math.min(x, y);
    while (i < len) {
      if (a[i] !== b[i])
        break;
      ++i;
    }
    if (i !== len) {
      x = a[i];
      y = b[i];
    }
    if (x < y)
      return -1;
    if (y < x)
      return 1;
    return 0;
  };
  Buffer.isEncoding = function isEncoding(encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'binary':
      case 'base64':
      case 'raw':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true;
      default:
        return false;
    }
  };
  Buffer.concat = function concat(list, length) {
    if (!isArray(list))
      throw new TypeError('list argument must be an Array of Buffers.');
    if (list.length === 0) {
      return new Buffer(0);
    }
    var i;
    if (length === undefined) {
      length = 0;
      for (i = 0; i < list.length; i++) {
        length += list[i].length;
      }
    }
    var buf = new Buffer(length);
    var pos = 0;
    for (i = 0; i < list.length; i++) {
      var item = list[i];
      item.copy(buf, pos);
      pos += item.length;
    }
    return buf;
  };
  function byteLength(string, encoding) {
    if (typeof string !== 'string')
      string = '' + string;
    var len = string.length;
    if (len === 0)
      return 0;
    var loweredCase = false;
    for (; ; ) {
      switch (encoding) {
        case 'ascii':
        case 'binary':
        case 'raw':
        case 'raws':
          return len;
        case 'utf8':
        case 'utf-8':
          return utf8ToBytes(string).length;
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2;
        case 'hex':
          return len >>> 1;
        case 'base64':
          return base64ToBytes(string).length;
        default:
          if (loweredCase)
            return utf8ToBytes(string).length;
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer.byteLength = byteLength;
  Buffer.prototype.length = undefined;
  Buffer.prototype.parent = undefined;
  function slowToString(encoding, start, end) {
    var loweredCase = false;
    start = start | 0;
    end = end === undefined || end === Infinity ? this.length : end | 0;
    if (!encoding)
      encoding = 'utf8';
    if (start < 0)
      start = 0;
    if (end > this.length)
      end = this.length;
    if (end <= start)
      return '';
    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end);
        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end);
        case 'ascii':
          return asciiSlice(this, start, end);
        case 'binary':
          return binarySlice(this, start, end);
        case 'base64':
          return base64Slice(this, start, end);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end);
        default:
          if (loweredCase)
            throw new TypeError('Unknown encoding: ' + encoding);
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer.prototype.toString = function toString() {
    var length = this.length | 0;
    if (length === 0)
      return '';
    if (arguments.length === 0)
      return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
  };
  Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b))
      throw new TypeError('Argument must be a Buffer');
    if (this === b)
      return true;
    return Buffer.compare(this, b) === 0;
  };
  Buffer.prototype.inspect = function inspect() {
    var str = '';
    var max = exports.INSPECT_MAX_BYTES;
    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
      if (this.length > max)
        str += ' ... ';
    }
    return '<Buffer ' + str + '>';
  };
  Buffer.prototype.compare = function compare(b) {
    if (!Buffer.isBuffer(b))
      throw new TypeError('Argument must be a Buffer');
    if (this === b)
      return 0;
    return Buffer.compare(this, b);
  };
  Buffer.prototype.indexOf = function indexOf(val, byteOffset) {
    if (byteOffset > 0x7fffffff)
      byteOffset = 0x7fffffff;
    else if (byteOffset < -0x80000000)
      byteOffset = -0x80000000;
    byteOffset >>= 0;
    if (this.length === 0)
      return -1;
    if (byteOffset >= this.length)
      return -1;
    if (byteOffset < 0)
      byteOffset = Math.max(this.length + byteOffset, 0);
    if (typeof val === 'string') {
      if (val.length === 0)
        return -1;
      return String.prototype.indexOf.call(this, val, byteOffset);
    }
    if (Buffer.isBuffer(val)) {
      return arrayIndexOf(this, val, byteOffset);
    }
    if (typeof val === 'number') {
      if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
        return Uint8Array.prototype.indexOf.call(this, val, byteOffset);
      }
      return arrayIndexOf(this, [val], byteOffset);
    }
    function arrayIndexOf(arr, val, byteOffset) {
      var foundIndex = -1;
      for (var i = 0; byteOffset + i < arr.length; i++) {
        if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
          if (foundIndex === -1)
            foundIndex = i;
          if (i - foundIndex + 1 === val.length)
            return byteOffset + foundIndex;
        } else {
          foundIndex = -1;
        }
      }
      return -1;
    }
    throw new TypeError('val must be string, number or Buffer');
  };
  Buffer.prototype.get = function get(offset) {
    console.log('.get() is deprecated. Access using array indexes instead.');
    return this.readUInt8(offset);
  };
  Buffer.prototype.set = function set(v, offset) {
    console.log('.set() is deprecated. Access using array indexes instead.');
    return this.writeUInt8(v, offset);
  };
  function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }
    var strLen = string.length;
    if (strLen % 2 !== 0)
      throw new Error('Invalid hex string');
    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i = 0; i < length; i++) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (isNaN(parsed))
        throw new Error('Invalid hex string');
      buf[offset + i] = parsed;
    }
    return i;
  }
  function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
  }
  function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
  }
  function binaryWrite(buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length);
  }
  function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
  }
  function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
  }
  Buffer.prototype.write = function write(string, offset, length, encoding) {
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0;
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0;
    } else if (isFinite(offset)) {
      offset = offset | 0;
      if (isFinite(length)) {
        length = length | 0;
        if (encoding === undefined)
          encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      }
    } else {
      var swap = encoding;
      encoding = offset;
      offset = length | 0;
      length = swap;
    }
    var remaining = this.length - offset;
    if (length === undefined || length > remaining)
      length = remaining;
    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('attempt to write outside buffer bounds');
    }
    if (!encoding)
      encoding = 'utf8';
    var loweredCase = false;
    for (; ; ) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length);
        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length);
        case 'ascii':
          return asciiWrite(this, string, offset, length);
        case 'binary':
          return binaryWrite(this, string, offset, length);
        case 'base64':
          return base64Write(this, string, offset, length);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length);
        default:
          if (loweredCase)
            throw new TypeError('Unknown encoding: ' + encoding);
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };
  Buffer.prototype.toJSON = function toJSON() {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };
  function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64.fromByteArray(buf);
    } else {
      return base64.fromByteArray(buf.slice(start, end));
    }
  }
  function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = (firstByte > 0xEF) ? 4 : (firstByte > 0xDF) ? 3 : (firstByte > 0xBF) ? 2 : 1;
      if (i + bytesPerSequence <= end) {
        var secondByte,
            thirdByte,
            fourthByte,
            tempCodePoint;
        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }
            break;
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }
        }
      }
      if (codePoint === null) {
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }
      res.push(codePoint);
      i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
  }
  var MAX_ARGUMENTS_LENGTH = 0x1000;
  function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints);
    }
    var res = '';
    var i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    }
    return res;
  }
  function asciiSlice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for (var i = start; i < end; i++) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }
    return ret;
  }
  function binarySlice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for (var i = start; i < end; i++) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret;
  }
  function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0)
      start = 0;
    if (!end || end < 0 || end > len)
      end = len;
    var out = '';
    for (var i = start; i < end; i++) {
      out += toHex(buf[i]);
    }
    return out;
  }
  function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res;
  }
  Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
      start += len;
      if (start < 0)
        start = 0;
    } else if (start > len) {
      start = len;
    }
    if (end < 0) {
      end += len;
      if (end < 0)
        end = 0;
    } else if (end > len) {
      end = len;
    }
    if (end < start)
      end = start;
    var newBuf;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      newBuf = Buffer._augment(this.subarray(start, end));
    } else {
      var sliceLen = end - start;
      newBuf = new Buffer(sliceLen, undefined);
      for (var i = 0; i < sliceLen; i++) {
        newBuf[i] = this[i + start];
      }
    }
    if (newBuf.length)
      newBuf.parent = this.parent || this;
    return newBuf;
  };
  function checkOffset(offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0)
      throw new RangeError('offset is not uint');
    if (offset + ext > length)
      throw new RangeError('Trying to access beyond buffer length');
  }
  Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert)
      checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
    return val;
  };
  Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }
    var val = this[offset + --byteLength];
    var mul = 1;
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }
    return val;
  };
  Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    if (!noAssert)
      checkOffset(offset, 1, this.length);
    return this[offset];
  };
  Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    return this[offset] | (this[offset + 1] << 8);
  };
  Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    return (this[offset] << 8) | this[offset + 1];
  };
  Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return ((this[offset]) | (this[offset + 1] << 8) | (this[offset + 2] << 16)) + (this[offset + 3] * 0x1000000);
  };
  Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return (this[offset] * 0x1000000) + ((this[offset + 1] << 16) | (this[offset + 2] << 8) | this[offset + 3]);
  };
  Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert)
      checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
    mul *= 0x80;
    if (val >= mul)
      val -= Math.pow(2, 8 * byteLength);
    return val;
  };
  Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert)
      checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }
    mul *= 0x80;
    if (val >= mul)
      val -= Math.pow(2, 8 * byteLength);
    return val;
  };
  Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    if (!noAssert)
      checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80))
      return (this[offset]);
    return ((0xff - this[offset] + 1) * -1);
  };
  Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    var val = this[offset] | (this[offset + 1] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val;
  };
  Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | (this[offset] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val;
  };
  Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return (this[offset]) | (this[offset + 1] << 8) | (this[offset + 2] << 16) | (this[offset + 3] << 24);
  };
  Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return (this[offset] << 24) | (this[offset + 1] << 16) | (this[offset + 2] << 8) | (this[offset + 3]);
  };
  Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
  };
  Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
  };
  Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    if (!noAssert)
      checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
  };
  Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    if (!noAssert)
      checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
  };
  function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf))
      throw new TypeError('buffer must be a Buffer instance');
    if (value > max || value < min)
      throw new RangeError('value is out of bounds');
    if (offset + ext > buf.length)
      throw new RangeError('index out of range');
  }
  Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert)
      checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0);
    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }
    return offset + byteLength;
  };
  Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert)
      checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0);
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }
    return offset + byteLength;
  };
  Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert)
      checkInt(this, value, offset, 1, 0xff, 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT)
      value = Math.floor(value);
    this[offset] = value;
    return offset + 1;
  };
  function objectWriteUInt16(buf, value, offset, littleEndian) {
    if (value < 0)
      value = 0xffff + value + 1;
    for (var i = 0,
        j = Math.min(buf.length - offset, 2); i < j; i++) {
      buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>> (littleEndian ? i : 1 - i) * 8;
    }
  }
  Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert)
      checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = value;
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2;
  };
  Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert)
      checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = value;
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2;
  };
  function objectWriteUInt32(buf, value, offset, littleEndian) {
    if (value < 0)
      value = 0xffffffff + value + 1;
    for (var i = 0,
        j = Math.min(buf.length - offset, 4); i < j; i++) {
      buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
    }
  }
  Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert)
      checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset + 3] = (value >>> 24);
      this[offset + 2] = (value >>> 16);
      this[offset + 1] = (value >>> 8);
      this[offset] = value;
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4;
  };
  Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert)
      checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = value;
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4;
  };
  Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);
      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = value < 0 ? 1 : 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
  };
  Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);
      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = value < 0 ? 1 : 0;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
  };
  Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert)
      checkInt(this, value, offset, 1, 0x7f, -0x80);
    if (!Buffer.TYPED_ARRAY_SUPPORT)
      value = Math.floor(value);
    if (value < 0)
      value = 0xff + value + 1;
    this[offset] = value;
    return offset + 1;
  };
  Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert)
      checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = value;
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2;
  };
  Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert)
      checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = value;
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2;
  };
  Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert)
      checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = value;
      this[offset + 1] = (value >>> 8);
      this[offset + 2] = (value >>> 16);
      this[offset + 3] = (value >>> 24);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4;
  };
  Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert)
      checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (value < 0)
      value = 0xffffffff + value + 1;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = value;
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4;
  };
  function checkIEEE754(buf, value, offset, ext, max, min) {
    if (value > max || value < min)
      throw new RangeError('value is out of bounds');
    if (offset + ext > buf.length)
      throw new RangeError('index out of range');
    if (offset < 0)
      throw new RangeError('index out of range');
  }
  function writeFloat(buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
    }
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
  }
  Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
  };
  Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
  };
  function writeDouble(buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
    }
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
  }
  Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
  };
  Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
  };
  Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!start)
      start = 0;
    if (!end && end !== 0)
      end = this.length;
    if (targetStart >= target.length)
      targetStart = target.length;
    if (!targetStart)
      targetStart = 0;
    if (end > 0 && end < start)
      end = start;
    if (end === start)
      return 0;
    if (target.length === 0 || this.length === 0)
      return 0;
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds');
    }
    if (start < 0 || start >= this.length)
      throw new RangeError('sourceStart out of bounds');
    if (end < 0)
      throw new RangeError('sourceEnd out of bounds');
    if (end > this.length)
      end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }
    var len = end - start;
    var i;
    if (this === target && start < targetStart && targetStart < end) {
      for (i = len - 1; i >= 0; i--) {
        target[i + targetStart] = this[i + start];
      }
    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
      for (i = 0; i < len; i++) {
        target[i + targetStart] = this[i + start];
      }
    } else {
      target._set(this.subarray(start, start + len), targetStart);
    }
    return len;
  };
  Buffer.prototype.fill = function fill(value, start, end) {
    if (!value)
      value = 0;
    if (!start)
      start = 0;
    if (!end)
      end = this.length;
    if (end < start)
      throw new RangeError('end < start');
    if (end === start)
      return;
    if (this.length === 0)
      return;
    if (start < 0 || start >= this.length)
      throw new RangeError('start out of bounds');
    if (end < 0 || end > this.length)
      throw new RangeError('end out of bounds');
    var i;
    if (typeof value === 'number') {
      for (i = start; i < end; i++) {
        this[i] = value;
      }
    } else {
      var bytes = utf8ToBytes(value.toString());
      var len = bytes.length;
      for (i = start; i < end; i++) {
        this[i] = bytes[i % len];
      }
    }
    return this;
  };
  Buffer.prototype.toArrayBuffer = function toArrayBuffer() {
    if (typeof Uint8Array !== 'undefined') {
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        return (new Buffer(this)).buffer;
      } else {
        var buf = new Uint8Array(this.length);
        for (var i = 0,
            len = buf.length; i < len; i += 1) {
          buf[i] = this[i];
        }
        return buf.buffer;
      }
    } else {
      throw new TypeError('Buffer.toArrayBuffer not supported in this browser');
    }
  };
  var BP = Buffer.prototype;
  Buffer._augment = function _augment(arr) {
    arr.constructor = Buffer;
    arr._isBuffer = true;
    arr._set = arr.set;
    arr.get = BP.get;
    arr.set = BP.set;
    arr.write = BP.write;
    arr.toString = BP.toString;
    arr.toLocaleString = BP.toString;
    arr.toJSON = BP.toJSON;
    arr.equals = BP.equals;
    arr.compare = BP.compare;
    arr.indexOf = BP.indexOf;
    arr.copy = BP.copy;
    arr.slice = BP.slice;
    arr.readUIntLE = BP.readUIntLE;
    arr.readUIntBE = BP.readUIntBE;
    arr.readUInt8 = BP.readUInt8;
    arr.readUInt16LE = BP.readUInt16LE;
    arr.readUInt16BE = BP.readUInt16BE;
    arr.readUInt32LE = BP.readUInt32LE;
    arr.readUInt32BE = BP.readUInt32BE;
    arr.readIntLE = BP.readIntLE;
    arr.readIntBE = BP.readIntBE;
    arr.readInt8 = BP.readInt8;
    arr.readInt16LE = BP.readInt16LE;
    arr.readInt16BE = BP.readInt16BE;
    arr.readInt32LE = BP.readInt32LE;
    arr.readInt32BE = BP.readInt32BE;
    arr.readFloatLE = BP.readFloatLE;
    arr.readFloatBE = BP.readFloatBE;
    arr.readDoubleLE = BP.readDoubleLE;
    arr.readDoubleBE = BP.readDoubleBE;
    arr.writeUInt8 = BP.writeUInt8;
    arr.writeUIntLE = BP.writeUIntLE;
    arr.writeUIntBE = BP.writeUIntBE;
    arr.writeUInt16LE = BP.writeUInt16LE;
    arr.writeUInt16BE = BP.writeUInt16BE;
    arr.writeUInt32LE = BP.writeUInt32LE;
    arr.writeUInt32BE = BP.writeUInt32BE;
    arr.writeIntLE = BP.writeIntLE;
    arr.writeIntBE = BP.writeIntBE;
    arr.writeInt8 = BP.writeInt8;
    arr.writeInt16LE = BP.writeInt16LE;
    arr.writeInt16BE = BP.writeInt16BE;
    arr.writeInt32LE = BP.writeInt32LE;
    arr.writeInt32BE = BP.writeInt32BE;
    arr.writeFloatLE = BP.writeFloatLE;
    arr.writeFloatBE = BP.writeFloatBE;
    arr.writeDoubleLE = BP.writeDoubleLE;
    arr.writeDoubleBE = BP.writeDoubleBE;
    arr.fill = BP.fill;
    arr.inspect = BP.inspect;
    arr.toArrayBuffer = BP.toArrayBuffer;
    return arr;
  };
  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
  function base64clean(str) {
    str = stringtrim(str).replace(INVALID_BASE64_RE, '');
    if (str.length < 2)
      return '';
    while (str.length % 4 !== 0) {
      str = str + '=';
    }
    return str;
  }
  function stringtrim(str) {
    if (str.trim)
      return str.trim();
    return str.replace(/^\s+|\s+$/g, '');
  }
  function toHex(n) {
    if (n < 16)
      return '0' + n.toString(16);
    return n.toString(16);
  }
  function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for (var i = 0; i < length; i++) {
      codePoint = string.charCodeAt(i);
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        if (!leadSurrogate) {
          if (codePoint > 0xDBFF) {
            if ((units -= 3) > -1)
              bytes.push(0xEF, 0xBF, 0xBD);
            continue;
          } else if (i + 1 === length) {
            if ((units -= 3) > -1)
              bytes.push(0xEF, 0xBF, 0xBD);
            continue;
          }
          leadSurrogate = codePoint;
          continue;
        }
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1)
            bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue;
        }
        codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000;
      } else if (leadSurrogate) {
        if ((units -= 3) > -1)
          bytes.push(0xEF, 0xBF, 0xBD);
      }
      leadSurrogate = null;
      if (codePoint < 0x80) {
        if ((units -= 1) < 0)
          break;
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0)
          break;
        bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0)
          break;
        bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0)
          break;
        bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
      } else {
        throw new Error('Invalid code point');
      }
    }
    return bytes;
  }
  function asciiToBytes(str) {
    var byteArray = [];
    for (var i = 0; i < str.length; i++) {
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }
    return byteArray;
  }
  function utf16leToBytes(str, units) {
    var c,
        hi,
        lo;
    var byteArray = [];
    for (var i = 0; i < str.length; i++) {
      if ((units -= 2) < 0)
        break;
      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }
    return byteArray;
  }
  function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
  }
  function blitBuffer(src, dst, offset, length) {
    for (var i = 0; i < length; i++) {
      if ((i + offset >= dst.length) || (i >= src.length))
        break;
      dst[i + offset] = src[i];
    }
    return i;
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("70", ["6f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("6f");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("71", ["70"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = $__System._nodeRequire ? $__System._nodeRequire('buffer') : require("70");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("72", ["71"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("71");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("73", ["68", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    module.exports = contentDisposition;
    module.exports.parse = parse;
    var basename = require("68").basename;
    var encodeUriAttrCharRegExp = /[\x00-\x20"'\(\)*,\/:;<=>?@\[\\\]\{\}\x7f]/g;
    var hexEscapeRegExp = /%[0-9A-Fa-f]{2}/;
    var hexEscapeReplaceRegExp = /%([0-9A-Fa-f]{2})/g;
    var nonLatin1RegExp = /[^\x20-\x7e\xa0-\xff]/g;
    var qescRegExp = /\\([\u0000-\u007f])/g;
    var quoteRegExp = /([\\"])/g;
    var paramRegExp = /; *([!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) *= *("(?:[ !\x23-\x5b\x5d-\x7e\x80-\xff]|\\[\x20-\x7e])*"|[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) */g;
    var textRegExp = /^[\x20-\x7e\x80-\xff]+$/;
    var tokenRegExp = /^[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+$/;
    var extValueRegExp = /^([A-Za-z0-9!#$%&+\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+\-\.^_`|~])+)$/;
    var dispositionTypeRegExp = /^([!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) *(?:$|;)/;
    function contentDisposition(filename, options) {
      var opts = options || {};
      var type = opts.type || 'attachment';
      var params = createparams(filename, opts.fallback);
      return format(new ContentDisposition(type, params));
    }
    function createparams(filename, fallback) {
      if (filename === undefined) {
        return;
      }
      var params = {};
      if (typeof filename !== 'string') {
        throw new TypeError('filename must be a string');
      }
      if (fallback === undefined) {
        fallback = true;
      }
      if (typeof fallback !== 'string' && typeof fallback !== 'boolean') {
        throw new TypeError('fallback must be a string or boolean');
      }
      if (typeof fallback === 'string' && nonLatin1RegExp.test(fallback)) {
        throw new TypeError('fallback must be ISO-8859-1 string');
      }
      var name = basename(filename);
      var isQuotedString = textRegExp.test(name);
      var fallbackName = typeof fallback !== 'string' ? fallback && getlatin1(name) : basename(fallback);
      var hasFallback = typeof fallbackName === 'string' && fallbackName !== name;
      if (hasFallback || !isQuotedString || hexEscapeRegExp.test(name)) {
        params['filename*'] = name;
      }
      if (isQuotedString || hasFallback) {
        params.filename = hasFallback ? fallbackName : name;
      }
      return params;
    }
    function format(obj) {
      var parameters = obj.parameters;
      var type = obj.type;
      if (!type || typeof type !== 'string' || !tokenRegExp.test(type)) {
        throw new TypeError('invalid type');
      }
      var string = String(type).toLowerCase();
      if (parameters && typeof parameters === 'object') {
        var param;
        var params = Object.keys(parameters).sort();
        for (var i = 0; i < params.length; i++) {
          param = params[i];
          var val = param.substr(-1) === '*' ? ustring(parameters[param]) : qstring(parameters[param]);
          string += '; ' + param + '=' + val;
        }
      }
      return string;
    }
    function decodefield(str) {
      var match = extValueRegExp.exec(str);
      if (!match) {
        throw new TypeError('invalid extended field value');
      }
      var charset = match[1].toLowerCase();
      var encoded = match[2];
      var value;
      var binary = encoded.replace(hexEscapeReplaceRegExp, pdecode);
      switch (charset) {
        case 'iso-8859-1':
          value = getlatin1(binary);
          break;
        case 'utf-8':
          value = new Buffer(binary, 'binary').toString('utf8');
          break;
        default:
          throw new TypeError('unsupported charset in extended field');
      }
      return value;
    }
    function getlatin1(val) {
      return String(val).replace(nonLatin1RegExp, '?');
    }
    function parse(string) {
      if (!string || typeof string !== 'string') {
        throw new TypeError('argument string is required');
      }
      var match = dispositionTypeRegExp.exec(string);
      if (!match) {
        throw new TypeError('invalid type format');
      }
      var index = match[0].length;
      var type = match[1].toLowerCase();
      var key;
      var names = [];
      var params = {};
      var value;
      index = paramRegExp.lastIndex = match[0].substr(-1) === ';' ? index - 1 : index;
      while (match = paramRegExp.exec(string)) {
        if (match.index !== index) {
          throw new TypeError('invalid parameter format');
        }
        index += match[0].length;
        key = match[1].toLowerCase();
        value = match[2];
        if (names.indexOf(key) !== -1) {
          throw new TypeError('invalid duplicate parameter');
        }
        names.push(key);
        if (key.indexOf('*') + 1 === key.length) {
          key = key.slice(0, -1);
          value = decodefield(value);
          params[key] = value;
          continue;
        }
        if (typeof params[key] === 'string') {
          continue;
        }
        if (value[0] === '"') {
          value = value.substr(1, value.length - 2).replace(qescRegExp, '$1');
        }
        params[key] = value;
      }
      if (index !== -1 && index !== string.length) {
        throw new TypeError('invalid parameter format');
      }
      return new ContentDisposition(type, params);
    }
    function pdecode(str, hex) {
      return String.fromCharCode(parseInt(hex, 16));
    }
    function pencode(char) {
      var hex = String(char).charCodeAt(0).toString(16).toUpperCase();
      return hex.length === 1 ? '%0' + hex : '%' + hex;
    }
    function qstring(val) {
      var str = String(val);
      return '"' + str.replace(quoteRegExp, '\\$1') + '"';
    }
    function ustring(val) {
      var str = String(val);
      var encoded = encodeURIComponent(str).replace(encodeUriAttrCharRegExp, pencode);
      return 'UTF-8\'\'' + encoded;
    }
    function ContentDisposition(type, parameters) {
      this.type = type;
      this.parameters = parameters;
    }
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("74", ["73"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("73");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("75", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  if (typeof Object.create === 'function') {
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }});
    };
  } else {
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function() {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("76", ["75"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("75");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("77", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = Array.isArray || function(arr) {
    return Object.prototype.toString.call(arr) == '[object Array]';
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("78", ["77"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("77");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("79", ["72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    function isArray(ar) {
      return Array.isArray(ar);
    }
    exports.isArray = isArray;
    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }
    exports.isBoolean = isBoolean;
    function isNull(arg) {
      return arg === null;
    }
    exports.isNull = isNull;
    function isNullOrUndefined(arg) {
      return arg == null;
    }
    exports.isNullOrUndefined = isNullOrUndefined;
    function isNumber(arg) {
      return typeof arg === 'number';
    }
    exports.isNumber = isNumber;
    function isString(arg) {
      return typeof arg === 'string';
    }
    exports.isString = isString;
    function isSymbol(arg) {
      return typeof arg === 'symbol';
    }
    exports.isSymbol = isSymbol;
    function isUndefined(arg) {
      return arg === void 0;
    }
    exports.isUndefined = isUndefined;
    function isRegExp(re) {
      return isObject(re) && objectToString(re) === '[object RegExp]';
    }
    exports.isRegExp = isRegExp;
    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }
    exports.isObject = isObject;
    function isDate(d) {
      return isObject(d) && objectToString(d) === '[object Date]';
    }
    exports.isDate = isDate;
    function isError(e) {
      return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
    }
    exports.isError = isError;
    function isFunction(arg) {
      return typeof arg === 'function';
    }
    exports.isFunction = isFunction;
    function isPrimitive(arg) {
      return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || typeof arg === 'undefined';
    }
    exports.isPrimitive = isPrimitive;
    function isBuffer(arg) {
      return Buffer.isBuffer(arg);
    }
    exports.isBuffer = isBuffer;
    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("7a", ["79"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("79");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("7b", ["72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var Buffer = require("72").Buffer;
    var isBufferEncoding = Buffer.isEncoding || function(encoding) {
      switch (encoding && encoding.toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
        case 'raw':
          return true;
        default:
          return false;
      }
    };
    function assertEncoding(encoding) {
      if (encoding && !isBufferEncoding(encoding)) {
        throw new Error('Unknown encoding: ' + encoding);
      }
    }
    var StringDecoder = exports.StringDecoder = function(encoding) {
      this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
      assertEncoding(encoding);
      switch (this.encoding) {
        case 'utf8':
          this.surrogateSize = 3;
          break;
        case 'ucs2':
        case 'utf16le':
          this.surrogateSize = 2;
          this.detectIncompleteChar = utf16DetectIncompleteChar;
          break;
        case 'base64':
          this.surrogateSize = 3;
          this.detectIncompleteChar = base64DetectIncompleteChar;
          break;
        default:
          this.write = passThroughWrite;
          return;
      }
      this.charBuffer = new Buffer(6);
      this.charReceived = 0;
      this.charLength = 0;
    };
    StringDecoder.prototype.write = function(buffer) {
      var charStr = '';
      while (this.charLength) {
        var available = (buffer.length >= this.charLength - this.charReceived) ? this.charLength - this.charReceived : buffer.length;
        buffer.copy(this.charBuffer, this.charReceived, 0, available);
        this.charReceived += available;
        if (this.charReceived < this.charLength) {
          return '';
        }
        buffer = buffer.slice(available, buffer.length);
        charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
        var charCode = charStr.charCodeAt(charStr.length - 1);
        if (charCode >= 0xD800 && charCode <= 0xDBFF) {
          this.charLength += this.surrogateSize;
          charStr = '';
          continue;
        }
        this.charReceived = this.charLength = 0;
        if (buffer.length === 0) {
          return charStr;
        }
        break;
      }
      this.detectIncompleteChar(buffer);
      var end = buffer.length;
      if (this.charLength) {
        buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
        end -= this.charReceived;
      }
      charStr += buffer.toString(this.encoding, 0, end);
      var end = charStr.length - 1;
      var charCode = charStr.charCodeAt(end);
      if (charCode >= 0xD800 && charCode <= 0xDBFF) {
        var size = this.surrogateSize;
        this.charLength += size;
        this.charReceived += size;
        this.charBuffer.copy(this.charBuffer, size, 0, size);
        buffer.copy(this.charBuffer, 0, 0, size);
        return charStr.substring(0, end);
      }
      return charStr;
    };
    StringDecoder.prototype.detectIncompleteChar = function(buffer) {
      var i = (buffer.length >= 3) ? 3 : buffer.length;
      for (; i > 0; i--) {
        var c = buffer[buffer.length - i];
        if (i == 1 && c >> 5 == 0x06) {
          this.charLength = 2;
          break;
        }
        if (i <= 2 && c >> 4 == 0x0E) {
          this.charLength = 3;
          break;
        }
        if (i <= 3 && c >> 3 == 0x1E) {
          this.charLength = 4;
          break;
        }
      }
      this.charReceived = i;
    };
    StringDecoder.prototype.end = function(buffer) {
      var res = '';
      if (buffer && buffer.length)
        res = this.write(buffer);
      if (this.charReceived) {
        var cr = this.charReceived;
        var buf = this.charBuffer;
        var enc = this.encoding;
        res += buf.slice(0, cr).toString(enc);
      }
      return res;
    };
    function passThroughWrite(buffer) {
      return buffer.toString(this.encoding);
    }
    function utf16DetectIncompleteChar(buffer) {
      this.charReceived = buffer.length % 2;
      this.charLength = this.charReceived ? 2 : 0;
    }
    function base64DetectIncompleteChar(buffer) {
      this.charReceived = buffer.length % 3;
      this.charLength = this.charReceived ? 3 : 0;
    }
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("7c", ["7b"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("7b");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("7d", ["78", "72", "57", "7e", "7a", "76", "7c", "3f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer, process) {
    module.exports = Readable;
    var isArray = require("78");
    var Buffer = require("72").Buffer;
    Readable.ReadableState = ReadableState;
    var EE = require("57").EventEmitter;
    if (!EE.listenerCount)
      EE.listenerCount = function(emitter, type) {
        return emitter.listeners(type).length;
      };
    var Stream = require("7e");
    var util = require("7a");
    util.inherits = require("76");
    var StringDecoder;
    util.inherits(Readable, Stream);
    function ReadableState(options, stream) {
      options = options || {};
      var hwm = options.highWaterMark;
      this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;
      this.highWaterMark = ~~this.highWaterMark;
      this.buffer = [];
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = false;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;
      this.calledRead = false;
      this.sync = true;
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.objectMode = !!options.objectMode;
      this.defaultEncoding = options.defaultEncoding || 'utf8';
      this.ranOut = false;
      this.awaitDrain = 0;
      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder)
          StringDecoder = require("7c").StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {
      if (!(this instanceof Readable))
        return new Readable(options);
      this._readableState = new ReadableState(options, this);
      this.readable = true;
      Stream.call(this);
    }
    Readable.prototype.push = function(chunk, encoding) {
      var state = this._readableState;
      if (typeof chunk === 'string' && !state.objectMode) {
        encoding = encoding || state.defaultEncoding;
        if (encoding !== state.encoding) {
          chunk = new Buffer(chunk, encoding);
          encoding = '';
        }
      }
      return readableAddChunk(this, state, chunk, encoding, false);
    };
    Readable.prototype.unshift = function(chunk) {
      var state = this._readableState;
      return readableAddChunk(this, state, chunk, '', true);
    };
    function readableAddChunk(stream, state, chunk, encoding, addToFront) {
      var er = chunkInvalid(state, chunk);
      if (er) {
        stream.emit('error', er);
      } else if (chunk === null || chunk === undefined) {
        state.reading = false;
        if (!state.ended)
          onEofChunk(stream, state);
      } else if (state.objectMode || chunk && chunk.length > 0) {
        if (state.ended && !addToFront) {
          var e = new Error('stream.push() after EOF');
          stream.emit('error', e);
        } else if (state.endEmitted && addToFront) {
          var e = new Error('stream.unshift() after end event');
          stream.emit('error', e);
        } else {
          if (state.decoder && !addToFront && !encoding)
            chunk = state.decoder.write(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront) {
            state.buffer.unshift(chunk);
          } else {
            state.reading = false;
            state.buffer.push(chunk);
          }
          if (state.needReadable)
            emitReadable(stream);
          maybeReadMore(stream, state);
        }
      } else if (!addToFront) {
        state.reading = false;
      }
      return needMoreData(state);
    }
    function needMoreData(state) {
      return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
    }
    Readable.prototype.setEncoding = function(enc) {
      if (!StringDecoder)
        StringDecoder = require("7c").StringDecoder;
      this._readableState.decoder = new StringDecoder(enc);
      this._readableState.encoding = enc;
    };
    var MAX_HWM = 0x800000;
    function roundUpToNextPowerOf2(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        n--;
        for (var p = 1; p < 32; p <<= 1)
          n |= n >> p;
        n++;
      }
      return n;
    }
    function howMuchToRead(n, state) {
      if (state.length === 0 && state.ended)
        return 0;
      if (state.objectMode)
        return n === 0 ? 0 : 1;
      if (n === null || isNaN(n)) {
        if (state.flowing && state.buffer.length)
          return state.buffer[0].length;
        else
          return state.length;
      }
      if (n <= 0)
        return 0;
      if (n > state.highWaterMark)
        state.highWaterMark = roundUpToNextPowerOf2(n);
      if (n > state.length) {
        if (!state.ended) {
          state.needReadable = true;
          return 0;
        } else
          return state.length;
      }
      return n;
    }
    Readable.prototype.read = function(n) {
      var state = this._readableState;
      state.calledRead = true;
      var nOrig = n;
      var ret;
      if (typeof n !== 'number' || n > 0)
        state.emittedReadable = false;
      if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
        emitReadable(this);
        return null;
      }
      n = howMuchToRead(n, state);
      if (n === 0 && state.ended) {
        ret = null;
        if (state.length > 0 && state.decoder) {
          ret = fromList(n, state);
          state.length -= ret.length;
        }
        if (state.length === 0)
          endReadable(this);
        return ret;
      }
      var doRead = state.needReadable;
      if (state.length - n <= state.highWaterMark)
        doRead = true;
      if (state.ended || state.reading)
        doRead = false;
      if (doRead) {
        state.reading = true;
        state.sync = true;
        if (state.length === 0)
          state.needReadable = true;
        this._read(state.highWaterMark);
        state.sync = false;
      }
      if (doRead && !state.reading)
        n = howMuchToRead(nOrig, state);
      if (n > 0)
        ret = fromList(n, state);
      else
        ret = null;
      if (ret === null) {
        state.needReadable = true;
        n = 0;
      }
      state.length -= n;
      if (state.length === 0 && !state.ended)
        state.needReadable = true;
      if (state.ended && !state.endEmitted && state.length === 0)
        endReadable(this);
      return ret;
    };
    function chunkInvalid(state, chunk) {
      var er = null;
      if (!Buffer.isBuffer(chunk) && 'string' !== typeof chunk && chunk !== null && chunk !== undefined && !state.objectMode) {
        er = new TypeError('Invalid non-string/buffer chunk');
      }
      return er;
    }
    function onEofChunk(stream, state) {
      if (state.decoder && !state.ended) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;
      if (state.length > 0)
        emitReadable(stream);
      else
        endReadable(stream);
    }
    function emitReadable(stream) {
      var state = stream._readableState;
      state.needReadable = false;
      if (state.emittedReadable)
        return;
      state.emittedReadable = true;
      if (state.sync)
        process.nextTick(function() {
          emitReadable_(stream);
        });
      else
        emitReadable_(stream);
    }
    function emitReadable_(stream) {
      stream.emit('readable');
    }
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(function() {
          maybeReadMore_(stream, state);
        });
      }
    }
    function maybeReadMore_(stream, state) {
      var len = state.length;
      while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
        stream.read(0);
        if (len === state.length)
          break;
        else
          len = state.length;
      }
      state.readingMore = false;
    }
    Readable.prototype._read = function(n) {
      this.emit('error', new Error('not implemented'));
    };
    Readable.prototype.pipe = function(dest, pipeOpts) {
      var src = this;
      var state = this._readableState;
      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
      var endFn = doEnd ? onend : cleanup;
      if (state.endEmitted)
        process.nextTick(endFn);
      else
        src.once('end', endFn);
      dest.on('unpipe', onunpipe);
      function onunpipe(readable) {
        if (readable !== src)
          return;
        cleanup();
      }
      function onend() {
        dest.end();
      }
      var ondrain = pipeOnDrain(src);
      dest.on('drain', ondrain);
      function cleanup() {
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', cleanup);
        if (!dest._writableState || dest._writableState.needDrain)
          ondrain();
      }
      function onerror(er) {
        unpipe();
        dest.removeListener('error', onerror);
        if (EE.listenerCount(dest, 'error') === 0)
          dest.emit('error', er);
      }
      if (!dest._events || !dest._events.error)
        dest.on('error', onerror);
      else if (isArray(dest._events.error))
        dest._events.error.unshift(onerror);
      else
        dest._events.error = [onerror, dest._events.error];
      function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
      }
      dest.once('close', onclose);
      function onfinish() {
        dest.removeListener('close', onclose);
        unpipe();
      }
      dest.once('finish', onfinish);
      function unpipe() {
        src.unpipe(dest);
      }
      dest.emit('pipe', src);
      if (!state.flowing) {
        this.on('readable', pipeOnReadable);
        state.flowing = true;
        process.nextTick(function() {
          flow(src);
        });
      }
      return dest;
    };
    function pipeOnDrain(src) {
      return function() {
        var dest = this;
        var state = src._readableState;
        state.awaitDrain--;
        if (state.awaitDrain === 0)
          flow(src);
      };
    }
    function flow(src) {
      var state = src._readableState;
      var chunk;
      state.awaitDrain = 0;
      function write(dest, i, list) {
        var written = dest.write(chunk);
        if (false === written) {
          state.awaitDrain++;
        }
      }
      while (state.pipesCount && null !== (chunk = src.read())) {
        if (state.pipesCount === 1)
          write(state.pipes, 0, null);
        else
          forEach(state.pipes, write);
        src.emit('data', chunk);
        if (state.awaitDrain > 0)
          return;
      }
      if (state.pipesCount === 0) {
        state.flowing = false;
        if (EE.listenerCount(src, 'data') > 0)
          emitDataEvents(src);
        return;
      }
      state.ranOut = true;
    }
    function pipeOnReadable() {
      if (this._readableState.ranOut) {
        this._readableState.ranOut = false;
        flow(this);
      }
    }
    Readable.prototype.unpipe = function(dest) {
      var state = this._readableState;
      if (state.pipesCount === 0)
        return this;
      if (state.pipesCount === 1) {
        if (dest && dest !== state.pipes)
          return this;
        if (!dest)
          dest = state.pipes;
        state.pipes = null;
        state.pipesCount = 0;
        this.removeListener('readable', pipeOnReadable);
        state.flowing = false;
        if (dest)
          dest.emit('unpipe', this);
        return this;
      }
      if (!dest) {
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        this.removeListener('readable', pipeOnReadable);
        state.flowing = false;
        for (var i = 0; i < len; i++)
          dests[i].emit('unpipe', this);
        return this;
      }
      var i = indexOf(state.pipes, dest);
      if (i === -1)
        return this;
      state.pipes.splice(i, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1)
        state.pipes = state.pipes[0];
      dest.emit('unpipe', this);
      return this;
    };
    Readable.prototype.on = function(ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);
      if (ev === 'data' && !this._readableState.flowing)
        emitDataEvents(this);
      if (ev === 'readable' && this.readable) {
        var state = this._readableState;
        if (!state.readableListening) {
          state.readableListening = true;
          state.emittedReadable = false;
          state.needReadable = true;
          if (!state.reading) {
            this.read(0);
          } else if (state.length) {
            emitReadable(this, state);
          }
        }
      }
      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;
    Readable.prototype.resume = function() {
      emitDataEvents(this);
      this.read(0);
      this.emit('resume');
    };
    Readable.prototype.pause = function() {
      emitDataEvents(this, true);
      this.emit('pause');
    };
    function emitDataEvents(stream, startPaused) {
      var state = stream._readableState;
      if (state.flowing) {
        throw new Error('Cannot switch to old mode now.');
      }
      var paused = startPaused || false;
      var readable = false;
      stream.readable = true;
      stream.pipe = Stream.prototype.pipe;
      stream.on = stream.addListener = Stream.prototype.on;
      stream.on('readable', function() {
        readable = true;
        var c;
        while (!paused && (null !== (c = stream.read())))
          stream.emit('data', c);
        if (c === null) {
          readable = false;
          stream._readableState.needReadable = true;
        }
      });
      stream.pause = function() {
        paused = true;
        this.emit('pause');
      };
      stream.resume = function() {
        paused = false;
        if (readable)
          process.nextTick(function() {
            stream.emit('readable');
          });
        else
          this.read(0);
        this.emit('resume');
      };
      stream.emit('readable');
    }
    Readable.prototype.wrap = function(stream) {
      var state = this._readableState;
      var paused = false;
      var self = this;
      stream.on('end', function() {
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length)
            self.push(chunk);
        }
        self.push(null);
      });
      stream.on('data', function(chunk) {
        if (state.decoder)
          chunk = state.decoder.write(chunk);
        if (state.objectMode && (chunk === null || chunk === undefined))
          return;
        else if (!state.objectMode && (!chunk || !chunk.length))
          return;
        var ret = self.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });
      for (var i in stream) {
        if (typeof stream[i] === 'function' && typeof this[i] === 'undefined') {
          this[i] = function(method) {
            return function() {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      }
      var events = ['error', 'close', 'destroy', 'pause', 'resume'];
      forEach(events, function(ev) {
        stream.on(ev, self.emit.bind(self, ev));
      });
      self._read = function(n) {
        if (paused) {
          paused = false;
          stream.resume();
        }
      };
      return self;
    };
    Readable._fromList = fromList;
    function fromList(n, state) {
      var list = state.buffer;
      var length = state.length;
      var stringMode = !!state.decoder;
      var objectMode = !!state.objectMode;
      var ret;
      if (list.length === 0)
        return null;
      if (length === 0)
        ret = null;
      else if (objectMode)
        ret = list.shift();
      else if (!n || n >= length) {
        if (stringMode)
          ret = list.join('');
        else
          ret = Buffer.concat(list, length);
        list.length = 0;
      } else {
        if (n < list[0].length) {
          var buf = list[0];
          ret = buf.slice(0, n);
          list[0] = buf.slice(n);
        } else if (n === list[0].length) {
          ret = list.shift();
        } else {
          if (stringMode)
            ret = '';
          else
            ret = new Buffer(n);
          var c = 0;
          for (var i = 0,
              l = list.length; i < l && c < n; i++) {
            var buf = list[0];
            var cpy = Math.min(n - c, buf.length);
            if (stringMode)
              ret += buf.slice(0, cpy);
            else
              buf.copy(ret, c, 0, cpy);
            if (cpy < buf.length)
              list[0] = buf.slice(cpy);
            else
              list.shift();
            c += cpy;
          }
        }
      }
      return ret;
    }
    function endReadable(stream) {
      var state = stream._readableState;
      if (state.length > 0)
        throw new Error('endReadable called on non-empty stream');
      if (!state.endEmitted && state.calledRead) {
        state.ended = true;
        process.nextTick(function() {
          if (!state.endEmitted && state.length === 0) {
            state.endEmitted = true;
            stream.readable = false;
            stream.emit('end');
          }
        });
      }
    }
    function forEach(xs, f) {
      for (var i = 0,
          l = xs.length; i < l; i++) {
        f(xs[i], i);
      }
    }
    function indexOf(xs, x) {
      for (var i = 0,
          l = xs.length; i < l; i++) {
        if (xs[i] === x)
          return i;
      }
      return -1;
    }
  })(require("72").Buffer, require("3f"));
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("7f", ["7a", "76", "7d", "80", "3f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    module.exports = Duplex;
    var objectKeys = Object.keys || function(obj) {
      var keys = [];
      for (var key in obj)
        keys.push(key);
      return keys;
    };
    var util = require("7a");
    util.inherits = require("76");
    var Readable = require("7d");
    var Writable = require("80");
    util.inherits(Duplex, Readable);
    forEach(objectKeys(Writable.prototype), function(method) {
      if (!Duplex.prototype[method])
        Duplex.prototype[method] = Writable.prototype[method];
    });
    function Duplex(options) {
      if (!(this instanceof Duplex))
        return new Duplex(options);
      Readable.call(this, options);
      Writable.call(this, options);
      if (options && options.readable === false)
        this.readable = false;
      if (options && options.writable === false)
        this.writable = false;
      this.allowHalfOpen = true;
      if (options && options.allowHalfOpen === false)
        this.allowHalfOpen = false;
      this.once('end', onend);
    }
    function onend() {
      if (this.allowHalfOpen || this._writableState.ended)
        return;
      process.nextTick(this.end.bind(this));
    }
    function forEach(xs, f) {
      for (var i = 0,
          l = xs.length; i < l; i++) {
        f(xs[i], i);
      }
    }
  })(require("3f"));
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("80", ["72", "7a", "76", "7e", "7f", "3f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer, process) {
    module.exports = Writable;
    var Buffer = require("72").Buffer;
    Writable.WritableState = WritableState;
    var util = require("7a");
    util.inherits = require("76");
    var Stream = require("7e");
    util.inherits(Writable, Stream);
    function WriteReq(chunk, encoding, cb) {
      this.chunk = chunk;
      this.encoding = encoding;
      this.callback = cb;
    }
    function WritableState(options, stream) {
      options = options || {};
      var hwm = options.highWaterMark;
      this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;
      this.objectMode = !!options.objectMode;
      this.highWaterMark = ~~this.highWaterMark;
      this.needDrain = false;
      this.ending = false;
      this.ended = false;
      this.finished = false;
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;
      this.defaultEncoding = options.defaultEncoding || 'utf8';
      this.length = 0;
      this.writing = false;
      this.sync = true;
      this.bufferProcessing = false;
      this.onwrite = function(er) {
        onwrite(stream, er);
      };
      this.writecb = null;
      this.writelen = 0;
      this.buffer = [];
      this.errorEmitted = false;
    }
    function Writable(options) {
      var Duplex = require("7f");
      if (!(this instanceof Writable) && !(this instanceof Duplex))
        return new Writable(options);
      this._writableState = new WritableState(options, this);
      this.writable = true;
      Stream.call(this);
    }
    Writable.prototype.pipe = function() {
      this.emit('error', new Error('Cannot pipe. Not readable.'));
    };
    function writeAfterEnd(stream, state, cb) {
      var er = new Error('write after end');
      stream.emit('error', er);
      process.nextTick(function() {
        cb(er);
      });
    }
    function validChunk(stream, state, chunk, cb) {
      var valid = true;
      if (!Buffer.isBuffer(chunk) && 'string' !== typeof chunk && chunk !== null && chunk !== undefined && !state.objectMode) {
        var er = new TypeError('Invalid non-string/buffer chunk');
        stream.emit('error', er);
        process.nextTick(function() {
          cb(er);
        });
        valid = false;
      }
      return valid;
    }
    Writable.prototype.write = function(chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;
      if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }
      if (Buffer.isBuffer(chunk))
        encoding = 'buffer';
      else if (!encoding)
        encoding = state.defaultEncoding;
      if (typeof cb !== 'function')
        cb = function() {};
      if (state.ended)
        writeAfterEnd(this, state, cb);
      else if (validChunk(this, state, chunk, cb))
        ret = writeOrBuffer(this, state, chunk, encoding, cb);
      return ret;
    };
    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
        chunk = new Buffer(chunk, encoding);
      }
      return chunk;
    }
    function writeOrBuffer(stream, state, chunk, encoding, cb) {
      chunk = decodeChunk(state, chunk, encoding);
      if (Buffer.isBuffer(chunk))
        encoding = 'buffer';
      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark;
      if (!ret)
        state.needDrain = true;
      if (state.writing)
        state.buffer.push(new WriteReq(chunk, encoding, cb));
      else
        doWrite(stream, state, len, chunk, encoding, cb);
      return ret;
    }
    function doWrite(stream, state, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    function onwriteError(stream, state, sync, er, cb) {
      if (sync)
        process.nextTick(function() {
          cb(er);
        });
      else
        cb(er);
      stream._writableState.errorEmitted = true;
      stream.emit('error', er);
    }
    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }
    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      onwriteStateUpdate(state);
      if (er)
        onwriteError(stream, state, sync, er, cb);
      else {
        var finished = needFinish(stream, state);
        if (!finished && !state.bufferProcessing && state.buffer.length)
          clearBuffer(stream, state);
        if (sync) {
          process.nextTick(function() {
            afterWrite(stream, state, finished, cb);
          });
        } else {
          afterWrite(stream, state, finished, cb);
        }
      }
    }
    function afterWrite(stream, state, finished, cb) {
      if (!finished)
        onwriteDrain(stream, state);
      cb();
      if (finished)
        finishMaybe(stream, state);
    }
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
      }
    }
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      for (var c = 0; c < state.buffer.length; c++) {
        var entry = state.buffer[c];
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len = state.objectMode ? 1 : chunk.length;
        doWrite(stream, state, len, chunk, encoding, cb);
        if (state.writing) {
          c++;
          break;
        }
      }
      state.bufferProcessing = false;
      if (c < state.buffer.length)
        state.buffer = state.buffer.slice(c);
      else
        state.buffer.length = 0;
    }
    Writable.prototype._write = function(chunk, encoding, cb) {
      cb(new Error('not implemented'));
    };
    Writable.prototype.end = function(chunk, encoding, cb) {
      var state = this._writableState;
      if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }
      if (typeof chunk !== 'undefined' && chunk !== null)
        this.write(chunk, encoding);
      if (!state.ending && !state.finished)
        endWritable(this, state, cb);
    };
    function needFinish(stream, state) {
      return (state.ending && state.length === 0 && !state.finished && !state.writing);
    }
    function finishMaybe(stream, state) {
      var need = needFinish(stream, state);
      if (need) {
        state.finished = true;
        stream.emit('finish');
      }
      return need;
    }
    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished)
          process.nextTick(cb);
        else
          stream.once('finish', cb);
      }
      state.ended = true;
    }
  })(require("72").Buffer, require("3f"));
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("81", ["7f", "7a", "76", "3f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    module.exports = Transform;
    var Duplex = require("7f");
    var util = require("7a");
    util.inherits = require("76");
    util.inherits(Transform, Duplex);
    function TransformState(options, stream) {
      this.afterTransform = function(er, data) {
        return afterTransform(stream, er, data);
      };
      this.needTransform = false;
      this.transforming = false;
      this.writecb = null;
      this.writechunk = null;
    }
    function afterTransform(stream, er, data) {
      var ts = stream._transformState;
      ts.transforming = false;
      var cb = ts.writecb;
      if (!cb)
        return stream.emit('error', new Error('no writecb in Transform class'));
      ts.writechunk = null;
      ts.writecb = null;
      if (data !== null && data !== undefined)
        stream.push(data);
      if (cb)
        cb(er);
      var rs = stream._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        stream._read(rs.highWaterMark);
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform))
        return new Transform(options);
      Duplex.call(this, options);
      var ts = this._transformState = new TransformState(options, this);
      var stream = this;
      this._readableState.needReadable = true;
      this._readableState.sync = false;
      this.once('finish', function() {
        if ('function' === typeof this._flush)
          this._flush(function(er) {
            done(stream, er);
          });
        else
          done(stream);
      });
    }
    Transform.prototype.push = function(chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };
    Transform.prototype._transform = function(chunk, encoding, cb) {
      throw new Error('not implemented');
    };
    Transform.prototype._write = function(chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
          this._read(rs.highWaterMark);
      }
    };
    Transform.prototype._read = function(n) {
      var ts = this._transformState;
      if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        ts.needTransform = true;
      }
    };
    function done(stream, er) {
      if (er)
        return stream.emit('error', er);
      var ws = stream._writableState;
      var rs = stream._readableState;
      var ts = stream._transformState;
      if (ws.length)
        throw new Error('calling transform done when ws.length != 0');
      if (ts.transforming)
        throw new Error('calling transform done when still transforming');
      return stream.push(null);
    }
  })(require("3f"));
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("82", ["81", "7a", "76"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = PassThrough;
  var Transform = require("81");
  var util = require("7a");
  util.inherits = require("76");
  util.inherits(PassThrough, Transform);
  function PassThrough(options) {
    if (!(this instanceof PassThrough))
      return new PassThrough(options);
    Transform.call(this, options);
  }
  PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("83", ["7e", "7d", "80", "7f", "81", "82"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var Stream = require("7e");
  exports = module.exports = require("7d");
  exports.Stream = Stream;
  exports.Readable = exports;
  exports.Writable = require("80");
  exports.Duplex = require("7f");
  exports.Transform = require("81");
  exports.PassThrough = require("82");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("84", ["80"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("80");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("85", ["7f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("7f");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("86", ["81"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("81");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("87", ["82"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("82");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("7e", ["57", "76", "83", "84", "85", "86", "87"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = Stream;
  var EE = require("57").EventEmitter;
  var inherits = require("76");
  inherits(Stream, EE);
  Stream.Readable = require("83");
  Stream.Writable = require("84");
  Stream.Duplex = require("85");
  Stream.Transform = require("86");
  Stream.PassThrough = require("87");
  Stream.Stream = Stream;
  function Stream() {
    EE.call(this);
  }
  Stream.prototype.pipe = function(dest, options) {
    var source = this;
    function ondata(chunk) {
      if (dest.writable) {
        if (false === dest.write(chunk) && source.pause) {
          source.pause();
        }
      }
    }
    source.on('data', ondata);
    function ondrain() {
      if (source.readable && source.resume) {
        source.resume();
      }
    }
    dest.on('drain', ondrain);
    if (!dest._isStdio && (!options || options.end !== false)) {
      source.on('end', onend);
      source.on('close', onclose);
    }
    var didOnEnd = false;
    function onend() {
      if (didOnEnd)
        return;
      didOnEnd = true;
      dest.end();
    }
    function onclose() {
      if (didOnEnd)
        return;
      didOnEnd = true;
      if (typeof dest.destroy === 'function')
        dest.destroy();
    }
    function onerror(er) {
      cleanup();
      if (EE.listenerCount(this, 'error') === 0) {
        throw er;
      }
    }
    source.on('error', onerror);
    dest.on('error', onerror);
    function cleanup() {
      source.removeListener('data', ondata);
      dest.removeListener('drain', ondrain);
      source.removeListener('end', onend);
      source.removeListener('close', onclose);
      source.removeListener('error', onerror);
      dest.removeListener('error', onerror);
      source.removeListener('end', cleanup);
      source.removeListener('close', cleanup);
      dest.removeListener('close', cleanup);
    }
    source.on('end', cleanup);
    source.on('close', cleanup);
    dest.on('close', cleanup);
    dest.emit('pipe', source);
    return dest;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("88", ["7e"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("7e");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("89", ["88"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = $__System._nodeRequire ? $__System._nodeRequire('stream') : require("88");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("8a", ["89"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("89");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("8b", ["8a"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var Stream = require("8a");
  module.exports = function(stream, error) {
    if (stream instanceof Stream && !~stream.listeners('error').indexOf(error)) {
      stream.on('error', error);
    }
    return stream;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("8c", ["8b"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("8b");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("8d", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "application/1d-interleaved-parityfec": {"source": "iana"},
    "application/3gpdash-qoe-report+xml": {"source": "iana"},
    "application/3gpp-ims+xml": {"source": "iana"},
    "application/a2l": {"source": "iana"},
    "application/activemessage": {"source": "iana"},
    "application/alto-costmap+json": {
      "source": "iana",
      "compressible": true
    },
    "application/alto-costmapfilter+json": {
      "source": "iana",
      "compressible": true
    },
    "application/alto-directory+json": {
      "source": "iana",
      "compressible": true
    },
    "application/alto-endpointcost+json": {
      "source": "iana",
      "compressible": true
    },
    "application/alto-endpointcostparams+json": {
      "source": "iana",
      "compressible": true
    },
    "application/alto-endpointprop+json": {
      "source": "iana",
      "compressible": true
    },
    "application/alto-endpointpropparams+json": {
      "source": "iana",
      "compressible": true
    },
    "application/alto-error+json": {
      "source": "iana",
      "compressible": true
    },
    "application/alto-networkmap+json": {
      "source": "iana",
      "compressible": true
    },
    "application/alto-networkmapfilter+json": {
      "source": "iana",
      "compressible": true
    },
    "application/aml": {"source": "iana"},
    "application/andrew-inset": {
      "source": "iana",
      "extensions": ["ez"]
    },
    "application/applefile": {"source": "iana"},
    "application/applixware": {
      "source": "apache",
      "extensions": ["aw"]
    },
    "application/atf": {"source": "iana"},
    "application/atfx": {"source": "iana"},
    "application/atom+xml": {
      "source": "iana",
      "compressible": true,
      "extensions": ["atom"]
    },
    "application/atomcat+xml": {
      "source": "iana",
      "extensions": ["atomcat"]
    },
    "application/atomdeleted+xml": {"source": "iana"},
    "application/atomicmail": {"source": "iana"},
    "application/atomsvc+xml": {
      "source": "iana",
      "extensions": ["atomsvc"]
    },
    "application/atxml": {"source": "iana"},
    "application/auth-policy+xml": {"source": "iana"},
    "application/bacnet-xdd+zip": {"source": "iana"},
    "application/batch-smtp": {"source": "iana"},
    "application/bdoc": {
      "compressible": false,
      "extensions": ["bdoc"]
    },
    "application/beep+xml": {"source": "iana"},
    "application/calendar+json": {
      "source": "iana",
      "compressible": true
    },
    "application/calendar+xml": {"source": "iana"},
    "application/call-completion": {"source": "iana"},
    "application/cals-1840": {"source": "iana"},
    "application/cbor": {"source": "iana"},
    "application/ccmp+xml": {"source": "iana"},
    "application/ccxml+xml": {
      "source": "iana",
      "extensions": ["ccxml"]
    },
    "application/cdfx+xml": {"source": "iana"},
    "application/cdmi-capability": {
      "source": "iana",
      "extensions": ["cdmia"]
    },
    "application/cdmi-container": {
      "source": "iana",
      "extensions": ["cdmic"]
    },
    "application/cdmi-domain": {
      "source": "iana",
      "extensions": ["cdmid"]
    },
    "application/cdmi-object": {
      "source": "iana",
      "extensions": ["cdmio"]
    },
    "application/cdmi-queue": {
      "source": "iana",
      "extensions": ["cdmiq"]
    },
    "application/cea": {"source": "iana"},
    "application/cea-2018+xml": {"source": "iana"},
    "application/cellml+xml": {"source": "iana"},
    "application/cfw": {"source": "iana"},
    "application/cms": {"source": "iana"},
    "application/cnrp+xml": {"source": "iana"},
    "application/coap-group+json": {
      "source": "iana",
      "compressible": true
    },
    "application/commonground": {"source": "iana"},
    "application/conference-info+xml": {"source": "iana"},
    "application/cpl+xml": {"source": "iana"},
    "application/csrattrs": {"source": "iana"},
    "application/csta+xml": {"source": "iana"},
    "application/cstadata+xml": {"source": "iana"},
    "application/cu-seeme": {
      "source": "apache",
      "extensions": ["cu"]
    },
    "application/cybercash": {"source": "iana"},
    "application/dart": {"compressible": true},
    "application/dash+xml": {
      "source": "iana",
      "extensions": ["mdp"]
    },
    "application/dashdelta": {"source": "iana"},
    "application/davmount+xml": {
      "source": "iana",
      "extensions": ["davmount"]
    },
    "application/dca-rft": {"source": "iana"},
    "application/dcd": {"source": "iana"},
    "application/dec-dx": {"source": "iana"},
    "application/dialog-info+xml": {"source": "iana"},
    "application/dicom": {"source": "iana"},
    "application/dii": {"source": "iana"},
    "application/dit": {"source": "iana"},
    "application/dns": {"source": "iana"},
    "application/docbook+xml": {
      "source": "apache",
      "extensions": ["dbk"]
    },
    "application/dskpp+xml": {"source": "iana"},
    "application/dssc+der": {
      "source": "iana",
      "extensions": ["dssc"]
    },
    "application/dssc+xml": {
      "source": "iana",
      "extensions": ["xdssc"]
    },
    "application/dvcs": {"source": "iana"},
    "application/ecmascript": {
      "source": "iana",
      "compressible": true,
      "extensions": ["ecma"]
    },
    "application/edi-consent": {"source": "iana"},
    "application/edi-x12": {
      "source": "iana",
      "compressible": false
    },
    "application/edifact": {
      "source": "iana",
      "compressible": false
    },
    "application/emma+xml": {
      "source": "iana",
      "extensions": ["emma"]
    },
    "application/emotionml+xml": {"source": "iana"},
    "application/encaprtp": {"source": "iana"},
    "application/epp+xml": {"source": "iana"},
    "application/epub+zip": {
      "source": "iana",
      "extensions": ["epub"]
    },
    "application/eshop": {"source": "iana"},
    "application/exi": {
      "source": "iana",
      "extensions": ["exi"]
    },
    "application/fastinfoset": {"source": "iana"},
    "application/fastsoap": {"source": "iana"},
    "application/fdt+xml": {"source": "iana"},
    "application/fits": {"source": "iana"},
    "application/font-sfnt": {"source": "iana"},
    "application/font-tdpfr": {
      "source": "iana",
      "extensions": ["pfr"]
    },
    "application/font-woff": {
      "source": "iana",
      "compressible": false,
      "extensions": ["woff"]
    },
    "application/font-woff2": {
      "compressible": false,
      "extensions": ["woff2"]
    },
    "application/framework-attributes+xml": {"source": "iana"},
    "application/gml+xml": {
      "source": "apache",
      "extensions": ["gml"]
    },
    "application/gpx+xml": {
      "source": "apache",
      "extensions": ["gpx"]
    },
    "application/gxf": {
      "source": "apache",
      "extensions": ["gxf"]
    },
    "application/gzip": {
      "source": "iana",
      "compressible": false
    },
    "application/h224": {"source": "iana"},
    "application/held+xml": {"source": "iana"},
    "application/http": {"source": "iana"},
    "application/hyperstudio": {
      "source": "iana",
      "extensions": ["stk"]
    },
    "application/ibe-key-request+xml": {"source": "iana"},
    "application/ibe-pkg-reply+xml": {"source": "iana"},
    "application/ibe-pp-data": {"source": "iana"},
    "application/iges": {"source": "iana"},
    "application/im-iscomposing+xml": {"source": "iana"},
    "application/index": {"source": "iana"},
    "application/index.cmd": {"source": "iana"},
    "application/index.obj": {"source": "iana"},
    "application/index.response": {"source": "iana"},
    "application/index.vnd": {"source": "iana"},
    "application/inkml+xml": {
      "source": "iana",
      "extensions": ["ink", "inkml"]
    },
    "application/iotp": {"source": "iana"},
    "application/ipfix": {
      "source": "iana",
      "extensions": ["ipfix"]
    },
    "application/ipp": {"source": "iana"},
    "application/isup": {"source": "iana"},
    "application/its+xml": {"source": "iana"},
    "application/java-archive": {
      "source": "apache",
      "compressible": false,
      "extensions": ["jar", "war", "ear"]
    },
    "application/java-serialized-object": {
      "source": "apache",
      "compressible": false,
      "extensions": ["ser"]
    },
    "application/java-vm": {
      "source": "apache",
      "compressible": false,
      "extensions": ["class"]
    },
    "application/javascript": {
      "source": "iana",
      "charset": "UTF-8",
      "compressible": true,
      "extensions": ["js"]
    },
    "application/jose": {"source": "iana"},
    "application/jose+json": {
      "source": "iana",
      "compressible": true
    },
    "application/jrd+json": {
      "source": "iana",
      "compressible": true
    },
    "application/json": {
      "source": "iana",
      "charset": "UTF-8",
      "compressible": true,
      "extensions": ["json", "map"]
    },
    "application/json-patch+json": {
      "source": "iana",
      "compressible": true
    },
    "application/json-seq": {"source": "iana"},
    "application/json5": {"extensions": ["json5"]},
    "application/jsonml+json": {
      "source": "apache",
      "compressible": true,
      "extensions": ["jsonml"]
    },
    "application/jwk+json": {
      "source": "iana",
      "compressible": true
    },
    "application/jwk-set+json": {
      "source": "iana",
      "compressible": true
    },
    "application/jwt": {"source": "iana"},
    "application/kpml-request+xml": {"source": "iana"},
    "application/kpml-response+xml": {"source": "iana"},
    "application/ld+json": {
      "source": "iana",
      "compressible": true,
      "extensions": ["jsonld"]
    },
    "application/link-format": {"source": "iana"},
    "application/load-control+xml": {"source": "iana"},
    "application/lost+xml": {
      "source": "iana",
      "extensions": ["lostxml"]
    },
    "application/lostsync+xml": {"source": "iana"},
    "application/lxf": {"source": "iana"},
    "application/mac-binhex40": {
      "source": "iana",
      "extensions": ["hqx"]
    },
    "application/mac-compactpro": {
      "source": "apache",
      "extensions": ["cpt"]
    },
    "application/macwriteii": {"source": "iana"},
    "application/mads+xml": {
      "source": "iana",
      "extensions": ["mads"]
    },
    "application/manifest+json": {
      "charset": "UTF-8",
      "compressible": true,
      "extensions": ["webmanifest"]
    },
    "application/marc": {
      "source": "iana",
      "extensions": ["mrc"]
    },
    "application/marcxml+xml": {
      "source": "iana",
      "extensions": ["mrcx"]
    },
    "application/mathematica": {
      "source": "iana",
      "extensions": ["ma", "nb", "mb"]
    },
    "application/mathml+xml": {
      "source": "iana",
      "extensions": ["mathml"]
    },
    "application/mathml-content+xml": {"source": "iana"},
    "application/mathml-presentation+xml": {"source": "iana"},
    "application/mbms-associated-procedure-description+xml": {"source": "iana"},
    "application/mbms-deregister+xml": {"source": "iana"},
    "application/mbms-envelope+xml": {"source": "iana"},
    "application/mbms-msk+xml": {"source": "iana"},
    "application/mbms-msk-response+xml": {"source": "iana"},
    "application/mbms-protection-description+xml": {"source": "iana"},
    "application/mbms-reception-report+xml": {"source": "iana"},
    "application/mbms-register+xml": {"source": "iana"},
    "application/mbms-register-response+xml": {"source": "iana"},
    "application/mbms-schedule+xml": {"source": "iana"},
    "application/mbms-user-service-description+xml": {"source": "iana"},
    "application/mbox": {
      "source": "iana",
      "extensions": ["mbox"]
    },
    "application/media-policy-dataset+xml": {"source": "iana"},
    "application/media_control+xml": {"source": "iana"},
    "application/mediaservercontrol+xml": {
      "source": "iana",
      "extensions": ["mscml"]
    },
    "application/merge-patch+json": {
      "source": "iana",
      "compressible": true
    },
    "application/metalink+xml": {
      "source": "apache",
      "extensions": ["metalink"]
    },
    "application/metalink4+xml": {
      "source": "iana",
      "extensions": ["meta4"]
    },
    "application/mets+xml": {
      "source": "iana",
      "extensions": ["mets"]
    },
    "application/mf4": {"source": "iana"},
    "application/mikey": {"source": "iana"},
    "application/mods+xml": {
      "source": "iana",
      "extensions": ["mods"]
    },
    "application/moss-keys": {"source": "iana"},
    "application/moss-signature": {"source": "iana"},
    "application/mosskey-data": {"source": "iana"},
    "application/mosskey-request": {"source": "iana"},
    "application/mp21": {
      "source": "iana",
      "extensions": ["m21", "mp21"]
    },
    "application/mp4": {
      "source": "iana",
      "extensions": ["mp4s", "m4p"]
    },
    "application/mpeg4-generic": {"source": "iana"},
    "application/mpeg4-iod": {"source": "iana"},
    "application/mpeg4-iod-xmt": {"source": "iana"},
    "application/mrb-consumer+xml": {"source": "iana"},
    "application/mrb-publish+xml": {"source": "iana"},
    "application/msc-ivr+xml": {"source": "iana"},
    "application/msc-mixer+xml": {"source": "iana"},
    "application/msword": {
      "source": "iana",
      "compressible": false,
      "extensions": ["doc", "dot"]
    },
    "application/mxf": {
      "source": "iana",
      "extensions": ["mxf"]
    },
    "application/nasdata": {"source": "iana"},
    "application/news-checkgroups": {"source": "iana"},
    "application/news-groupinfo": {"source": "iana"},
    "application/news-transmission": {"source": "iana"},
    "application/nlsml+xml": {"source": "iana"},
    "application/nss": {"source": "iana"},
    "application/ocsp-request": {"source": "iana"},
    "application/ocsp-response": {"source": "iana"},
    "application/octet-stream": {
      "source": "iana",
      "compressible": false,
      "extensions": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"]
    },
    "application/oda": {
      "source": "iana",
      "extensions": ["oda"]
    },
    "application/odx": {"source": "iana"},
    "application/oebps-package+xml": {
      "source": "iana",
      "extensions": ["opf"]
    },
    "application/ogg": {
      "source": "iana",
      "compressible": false,
      "extensions": ["ogx"]
    },
    "application/omdoc+xml": {
      "source": "apache",
      "extensions": ["omdoc"]
    },
    "application/onenote": {
      "source": "apache",
      "extensions": ["onetoc", "onetoc2", "onetmp", "onepkg"]
    },
    "application/oxps": {
      "source": "iana",
      "extensions": ["oxps"]
    },
    "application/p2p-overlay+xml": {"source": "iana"},
    "application/parityfec": {"source": "iana"},
    "application/patch-ops-error+xml": {
      "source": "iana",
      "extensions": ["xer"]
    },
    "application/pdf": {
      "source": "iana",
      "compressible": false,
      "extensions": ["pdf"]
    },
    "application/pdx": {"source": "iana"},
    "application/pgp-encrypted": {
      "source": "iana",
      "compressible": false,
      "extensions": ["pgp"]
    },
    "application/pgp-keys": {"source": "iana"},
    "application/pgp-signature": {
      "source": "iana",
      "extensions": ["asc", "sig"]
    },
    "application/pics-rules": {
      "source": "apache",
      "extensions": ["prf"]
    },
    "application/pidf+xml": {"source": "iana"},
    "application/pidf-diff+xml": {"source": "iana"},
    "application/pkcs10": {
      "source": "iana",
      "extensions": ["p10"]
    },
    "application/pkcs12": {"source": "iana"},
    "application/pkcs7-mime": {
      "source": "iana",
      "extensions": ["p7m", "p7c"]
    },
    "application/pkcs7-signature": {
      "source": "iana",
      "extensions": ["p7s"]
    },
    "application/pkcs8": {
      "source": "iana",
      "extensions": ["p8"]
    },
    "application/pkix-attr-cert": {
      "source": "iana",
      "extensions": ["ac"]
    },
    "application/pkix-cert": {
      "source": "iana",
      "extensions": ["cer"]
    },
    "application/pkix-crl": {
      "source": "iana",
      "extensions": ["crl"]
    },
    "application/pkix-pkipath": {
      "source": "iana",
      "extensions": ["pkipath"]
    },
    "application/pkixcmp": {
      "source": "iana",
      "extensions": ["pki"]
    },
    "application/pls+xml": {
      "source": "iana",
      "extensions": ["pls"]
    },
    "application/poc-settings+xml": {"source": "iana"},
    "application/postscript": {
      "source": "iana",
      "compressible": true,
      "extensions": ["ai", "eps", "ps"]
    },
    "application/provenance+xml": {"source": "iana"},
    "application/prs.alvestrand.titrax-sheet": {"source": "iana"},
    "application/prs.cww": {
      "source": "iana",
      "extensions": ["cww"]
    },
    "application/prs.hpub+zip": {"source": "iana"},
    "application/prs.nprend": {"source": "iana"},
    "application/prs.plucker": {"source": "iana"},
    "application/prs.rdf-xml-crypt": {"source": "iana"},
    "application/prs.xsf+xml": {"source": "iana"},
    "application/pskc+xml": {
      "source": "iana",
      "extensions": ["pskcxml"]
    },
    "application/qsig": {"source": "iana"},
    "application/raptorfec": {"source": "iana"},
    "application/rdap+json": {
      "source": "iana",
      "compressible": true
    },
    "application/rdf+xml": {
      "source": "iana",
      "compressible": true,
      "extensions": ["rdf"]
    },
    "application/reginfo+xml": {
      "source": "iana",
      "extensions": ["rif"]
    },
    "application/relax-ng-compact-syntax": {
      "source": "iana",
      "extensions": ["rnc"]
    },
    "application/remote-printing": {"source": "iana"},
    "application/reputon+json": {
      "source": "iana",
      "compressible": true
    },
    "application/resource-lists+xml": {
      "source": "iana",
      "extensions": ["rl"]
    },
    "application/resource-lists-diff+xml": {
      "source": "iana",
      "extensions": ["rld"]
    },
    "application/riscos": {"source": "iana"},
    "application/rlmi+xml": {"source": "iana"},
    "application/rls-services+xml": {
      "source": "iana",
      "extensions": ["rs"]
    },
    "application/rpki-ghostbusters": {
      "source": "iana",
      "extensions": ["gbr"]
    },
    "application/rpki-manifest": {
      "source": "iana",
      "extensions": ["mft"]
    },
    "application/rpki-roa": {
      "source": "iana",
      "extensions": ["roa"]
    },
    "application/rpki-updown": {"source": "iana"},
    "application/rsd+xml": {
      "source": "apache",
      "extensions": ["rsd"]
    },
    "application/rss+xml": {
      "source": "apache",
      "compressible": true,
      "extensions": ["rss"]
    },
    "application/rtf": {
      "source": "iana",
      "compressible": true,
      "extensions": ["rtf"]
    },
    "application/rtploopback": {"source": "iana"},
    "application/rtx": {"source": "iana"},
    "application/samlassertion+xml": {"source": "iana"},
    "application/samlmetadata+xml": {"source": "iana"},
    "application/sbml+xml": {
      "source": "iana",
      "extensions": ["sbml"]
    },
    "application/scaip+xml": {"source": "iana"},
    "application/scim+json": {
      "source": "iana",
      "compressible": true
    },
    "application/scvp-cv-request": {
      "source": "iana",
      "extensions": ["scq"]
    },
    "application/scvp-cv-response": {
      "source": "iana",
      "extensions": ["scs"]
    },
    "application/scvp-vp-request": {
      "source": "iana",
      "extensions": ["spq"]
    },
    "application/scvp-vp-response": {
      "source": "iana",
      "extensions": ["spp"]
    },
    "application/sdp": {
      "source": "iana",
      "extensions": ["sdp"]
    },
    "application/sep+xml": {"source": "iana"},
    "application/sep-exi": {"source": "iana"},
    "application/session-info": {"source": "iana"},
    "application/set-payment": {"source": "iana"},
    "application/set-payment-initiation": {
      "source": "iana",
      "extensions": ["setpay"]
    },
    "application/set-registration": {"source": "iana"},
    "application/set-registration-initiation": {
      "source": "iana",
      "extensions": ["setreg"]
    },
    "application/sgml": {"source": "iana"},
    "application/sgml-open-catalog": {"source": "iana"},
    "application/shf+xml": {
      "source": "iana",
      "extensions": ["shf"]
    },
    "application/sieve": {"source": "iana"},
    "application/simple-filter+xml": {"source": "iana"},
    "application/simple-message-summary": {"source": "iana"},
    "application/simplesymbolcontainer": {"source": "iana"},
    "application/slate": {"source": "iana"},
    "application/smil": {"source": "iana"},
    "application/smil+xml": {
      "source": "iana",
      "extensions": ["smi", "smil"]
    },
    "application/smpte336m": {"source": "iana"},
    "application/soap+fastinfoset": {"source": "iana"},
    "application/soap+xml": {
      "source": "iana",
      "compressible": true
    },
    "application/sparql-query": {
      "source": "iana",
      "extensions": ["rq"]
    },
    "application/sparql-results+xml": {
      "source": "iana",
      "extensions": ["srx"]
    },
    "application/spirits-event+xml": {"source": "iana"},
    "application/sql": {"source": "iana"},
    "application/srgs": {
      "source": "iana",
      "extensions": ["gram"]
    },
    "application/srgs+xml": {
      "source": "iana",
      "extensions": ["grxml"]
    },
    "application/sru+xml": {
      "source": "iana",
      "extensions": ["sru"]
    },
    "application/ssdl+xml": {
      "source": "apache",
      "extensions": ["ssdl"]
    },
    "application/ssml+xml": {
      "source": "iana",
      "extensions": ["ssml"]
    },
    "application/tamp-apex-update": {"source": "iana"},
    "application/tamp-apex-update-confirm": {"source": "iana"},
    "application/tamp-community-update": {"source": "iana"},
    "application/tamp-community-update-confirm": {"source": "iana"},
    "application/tamp-error": {"source": "iana"},
    "application/tamp-sequence-adjust": {"source": "iana"},
    "application/tamp-sequence-adjust-confirm": {"source": "iana"},
    "application/tamp-status-query": {"source": "iana"},
    "application/tamp-status-response": {"source": "iana"},
    "application/tamp-update": {"source": "iana"},
    "application/tamp-update-confirm": {"source": "iana"},
    "application/tar": {"compressible": true},
    "application/tei+xml": {
      "source": "iana",
      "extensions": ["tei", "teicorpus"]
    },
    "application/thraud+xml": {
      "source": "iana",
      "extensions": ["tfi"]
    },
    "application/timestamp-query": {"source": "iana"},
    "application/timestamp-reply": {"source": "iana"},
    "application/timestamped-data": {
      "source": "iana",
      "extensions": ["tsd"]
    },
    "application/ttml+xml": {"source": "iana"},
    "application/tve-trigger": {"source": "iana"},
    "application/ulpfec": {"source": "iana"},
    "application/urc-grpsheet+xml": {"source": "iana"},
    "application/urc-ressheet+xml": {"source": "iana"},
    "application/urc-targetdesc+xml": {"source": "iana"},
    "application/urc-uisocketdesc+xml": {"source": "iana"},
    "application/vcard+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vcard+xml": {"source": "iana"},
    "application/vemmi": {"source": "iana"},
    "application/vividence.scriptfile": {"source": "apache"},
    "application/vnd.3gpp-prose+xml": {"source": "iana"},
    "application/vnd.3gpp-prose-pc3ch+xml": {"source": "iana"},
    "application/vnd.3gpp.bsf+xml": {"source": "iana"},
    "application/vnd.3gpp.mid-call+xml": {"source": "iana"},
    "application/vnd.3gpp.pic-bw-large": {
      "source": "iana",
      "extensions": ["plb"]
    },
    "application/vnd.3gpp.pic-bw-small": {
      "source": "iana",
      "extensions": ["psb"]
    },
    "application/vnd.3gpp.pic-bw-var": {
      "source": "iana",
      "extensions": ["pvb"]
    },
    "application/vnd.3gpp.sms": {"source": "iana"},
    "application/vnd.3gpp.srvcc-info+xml": {"source": "iana"},
    "application/vnd.3gpp.state-and-event-info+xml": {"source": "iana"},
    "application/vnd.3gpp.ussd+xml": {"source": "iana"},
    "application/vnd.3gpp2.bcmcsinfo+xml": {"source": "iana"},
    "application/vnd.3gpp2.sms": {"source": "iana"},
    "application/vnd.3gpp2.tcap": {
      "source": "iana",
      "extensions": ["tcap"]
    },
    "application/vnd.3m.post-it-notes": {
      "source": "iana",
      "extensions": ["pwn"]
    },
    "application/vnd.accpac.simply.aso": {
      "source": "iana",
      "extensions": ["aso"]
    },
    "application/vnd.accpac.simply.imp": {
      "source": "iana",
      "extensions": ["imp"]
    },
    "application/vnd.acucobol": {
      "source": "iana",
      "extensions": ["acu"]
    },
    "application/vnd.acucorp": {
      "source": "iana",
      "extensions": ["atc", "acutc"]
    },
    "application/vnd.adobe.air-application-installer-package+zip": {
      "source": "apache",
      "extensions": ["air"]
    },
    "application/vnd.adobe.flash.movie": {"source": "iana"},
    "application/vnd.adobe.formscentral.fcdt": {
      "source": "iana",
      "extensions": ["fcdt"]
    },
    "application/vnd.adobe.fxp": {
      "source": "iana",
      "extensions": ["fxp", "fxpl"]
    },
    "application/vnd.adobe.partial-upload": {"source": "iana"},
    "application/vnd.adobe.xdp+xml": {
      "source": "iana",
      "extensions": ["xdp"]
    },
    "application/vnd.adobe.xfdf": {
      "source": "iana",
      "extensions": ["xfdf"]
    },
    "application/vnd.aether.imp": {"source": "iana"},
    "application/vnd.ah-barcode": {"source": "iana"},
    "application/vnd.ahead.space": {
      "source": "iana",
      "extensions": ["ahead"]
    },
    "application/vnd.airzip.filesecure.azf": {
      "source": "iana",
      "extensions": ["azf"]
    },
    "application/vnd.airzip.filesecure.azs": {
      "source": "iana",
      "extensions": ["azs"]
    },
    "application/vnd.amazon.ebook": {
      "source": "apache",
      "extensions": ["azw"]
    },
    "application/vnd.americandynamics.acc": {
      "source": "iana",
      "extensions": ["acc"]
    },
    "application/vnd.amiga.ami": {
      "source": "iana",
      "extensions": ["ami"]
    },
    "application/vnd.amundsen.maze+xml": {"source": "iana"},
    "application/vnd.android.package-archive": {
      "source": "apache",
      "compressible": false,
      "extensions": ["apk"]
    },
    "application/vnd.anki": {"source": "iana"},
    "application/vnd.anser-web-certificate-issue-initiation": {
      "source": "iana",
      "extensions": ["cii"]
    },
    "application/vnd.anser-web-funds-transfer-initiation": {
      "source": "apache",
      "extensions": ["fti"]
    },
    "application/vnd.antix.game-component": {
      "source": "iana",
      "extensions": ["atx"]
    },
    "application/vnd.apache.thrift.binary": {"source": "iana"},
    "application/vnd.apache.thrift.compact": {"source": "iana"},
    "application/vnd.apache.thrift.json": {"source": "iana"},
    "application/vnd.api+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.apple.installer+xml": {
      "source": "iana",
      "extensions": ["mpkg"]
    },
    "application/vnd.apple.mpegurl": {
      "source": "iana",
      "extensions": ["m3u8"]
    },
    "application/vnd.apple.pkpass": {
      "compressible": false,
      "extensions": ["pkpass"]
    },
    "application/vnd.arastra.swi": {"source": "iana"},
    "application/vnd.aristanetworks.swi": {
      "source": "iana",
      "extensions": ["swi"]
    },
    "application/vnd.artsquare": {"source": "iana"},
    "application/vnd.astraea-software.iota": {
      "source": "iana",
      "extensions": ["iota"]
    },
    "application/vnd.audiograph": {
      "source": "iana",
      "extensions": ["aep"]
    },
    "application/vnd.autopackage": {"source": "iana"},
    "application/vnd.avistar+xml": {"source": "iana"},
    "application/vnd.balsamiq.bmml+xml": {"source": "iana"},
    "application/vnd.balsamiq.bmpr": {"source": "iana"},
    "application/vnd.bekitzur-stech+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.biopax.rdf+xml": {"source": "iana"},
    "application/vnd.blueice.multipass": {
      "source": "iana",
      "extensions": ["mpm"]
    },
    "application/vnd.bluetooth.ep.oob": {"source": "iana"},
    "application/vnd.bluetooth.le.oob": {"source": "iana"},
    "application/vnd.bmi": {
      "source": "iana",
      "extensions": ["bmi"]
    },
    "application/vnd.businessobjects": {
      "source": "iana",
      "extensions": ["rep"]
    },
    "application/vnd.cab-jscript": {"source": "iana"},
    "application/vnd.canon-cpdl": {"source": "iana"},
    "application/vnd.canon-lips": {"source": "iana"},
    "application/vnd.cendio.thinlinc.clientconf": {"source": "iana"},
    "application/vnd.century-systems.tcp_stream": {"source": "iana"},
    "application/vnd.chemdraw+xml": {
      "source": "iana",
      "extensions": ["cdxml"]
    },
    "application/vnd.chipnuts.karaoke-mmd": {
      "source": "iana",
      "extensions": ["mmd"]
    },
    "application/vnd.cinderella": {
      "source": "iana",
      "extensions": ["cdy"]
    },
    "application/vnd.cirpack.isdn-ext": {"source": "iana"},
    "application/vnd.citationstyles.style+xml": {"source": "iana"},
    "application/vnd.claymore": {
      "source": "iana",
      "extensions": ["cla"]
    },
    "application/vnd.cloanto.rp9": {
      "source": "iana",
      "extensions": ["rp9"]
    },
    "application/vnd.clonk.c4group": {
      "source": "iana",
      "extensions": ["c4g", "c4d", "c4f", "c4p", "c4u"]
    },
    "application/vnd.cluetrust.cartomobile-config": {
      "source": "iana",
      "extensions": ["c11amc"]
    },
    "application/vnd.cluetrust.cartomobile-config-pkg": {
      "source": "iana",
      "extensions": ["c11amz"]
    },
    "application/vnd.coffeescript": {"source": "iana"},
    "application/vnd.collection+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.collection.doc+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.collection.next+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.commerce-battelle": {"source": "iana"},
    "application/vnd.commonspace": {
      "source": "iana",
      "extensions": ["csp"]
    },
    "application/vnd.contact.cmsg": {
      "source": "iana",
      "extensions": ["cdbcmsg"]
    },
    "application/vnd.cosmocaller": {
      "source": "iana",
      "extensions": ["cmc"]
    },
    "application/vnd.crick.clicker": {
      "source": "iana",
      "extensions": ["clkx"]
    },
    "application/vnd.crick.clicker.keyboard": {
      "source": "iana",
      "extensions": ["clkk"]
    },
    "application/vnd.crick.clicker.palette": {
      "source": "iana",
      "extensions": ["clkp"]
    },
    "application/vnd.crick.clicker.template": {
      "source": "iana",
      "extensions": ["clkt"]
    },
    "application/vnd.crick.clicker.wordbank": {
      "source": "iana",
      "extensions": ["clkw"]
    },
    "application/vnd.criticaltools.wbs+xml": {
      "source": "iana",
      "extensions": ["wbs"]
    },
    "application/vnd.ctc-posml": {
      "source": "iana",
      "extensions": ["pml"]
    },
    "application/vnd.ctct.ws+xml": {"source": "iana"},
    "application/vnd.cups-pdf": {"source": "iana"},
    "application/vnd.cups-postscript": {"source": "iana"},
    "application/vnd.cups-ppd": {
      "source": "iana",
      "extensions": ["ppd"]
    },
    "application/vnd.cups-raster": {"source": "iana"},
    "application/vnd.cups-raw": {"source": "iana"},
    "application/vnd.curl": {"source": "iana"},
    "application/vnd.curl.car": {
      "source": "apache",
      "extensions": ["car"]
    },
    "application/vnd.curl.pcurl": {
      "source": "apache",
      "extensions": ["pcurl"]
    },
    "application/vnd.cyan.dean.root+xml": {"source": "iana"},
    "application/vnd.cybank": {"source": "iana"},
    "application/vnd.dart": {
      "source": "iana",
      "compressible": true,
      "extensions": ["dart"]
    },
    "application/vnd.data-vision.rdz": {
      "source": "iana",
      "extensions": ["rdz"]
    },
    "application/vnd.debian.binary-package": {"source": "iana"},
    "application/vnd.dece.data": {
      "source": "iana",
      "extensions": ["uvf", "uvvf", "uvd", "uvvd"]
    },
    "application/vnd.dece.ttml+xml": {
      "source": "iana",
      "extensions": ["uvt", "uvvt"]
    },
    "application/vnd.dece.unspecified": {
      "source": "iana",
      "extensions": ["uvx", "uvvx"]
    },
    "application/vnd.dece.zip": {
      "source": "iana",
      "extensions": ["uvz", "uvvz"]
    },
    "application/vnd.denovo.fcselayout-link": {
      "source": "iana",
      "extensions": ["fe_launch"]
    },
    "application/vnd.desmume-movie": {"source": "iana"},
    "application/vnd.dir-bi.plate-dl-nosuffix": {"source": "iana"},
    "application/vnd.dm.delegation+xml": {"source": "iana"},
    "application/vnd.dna": {
      "source": "iana",
      "extensions": ["dna"]
    },
    "application/vnd.document+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.dolby.mlp": {
      "source": "apache",
      "extensions": ["mlp"]
    },
    "application/vnd.dolby.mobile.1": {"source": "iana"},
    "application/vnd.dolby.mobile.2": {"source": "iana"},
    "application/vnd.doremir.scorecloud-binary-document": {"source": "iana"},
    "application/vnd.dpgraph": {
      "source": "iana",
      "extensions": ["dpg"]
    },
    "application/vnd.dreamfactory": {
      "source": "iana",
      "extensions": ["dfac"]
    },
    "application/vnd.drive+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.ds-keypoint": {
      "source": "apache",
      "extensions": ["kpxx"]
    },
    "application/vnd.dtg.local": {"source": "iana"},
    "application/vnd.dtg.local.flash": {"source": "iana"},
    "application/vnd.dtg.local.html": {"source": "iana"},
    "application/vnd.dvb.ait": {
      "source": "iana",
      "extensions": ["ait"]
    },
    "application/vnd.dvb.dvbj": {"source": "iana"},
    "application/vnd.dvb.esgcontainer": {"source": "iana"},
    "application/vnd.dvb.ipdcdftnotifaccess": {"source": "iana"},
    "application/vnd.dvb.ipdcesgaccess": {"source": "iana"},
    "application/vnd.dvb.ipdcesgaccess2": {"source": "iana"},
    "application/vnd.dvb.ipdcesgpdd": {"source": "iana"},
    "application/vnd.dvb.ipdcroaming": {"source": "iana"},
    "application/vnd.dvb.iptv.alfec-base": {"source": "iana"},
    "application/vnd.dvb.iptv.alfec-enhancement": {"source": "iana"},
    "application/vnd.dvb.notif-aggregate-root+xml": {"source": "iana"},
    "application/vnd.dvb.notif-container+xml": {"source": "iana"},
    "application/vnd.dvb.notif-generic+xml": {"source": "iana"},
    "application/vnd.dvb.notif-ia-msglist+xml": {"source": "iana"},
    "application/vnd.dvb.notif-ia-registration-request+xml": {"source": "iana"},
    "application/vnd.dvb.notif-ia-registration-response+xml": {"source": "iana"},
    "application/vnd.dvb.notif-init+xml": {"source": "iana"},
    "application/vnd.dvb.pfr": {"source": "iana"},
    "application/vnd.dvb.service": {
      "source": "iana",
      "extensions": ["svc"]
    },
    "application/vnd.dxr": {"source": "iana"},
    "application/vnd.dynageo": {
      "source": "iana",
      "extensions": ["geo"]
    },
    "application/vnd.dzr": {"source": "iana"},
    "application/vnd.easykaraoke.cdgdownload": {"source": "iana"},
    "application/vnd.ecdis-update": {"source": "iana"},
    "application/vnd.ecowin.chart": {
      "source": "iana",
      "extensions": ["mag"]
    },
    "application/vnd.ecowin.filerequest": {"source": "iana"},
    "application/vnd.ecowin.fileupdate": {"source": "iana"},
    "application/vnd.ecowin.series": {"source": "iana"},
    "application/vnd.ecowin.seriesrequest": {"source": "iana"},
    "application/vnd.ecowin.seriesupdate": {"source": "iana"},
    "application/vnd.emclient.accessrequest+xml": {"source": "iana"},
    "application/vnd.enliven": {
      "source": "iana",
      "extensions": ["nml"]
    },
    "application/vnd.enphase.envoy": {"source": "iana"},
    "application/vnd.eprints.data+xml": {"source": "iana"},
    "application/vnd.epson.esf": {
      "source": "iana",
      "extensions": ["esf"]
    },
    "application/vnd.epson.msf": {
      "source": "iana",
      "extensions": ["msf"]
    },
    "application/vnd.epson.quickanime": {
      "source": "iana",
      "extensions": ["qam"]
    },
    "application/vnd.epson.salt": {
      "source": "iana",
      "extensions": ["slt"]
    },
    "application/vnd.epson.ssf": {
      "source": "iana",
      "extensions": ["ssf"]
    },
    "application/vnd.ericsson.quickcall": {"source": "iana"},
    "application/vnd.eszigno3+xml": {
      "source": "iana",
      "extensions": ["es3", "et3"]
    },
    "application/vnd.etsi.aoc+xml": {"source": "iana"},
    "application/vnd.etsi.asic-e+zip": {"source": "iana"},
    "application/vnd.etsi.asic-s+zip": {"source": "iana"},
    "application/vnd.etsi.cug+xml": {"source": "iana"},
    "application/vnd.etsi.iptvcommand+xml": {"source": "iana"},
    "application/vnd.etsi.iptvdiscovery+xml": {"source": "iana"},
    "application/vnd.etsi.iptvprofile+xml": {"source": "iana"},
    "application/vnd.etsi.iptvsad-bc+xml": {"source": "iana"},
    "application/vnd.etsi.iptvsad-cod+xml": {"source": "iana"},
    "application/vnd.etsi.iptvsad-npvr+xml": {"source": "iana"},
    "application/vnd.etsi.iptvservice+xml": {"source": "iana"},
    "application/vnd.etsi.iptvsync+xml": {"source": "iana"},
    "application/vnd.etsi.iptvueprofile+xml": {"source": "iana"},
    "application/vnd.etsi.mcid+xml": {"source": "iana"},
    "application/vnd.etsi.mheg5": {"source": "iana"},
    "application/vnd.etsi.overload-control-policy-dataset+xml": {"source": "iana"},
    "application/vnd.etsi.pstn+xml": {"source": "iana"},
    "application/vnd.etsi.sci+xml": {"source": "iana"},
    "application/vnd.etsi.simservs+xml": {"source": "iana"},
    "application/vnd.etsi.timestamp-token": {"source": "iana"},
    "application/vnd.etsi.tsl+xml": {"source": "iana"},
    "application/vnd.etsi.tsl.der": {"source": "iana"},
    "application/vnd.eudora.data": {"source": "iana"},
    "application/vnd.ezpix-album": {
      "source": "iana",
      "extensions": ["ez2"]
    },
    "application/vnd.ezpix-package": {
      "source": "iana",
      "extensions": ["ez3"]
    },
    "application/vnd.f-secure.mobile": {"source": "iana"},
    "application/vnd.fastcopy-disk-image": {"source": "iana"},
    "application/vnd.fdf": {
      "source": "iana",
      "extensions": ["fdf"]
    },
    "application/vnd.fdsn.mseed": {
      "source": "iana",
      "extensions": ["mseed"]
    },
    "application/vnd.fdsn.seed": {
      "source": "iana",
      "extensions": ["seed", "dataless"]
    },
    "application/vnd.ffsns": {"source": "iana"},
    "application/vnd.fints": {"source": "iana"},
    "application/vnd.firemonkeys.cloudcell": {"source": "iana"},
    "application/vnd.flographit": {
      "source": "iana",
      "extensions": ["gph"]
    },
    "application/vnd.fluxtime.clip": {
      "source": "iana",
      "extensions": ["ftc"]
    },
    "application/vnd.font-fontforge-sfd": {"source": "iana"},
    "application/vnd.framemaker": {
      "source": "iana",
      "extensions": ["fm", "frame", "maker", "book"]
    },
    "application/vnd.frogans.fnc": {
      "source": "iana",
      "extensions": ["fnc"]
    },
    "application/vnd.frogans.ltf": {
      "source": "iana",
      "extensions": ["ltf"]
    },
    "application/vnd.fsc.weblaunch": {
      "source": "iana",
      "extensions": ["fsc"]
    },
    "application/vnd.fujitsu.oasys": {
      "source": "iana",
      "extensions": ["oas"]
    },
    "application/vnd.fujitsu.oasys2": {
      "source": "iana",
      "extensions": ["oa2"]
    },
    "application/vnd.fujitsu.oasys3": {
      "source": "iana",
      "extensions": ["oa3"]
    },
    "application/vnd.fujitsu.oasysgp": {
      "source": "iana",
      "extensions": ["fg5"]
    },
    "application/vnd.fujitsu.oasysprs": {
      "source": "iana",
      "extensions": ["bh2"]
    },
    "application/vnd.fujixerox.art-ex": {"source": "iana"},
    "application/vnd.fujixerox.art4": {"source": "iana"},
    "application/vnd.fujixerox.ddd": {
      "source": "iana",
      "extensions": ["ddd"]
    },
    "application/vnd.fujixerox.docuworks": {
      "source": "iana",
      "extensions": ["xdw"]
    },
    "application/vnd.fujixerox.docuworks.binder": {
      "source": "iana",
      "extensions": ["xbd"]
    },
    "application/vnd.fujixerox.docuworks.container": {"source": "iana"},
    "application/vnd.fujixerox.hbpl": {"source": "iana"},
    "application/vnd.fut-misnet": {"source": "iana"},
    "application/vnd.fuzzysheet": {
      "source": "iana",
      "extensions": ["fzs"]
    },
    "application/vnd.genomatix.tuxedo": {
      "source": "iana",
      "extensions": ["txd"]
    },
    "application/vnd.geo+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.geocube+xml": {"source": "iana"},
    "application/vnd.geogebra.file": {
      "source": "iana",
      "extensions": ["ggb"]
    },
    "application/vnd.geogebra.tool": {
      "source": "iana",
      "extensions": ["ggt"]
    },
    "application/vnd.geometry-explorer": {
      "source": "iana",
      "extensions": ["gex", "gre"]
    },
    "application/vnd.geonext": {
      "source": "iana",
      "extensions": ["gxt"]
    },
    "application/vnd.geoplan": {
      "source": "iana",
      "extensions": ["g2w"]
    },
    "application/vnd.geospace": {
      "source": "iana",
      "extensions": ["g3w"]
    },
    "application/vnd.gerber": {"source": "iana"},
    "application/vnd.globalplatform.card-content-mgt": {"source": "iana"},
    "application/vnd.globalplatform.card-content-mgt-response": {"source": "iana"},
    "application/vnd.gmx": {
      "source": "iana",
      "extensions": ["gmx"]
    },
    "application/vnd.google-earth.kml+xml": {
      "source": "iana",
      "compressible": true,
      "extensions": ["kml"]
    },
    "application/vnd.google-earth.kmz": {
      "source": "iana",
      "compressible": false,
      "extensions": ["kmz"]
    },
    "application/vnd.gov.sk.e-form+xml": {"source": "iana"},
    "application/vnd.gov.sk.e-form+zip": {"source": "iana"},
    "application/vnd.gov.sk.xmldatacontainer+xml": {"source": "iana"},
    "application/vnd.grafeq": {
      "source": "iana",
      "extensions": ["gqf", "gqs"]
    },
    "application/vnd.gridmp": {"source": "iana"},
    "application/vnd.groove-account": {
      "source": "iana",
      "extensions": ["gac"]
    },
    "application/vnd.groove-help": {
      "source": "iana",
      "extensions": ["ghf"]
    },
    "application/vnd.groove-identity-message": {
      "source": "iana",
      "extensions": ["gim"]
    },
    "application/vnd.groove-injector": {
      "source": "iana",
      "extensions": ["grv"]
    },
    "application/vnd.groove-tool-message": {
      "source": "iana",
      "extensions": ["gtm"]
    },
    "application/vnd.groove-tool-template": {
      "source": "iana",
      "extensions": ["tpl"]
    },
    "application/vnd.groove-vcard": {
      "source": "iana",
      "extensions": ["vcg"]
    },
    "application/vnd.hal+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.hal+xml": {
      "source": "iana",
      "extensions": ["hal"]
    },
    "application/vnd.handheld-entertainment+xml": {
      "source": "iana",
      "extensions": ["zmm"]
    },
    "application/vnd.hbci": {
      "source": "iana",
      "extensions": ["hbci"]
    },
    "application/vnd.hcl-bireports": {"source": "iana"},
    "application/vnd.heroku+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.hhe.lesson-player": {
      "source": "iana",
      "extensions": ["les"]
    },
    "application/vnd.hp-hpgl": {
      "source": "iana",
      "extensions": ["hpgl"]
    },
    "application/vnd.hp-hpid": {
      "source": "iana",
      "extensions": ["hpid"]
    },
    "application/vnd.hp-hps": {
      "source": "iana",
      "extensions": ["hps"]
    },
    "application/vnd.hp-jlyt": {
      "source": "iana",
      "extensions": ["jlt"]
    },
    "application/vnd.hp-pcl": {
      "source": "iana",
      "extensions": ["pcl"]
    },
    "application/vnd.hp-pclxl": {
      "source": "iana",
      "extensions": ["pclxl"]
    },
    "application/vnd.httphone": {"source": "iana"},
    "application/vnd.hydrostatix.sof-data": {
      "source": "iana",
      "extensions": ["sfd-hdstx"]
    },
    "application/vnd.hyperdrive+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.hzn-3d-crossword": {"source": "iana"},
    "application/vnd.ibm.afplinedata": {"source": "iana"},
    "application/vnd.ibm.electronic-media": {"source": "iana"},
    "application/vnd.ibm.minipay": {
      "source": "iana",
      "extensions": ["mpy"]
    },
    "application/vnd.ibm.modcap": {
      "source": "iana",
      "extensions": ["afp", "listafp", "list3820"]
    },
    "application/vnd.ibm.rights-management": {
      "source": "iana",
      "extensions": ["irm"]
    },
    "application/vnd.ibm.secure-container": {
      "source": "iana",
      "extensions": ["sc"]
    },
    "application/vnd.iccprofile": {
      "source": "iana",
      "extensions": ["icc", "icm"]
    },
    "application/vnd.ieee.1905": {"source": "iana"},
    "application/vnd.igloader": {
      "source": "iana",
      "extensions": ["igl"]
    },
    "application/vnd.immervision-ivp": {
      "source": "iana",
      "extensions": ["ivp"]
    },
    "application/vnd.immervision-ivu": {
      "source": "iana",
      "extensions": ["ivu"]
    },
    "application/vnd.ims.imsccv1p1": {"source": "iana"},
    "application/vnd.ims.imsccv1p2": {"source": "iana"},
    "application/vnd.ims.imsccv1p3": {"source": "iana"},
    "application/vnd.ims.lis.v2.result+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.ims.lti.v2.toolproxy+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.ims.lti.v2.toolproxy.id+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.ims.lti.v2.toolsettings+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.ims.lti.v2.toolsettings.simple+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.informedcontrol.rms+xml": {"source": "iana"},
    "application/vnd.informix-visionary": {"source": "iana"},
    "application/vnd.infotech.project": {"source": "iana"},
    "application/vnd.infotech.project+xml": {"source": "iana"},
    "application/vnd.innopath.wamp.notification": {"source": "iana"},
    "application/vnd.insors.igm": {
      "source": "iana",
      "extensions": ["igm"]
    },
    "application/vnd.intercon.formnet": {
      "source": "iana",
      "extensions": ["xpw", "xpx"]
    },
    "application/vnd.intergeo": {
      "source": "iana",
      "extensions": ["i2g"]
    },
    "application/vnd.intertrust.digibox": {"source": "iana"},
    "application/vnd.intertrust.nncp": {"source": "iana"},
    "application/vnd.intu.qbo": {
      "source": "iana",
      "extensions": ["qbo"]
    },
    "application/vnd.intu.qfx": {
      "source": "iana",
      "extensions": ["qfx"]
    },
    "application/vnd.iptc.g2.catalogitem+xml": {"source": "iana"},
    "application/vnd.iptc.g2.conceptitem+xml": {"source": "iana"},
    "application/vnd.iptc.g2.knowledgeitem+xml": {"source": "iana"},
    "application/vnd.iptc.g2.newsitem+xml": {"source": "iana"},
    "application/vnd.iptc.g2.newsmessage+xml": {"source": "iana"},
    "application/vnd.iptc.g2.packageitem+xml": {"source": "iana"},
    "application/vnd.iptc.g2.planningitem+xml": {"source": "iana"},
    "application/vnd.ipunplugged.rcprofile": {
      "source": "iana",
      "extensions": ["rcprofile"]
    },
    "application/vnd.irepository.package+xml": {
      "source": "iana",
      "extensions": ["irp"]
    },
    "application/vnd.is-xpr": {
      "source": "iana",
      "extensions": ["xpr"]
    },
    "application/vnd.isac.fcs": {
      "source": "iana",
      "extensions": ["fcs"]
    },
    "application/vnd.jam": {
      "source": "iana",
      "extensions": ["jam"]
    },
    "application/vnd.japannet-directory-service": {"source": "iana"},
    "application/vnd.japannet-jpnstore-wakeup": {"source": "iana"},
    "application/vnd.japannet-payment-wakeup": {"source": "iana"},
    "application/vnd.japannet-registration": {"source": "iana"},
    "application/vnd.japannet-registration-wakeup": {"source": "iana"},
    "application/vnd.japannet-setstore-wakeup": {"source": "iana"},
    "application/vnd.japannet-verification": {"source": "iana"},
    "application/vnd.japannet-verification-wakeup": {"source": "iana"},
    "application/vnd.jcp.javame.midlet-rms": {
      "source": "iana",
      "extensions": ["rms"]
    },
    "application/vnd.jisp": {
      "source": "iana",
      "extensions": ["jisp"]
    },
    "application/vnd.joost.joda-archive": {
      "source": "iana",
      "extensions": ["joda"]
    },
    "application/vnd.jsk.isdn-ngn": {"source": "iana"},
    "application/vnd.kahootz": {
      "source": "iana",
      "extensions": ["ktz", "ktr"]
    },
    "application/vnd.kde.karbon": {
      "source": "iana",
      "extensions": ["karbon"]
    },
    "application/vnd.kde.kchart": {
      "source": "iana",
      "extensions": ["chrt"]
    },
    "application/vnd.kde.kformula": {
      "source": "iana",
      "extensions": ["kfo"]
    },
    "application/vnd.kde.kivio": {
      "source": "iana",
      "extensions": ["flw"]
    },
    "application/vnd.kde.kontour": {
      "source": "iana",
      "extensions": ["kon"]
    },
    "application/vnd.kde.kpresenter": {
      "source": "iana",
      "extensions": ["kpr", "kpt"]
    },
    "application/vnd.kde.kspread": {
      "source": "iana",
      "extensions": ["ksp"]
    },
    "application/vnd.kde.kword": {
      "source": "iana",
      "extensions": ["kwd", "kwt"]
    },
    "application/vnd.kenameaapp": {
      "source": "iana",
      "extensions": ["htke"]
    },
    "application/vnd.kidspiration": {
      "source": "iana",
      "extensions": ["kia"]
    },
    "application/vnd.kinar": {
      "source": "iana",
      "extensions": ["kne", "knp"]
    },
    "application/vnd.koan": {
      "source": "iana",
      "extensions": ["skp", "skd", "skt", "skm"]
    },
    "application/vnd.kodak-descriptor": {
      "source": "iana",
      "extensions": ["sse"]
    },
    "application/vnd.las.las+xml": {
      "source": "iana",
      "extensions": ["lasxml"]
    },
    "application/vnd.liberty-request+xml": {"source": "iana"},
    "application/vnd.llamagraphics.life-balance.desktop": {
      "source": "iana",
      "extensions": ["lbd"]
    },
    "application/vnd.llamagraphics.life-balance.exchange+xml": {
      "source": "iana",
      "extensions": ["lbe"]
    },
    "application/vnd.lotus-1-2-3": {
      "source": "iana",
      "extensions": ["123"]
    },
    "application/vnd.lotus-approach": {
      "source": "iana",
      "extensions": ["apr"]
    },
    "application/vnd.lotus-freelance": {
      "source": "iana",
      "extensions": ["pre"]
    },
    "application/vnd.lotus-notes": {
      "source": "iana",
      "extensions": ["nsf"]
    },
    "application/vnd.lotus-organizer": {
      "source": "iana",
      "extensions": ["org"]
    },
    "application/vnd.lotus-screencam": {
      "source": "iana",
      "extensions": ["scm"]
    },
    "application/vnd.lotus-wordpro": {
      "source": "iana",
      "extensions": ["lwp"]
    },
    "application/vnd.macports.portpkg": {
      "source": "iana",
      "extensions": ["portpkg"]
    },
    "application/vnd.marlin.drm.actiontoken+xml": {"source": "iana"},
    "application/vnd.marlin.drm.conftoken+xml": {"source": "iana"},
    "application/vnd.marlin.drm.license+xml": {"source": "iana"},
    "application/vnd.marlin.drm.mdcf": {"source": "iana"},
    "application/vnd.mason+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.maxmind.maxmind-db": {"source": "iana"},
    "application/vnd.mcd": {
      "source": "iana",
      "extensions": ["mcd"]
    },
    "application/vnd.medcalcdata": {
      "source": "iana",
      "extensions": ["mc1"]
    },
    "application/vnd.mediastation.cdkey": {
      "source": "iana",
      "extensions": ["cdkey"]
    },
    "application/vnd.meridian-slingshot": {"source": "iana"},
    "application/vnd.mfer": {
      "source": "iana",
      "extensions": ["mwf"]
    },
    "application/vnd.mfmp": {
      "source": "iana",
      "extensions": ["mfm"]
    },
    "application/vnd.micro+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.micrografx.flo": {
      "source": "iana",
      "extensions": ["flo"]
    },
    "application/vnd.micrografx.igx": {
      "source": "iana",
      "extensions": ["igx"]
    },
    "application/vnd.microsoft.portable-executable": {"source": "iana"},
    "application/vnd.miele+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.mif": {
      "source": "iana",
      "extensions": ["mif"]
    },
    "application/vnd.minisoft-hp3000-save": {"source": "iana"},
    "application/vnd.mitsubishi.misty-guard.trustweb": {"source": "iana"},
    "application/vnd.mobius.daf": {
      "source": "iana",
      "extensions": ["daf"]
    },
    "application/vnd.mobius.dis": {
      "source": "iana",
      "extensions": ["dis"]
    },
    "application/vnd.mobius.mbk": {
      "source": "iana",
      "extensions": ["mbk"]
    },
    "application/vnd.mobius.mqy": {
      "source": "iana",
      "extensions": ["mqy"]
    },
    "application/vnd.mobius.msl": {
      "source": "iana",
      "extensions": ["msl"]
    },
    "application/vnd.mobius.plc": {
      "source": "iana",
      "extensions": ["plc"]
    },
    "application/vnd.mobius.txf": {
      "source": "iana",
      "extensions": ["txf"]
    },
    "application/vnd.mophun.application": {
      "source": "iana",
      "extensions": ["mpn"]
    },
    "application/vnd.mophun.certificate": {
      "source": "iana",
      "extensions": ["mpc"]
    },
    "application/vnd.motorola.flexsuite": {"source": "iana"},
    "application/vnd.motorola.flexsuite.adsi": {"source": "iana"},
    "application/vnd.motorola.flexsuite.fis": {"source": "iana"},
    "application/vnd.motorola.flexsuite.gotap": {"source": "iana"},
    "application/vnd.motorola.flexsuite.kmr": {"source": "iana"},
    "application/vnd.motorola.flexsuite.ttc": {"source": "iana"},
    "application/vnd.motorola.flexsuite.wem": {"source": "iana"},
    "application/vnd.motorola.iprm": {"source": "iana"},
    "application/vnd.mozilla.xul+xml": {
      "source": "iana",
      "compressible": true,
      "extensions": ["xul"]
    },
    "application/vnd.ms-3mfdocument": {"source": "iana"},
    "application/vnd.ms-artgalry": {
      "source": "iana",
      "extensions": ["cil"]
    },
    "application/vnd.ms-asf": {"source": "iana"},
    "application/vnd.ms-cab-compressed": {
      "source": "iana",
      "extensions": ["cab"]
    },
    "application/vnd.ms-color.iccprofile": {"source": "apache"},
    "application/vnd.ms-excel": {
      "source": "iana",
      "compressible": false,
      "extensions": ["xls", "xlm", "xla", "xlc", "xlt", "xlw"]
    },
    "application/vnd.ms-excel.addin.macroenabled.12": {
      "source": "iana",
      "extensions": ["xlam"]
    },
    "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
      "source": "iana",
      "extensions": ["xlsb"]
    },
    "application/vnd.ms-excel.sheet.macroenabled.12": {
      "source": "iana",
      "extensions": ["xlsm"]
    },
    "application/vnd.ms-excel.template.macroenabled.12": {
      "source": "iana",
      "extensions": ["xltm"]
    },
    "application/vnd.ms-fontobject": {
      "source": "iana",
      "compressible": true,
      "extensions": ["eot"]
    },
    "application/vnd.ms-htmlhelp": {
      "source": "iana",
      "extensions": ["chm"]
    },
    "application/vnd.ms-ims": {
      "source": "iana",
      "extensions": ["ims"]
    },
    "application/vnd.ms-lrm": {
      "source": "iana",
      "extensions": ["lrm"]
    },
    "application/vnd.ms-office.activex+xml": {"source": "iana"},
    "application/vnd.ms-officetheme": {
      "source": "iana",
      "extensions": ["thmx"]
    },
    "application/vnd.ms-opentype": {
      "source": "apache",
      "compressible": true
    },
    "application/vnd.ms-package.obfuscated-opentype": {"source": "apache"},
    "application/vnd.ms-pki.seccat": {
      "source": "apache",
      "extensions": ["cat"]
    },
    "application/vnd.ms-pki.stl": {
      "source": "apache",
      "extensions": ["stl"]
    },
    "application/vnd.ms-playready.initiator+xml": {"source": "iana"},
    "application/vnd.ms-powerpoint": {
      "source": "iana",
      "compressible": false,
      "extensions": ["ppt", "pps", "pot"]
    },
    "application/vnd.ms-powerpoint.addin.macroenabled.12": {
      "source": "iana",
      "extensions": ["ppam"]
    },
    "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
      "source": "iana",
      "extensions": ["pptm"]
    },
    "application/vnd.ms-powerpoint.slide.macroenabled.12": {
      "source": "iana",
      "extensions": ["sldm"]
    },
    "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
      "source": "iana",
      "extensions": ["ppsm"]
    },
    "application/vnd.ms-powerpoint.template.macroenabled.12": {
      "source": "iana",
      "extensions": ["potm"]
    },
    "application/vnd.ms-printing.printticket+xml": {"source": "apache"},
    "application/vnd.ms-project": {
      "source": "iana",
      "extensions": ["mpp", "mpt"]
    },
    "application/vnd.ms-tnef": {"source": "iana"},
    "application/vnd.ms-windows.printerpairing": {"source": "iana"},
    "application/vnd.ms-wmdrm.lic-chlg-req": {"source": "iana"},
    "application/vnd.ms-wmdrm.lic-resp": {"source": "iana"},
    "application/vnd.ms-wmdrm.meter-chlg-req": {"source": "iana"},
    "application/vnd.ms-wmdrm.meter-resp": {"source": "iana"},
    "application/vnd.ms-word.document.macroenabled.12": {
      "source": "iana",
      "extensions": ["docm"]
    },
    "application/vnd.ms-word.template.macroenabled.12": {
      "source": "iana",
      "extensions": ["dotm"]
    },
    "application/vnd.ms-works": {
      "source": "iana",
      "extensions": ["wps", "wks", "wcm", "wdb"]
    },
    "application/vnd.ms-wpl": {
      "source": "iana",
      "extensions": ["wpl"]
    },
    "application/vnd.ms-xpsdocument": {
      "source": "iana",
      "compressible": false,
      "extensions": ["xps"]
    },
    "application/vnd.msa-disk-image": {"source": "iana"},
    "application/vnd.mseq": {
      "source": "iana",
      "extensions": ["mseq"]
    },
    "application/vnd.msign": {"source": "iana"},
    "application/vnd.multiad.creator": {"source": "iana"},
    "application/vnd.multiad.creator.cif": {"source": "iana"},
    "application/vnd.music-niff": {"source": "iana"},
    "application/vnd.musician": {
      "source": "iana",
      "extensions": ["mus"]
    },
    "application/vnd.muvee.style": {
      "source": "iana",
      "extensions": ["msty"]
    },
    "application/vnd.mynfc": {
      "source": "iana",
      "extensions": ["taglet"]
    },
    "application/vnd.ncd.control": {"source": "iana"},
    "application/vnd.ncd.reference": {"source": "iana"},
    "application/vnd.nervana": {"source": "iana"},
    "application/vnd.netfpx": {"source": "iana"},
    "application/vnd.neurolanguage.nlu": {
      "source": "iana",
      "extensions": ["nlu"]
    },
    "application/vnd.nintendo.nitro.rom": {"source": "iana"},
    "application/vnd.nintendo.snes.rom": {"source": "iana"},
    "application/vnd.nitf": {
      "source": "iana",
      "extensions": ["ntf", "nitf"]
    },
    "application/vnd.noblenet-directory": {
      "source": "iana",
      "extensions": ["nnd"]
    },
    "application/vnd.noblenet-sealer": {
      "source": "iana",
      "extensions": ["nns"]
    },
    "application/vnd.noblenet-web": {
      "source": "iana",
      "extensions": ["nnw"]
    },
    "application/vnd.nokia.catalogs": {"source": "iana"},
    "application/vnd.nokia.conml+wbxml": {"source": "iana"},
    "application/vnd.nokia.conml+xml": {"source": "iana"},
    "application/vnd.nokia.iptv.config+xml": {"source": "iana"},
    "application/vnd.nokia.isds-radio-presets": {"source": "iana"},
    "application/vnd.nokia.landmark+wbxml": {"source": "iana"},
    "application/vnd.nokia.landmark+xml": {"source": "iana"},
    "application/vnd.nokia.landmarkcollection+xml": {"source": "iana"},
    "application/vnd.nokia.n-gage.ac+xml": {"source": "iana"},
    "application/vnd.nokia.n-gage.data": {
      "source": "iana",
      "extensions": ["ngdat"]
    },
    "application/vnd.nokia.n-gage.symbian.install": {
      "source": "iana",
      "extensions": ["n-gage"]
    },
    "application/vnd.nokia.ncd": {"source": "iana"},
    "application/vnd.nokia.pcd+wbxml": {"source": "iana"},
    "application/vnd.nokia.pcd+xml": {"source": "iana"},
    "application/vnd.nokia.radio-preset": {
      "source": "iana",
      "extensions": ["rpst"]
    },
    "application/vnd.nokia.radio-presets": {
      "source": "iana",
      "extensions": ["rpss"]
    },
    "application/vnd.novadigm.edm": {
      "source": "iana",
      "extensions": ["edm"]
    },
    "application/vnd.novadigm.edx": {
      "source": "iana",
      "extensions": ["edx"]
    },
    "application/vnd.novadigm.ext": {
      "source": "iana",
      "extensions": ["ext"]
    },
    "application/vnd.ntt-local.content-share": {"source": "iana"},
    "application/vnd.ntt-local.file-transfer": {"source": "iana"},
    "application/vnd.ntt-local.ogw_remote-access": {"source": "iana"},
    "application/vnd.ntt-local.sip-ta_remote": {"source": "iana"},
    "application/vnd.ntt-local.sip-ta_tcp_stream": {"source": "iana"},
    "application/vnd.oasis.opendocument.chart": {
      "source": "iana",
      "extensions": ["odc"]
    },
    "application/vnd.oasis.opendocument.chart-template": {
      "source": "iana",
      "extensions": ["otc"]
    },
    "application/vnd.oasis.opendocument.database": {
      "source": "iana",
      "extensions": ["odb"]
    },
    "application/vnd.oasis.opendocument.formula": {
      "source": "iana",
      "extensions": ["odf"]
    },
    "application/vnd.oasis.opendocument.formula-template": {
      "source": "iana",
      "extensions": ["odft"]
    },
    "application/vnd.oasis.opendocument.graphics": {
      "source": "iana",
      "compressible": false,
      "extensions": ["odg"]
    },
    "application/vnd.oasis.opendocument.graphics-template": {
      "source": "iana",
      "extensions": ["otg"]
    },
    "application/vnd.oasis.opendocument.image": {
      "source": "iana",
      "extensions": ["odi"]
    },
    "application/vnd.oasis.opendocument.image-template": {
      "source": "iana",
      "extensions": ["oti"]
    },
    "application/vnd.oasis.opendocument.presentation": {
      "source": "iana",
      "compressible": false,
      "extensions": ["odp"]
    },
    "application/vnd.oasis.opendocument.presentation-template": {
      "source": "iana",
      "extensions": ["otp"]
    },
    "application/vnd.oasis.opendocument.spreadsheet": {
      "source": "iana",
      "compressible": false,
      "extensions": ["ods"]
    },
    "application/vnd.oasis.opendocument.spreadsheet-template": {
      "source": "iana",
      "extensions": ["ots"]
    },
    "application/vnd.oasis.opendocument.text": {
      "source": "iana",
      "compressible": false,
      "extensions": ["odt"]
    },
    "application/vnd.oasis.opendocument.text-master": {
      "source": "iana",
      "extensions": ["odm"]
    },
    "application/vnd.oasis.opendocument.text-template": {
      "source": "iana",
      "extensions": ["ott"]
    },
    "application/vnd.oasis.opendocument.text-web": {
      "source": "iana",
      "extensions": ["oth"]
    },
    "application/vnd.obn": {"source": "iana"},
    "application/vnd.oftn.l10n+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.oipf.contentaccessdownload+xml": {"source": "iana"},
    "application/vnd.oipf.contentaccessstreaming+xml": {"source": "iana"},
    "application/vnd.oipf.cspg-hexbinary": {"source": "iana"},
    "application/vnd.oipf.dae.svg+xml": {"source": "iana"},
    "application/vnd.oipf.dae.xhtml+xml": {"source": "iana"},
    "application/vnd.oipf.mippvcontrolmessage+xml": {"source": "iana"},
    "application/vnd.oipf.pae.gem": {"source": "iana"},
    "application/vnd.oipf.spdiscovery+xml": {"source": "iana"},
    "application/vnd.oipf.spdlist+xml": {"source": "iana"},
    "application/vnd.oipf.ueprofile+xml": {"source": "iana"},
    "application/vnd.oipf.userprofile+xml": {"source": "iana"},
    "application/vnd.olpc-sugar": {
      "source": "iana",
      "extensions": ["xo"]
    },
    "application/vnd.oma-scws-config": {"source": "iana"},
    "application/vnd.oma-scws-http-request": {"source": "iana"},
    "application/vnd.oma-scws-http-response": {"source": "iana"},
    "application/vnd.oma.bcast.associated-procedure-parameter+xml": {"source": "iana"},
    "application/vnd.oma.bcast.drm-trigger+xml": {"source": "iana"},
    "application/vnd.oma.bcast.imd+xml": {"source": "iana"},
    "application/vnd.oma.bcast.ltkm": {"source": "iana"},
    "application/vnd.oma.bcast.notification+xml": {"source": "iana"},
    "application/vnd.oma.bcast.provisioningtrigger": {"source": "iana"},
    "application/vnd.oma.bcast.sgboot": {"source": "iana"},
    "application/vnd.oma.bcast.sgdd+xml": {"source": "iana"},
    "application/vnd.oma.bcast.sgdu": {"source": "iana"},
    "application/vnd.oma.bcast.simple-symbol-container": {"source": "iana"},
    "application/vnd.oma.bcast.smartcard-trigger+xml": {"source": "iana"},
    "application/vnd.oma.bcast.sprov+xml": {"source": "iana"},
    "application/vnd.oma.bcast.stkm": {"source": "iana"},
    "application/vnd.oma.cab-address-book+xml": {"source": "iana"},
    "application/vnd.oma.cab-feature-handler+xml": {"source": "iana"},
    "application/vnd.oma.cab-pcc+xml": {"source": "iana"},
    "application/vnd.oma.cab-subs-invite+xml": {"source": "iana"},
    "application/vnd.oma.cab-user-prefs+xml": {"source": "iana"},
    "application/vnd.oma.dcd": {"source": "iana"},
    "application/vnd.oma.dcdc": {"source": "iana"},
    "application/vnd.oma.dd2+xml": {
      "source": "iana",
      "extensions": ["dd2"]
    },
    "application/vnd.oma.drm.risd+xml": {"source": "iana"},
    "application/vnd.oma.group-usage-list+xml": {"source": "iana"},
    "application/vnd.oma.pal+xml": {"source": "iana"},
    "application/vnd.oma.poc.detailed-progress-report+xml": {"source": "iana"},
    "application/vnd.oma.poc.final-report+xml": {"source": "iana"},
    "application/vnd.oma.poc.groups+xml": {"source": "iana"},
    "application/vnd.oma.poc.invocation-descriptor+xml": {"source": "iana"},
    "application/vnd.oma.poc.optimized-progress-report+xml": {"source": "iana"},
    "application/vnd.oma.push": {"source": "iana"},
    "application/vnd.oma.scidm.messages+xml": {"source": "iana"},
    "application/vnd.oma.xcap-directory+xml": {"source": "iana"},
    "application/vnd.omads-email+xml": {"source": "iana"},
    "application/vnd.omads-file+xml": {"source": "iana"},
    "application/vnd.omads-folder+xml": {"source": "iana"},
    "application/vnd.omaloc-supl-init": {"source": "iana"},
    "application/vnd.openblox.game+xml": {"source": "iana"},
    "application/vnd.openblox.game-binary": {"source": "iana"},
    "application/vnd.openeye.oeb": {"source": "iana"},
    "application/vnd.openofficeorg.extension": {
      "source": "apache",
      "extensions": ["oxt"]
    },
    "application/vnd.openxmlformats-officedocument.custom-properties+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.drawing+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.extended-properties+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.presentationml-template": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
      "source": "iana",
      "compressible": false,
      "extensions": ["pptx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.presentationml.slide": {
      "source": "iana",
      "extensions": ["sldx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
      "source": "iana",
      "extensions": ["ppsx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.presentationml.template": {
      "source": "apache",
      "extensions": ["potx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.spreadsheetml-template": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
      "source": "iana",
      "compressible": false,
      "extensions": ["xlsx"]
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
      "source": "apache",
      "extensions": ["xltx"]
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.theme+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.themeoverride+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.vmldrawing": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.wordprocessingml-template": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
      "source": "iana",
      "compressible": false,
      "extensions": ["docx"]
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
      "source": "apache",
      "extensions": ["dotx"]
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {"source": "iana"},
    "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {"source": "iana"},
    "application/vnd.openxmlformats-package.core-properties+xml": {"source": "iana"},
    "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {"source": "iana"},
    "application/vnd.openxmlformats-package.relationships+xml": {"source": "iana"},
    "application/vnd.oracle.resource+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.orange.indata": {"source": "iana"},
    "application/vnd.osa.netdeploy": {"source": "iana"},
    "application/vnd.osgeo.mapguide.package": {
      "source": "iana",
      "extensions": ["mgp"]
    },
    "application/vnd.osgi.bundle": {"source": "iana"},
    "application/vnd.osgi.dp": {
      "source": "iana",
      "extensions": ["dp"]
    },
    "application/vnd.osgi.subsystem": {
      "source": "iana",
      "extensions": ["esa"]
    },
    "application/vnd.otps.ct-kip+xml": {"source": "iana"},
    "application/vnd.palm": {
      "source": "iana",
      "extensions": ["pdb", "pqa", "oprc"]
    },
    "application/vnd.panoply": {"source": "iana"},
    "application/vnd.paos+xml": {"source": "iana"},
    "application/vnd.paos.xml": {"source": "apache"},
    "application/vnd.pawaafile": {
      "source": "iana",
      "extensions": ["paw"]
    },
    "application/vnd.pcos": {"source": "iana"},
    "application/vnd.pg.format": {
      "source": "iana",
      "extensions": ["str"]
    },
    "application/vnd.pg.osasli": {
      "source": "iana",
      "extensions": ["ei6"]
    },
    "application/vnd.piaccess.application-licence": {"source": "iana"},
    "application/vnd.picsel": {
      "source": "iana",
      "extensions": ["efif"]
    },
    "application/vnd.pmi.widget": {
      "source": "iana",
      "extensions": ["wg"]
    },
    "application/vnd.poc.group-advertisement+xml": {"source": "iana"},
    "application/vnd.pocketlearn": {
      "source": "iana",
      "extensions": ["plf"]
    },
    "application/vnd.powerbuilder6": {
      "source": "iana",
      "extensions": ["pbd"]
    },
    "application/vnd.powerbuilder6-s": {"source": "iana"},
    "application/vnd.powerbuilder7": {"source": "iana"},
    "application/vnd.powerbuilder7-s": {"source": "iana"},
    "application/vnd.powerbuilder75": {"source": "iana"},
    "application/vnd.powerbuilder75-s": {"source": "iana"},
    "application/vnd.preminet": {"source": "iana"},
    "application/vnd.previewsystems.box": {
      "source": "iana",
      "extensions": ["box"]
    },
    "application/vnd.proteus.magazine": {
      "source": "iana",
      "extensions": ["mgz"]
    },
    "application/vnd.publishare-delta-tree": {
      "source": "iana",
      "extensions": ["qps"]
    },
    "application/vnd.pvi.ptid1": {
      "source": "iana",
      "extensions": ["ptid"]
    },
    "application/vnd.pwg-multiplexed": {"source": "iana"},
    "application/vnd.pwg-xhtml-print+xml": {"source": "iana"},
    "application/vnd.qualcomm.brew-app-res": {"source": "iana"},
    "application/vnd.quark.quarkxpress": {
      "source": "iana",
      "extensions": ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"]
    },
    "application/vnd.quobject-quoxdocument": {"source": "iana"},
    "application/vnd.radisys.moml+xml": {"source": "iana"},
    "application/vnd.radisys.msml+xml": {"source": "iana"},
    "application/vnd.radisys.msml-audit+xml": {"source": "iana"},
    "application/vnd.radisys.msml-audit-conf+xml": {"source": "iana"},
    "application/vnd.radisys.msml-audit-conn+xml": {"source": "iana"},
    "application/vnd.radisys.msml-audit-dialog+xml": {"source": "iana"},
    "application/vnd.radisys.msml-audit-stream+xml": {"source": "iana"},
    "application/vnd.radisys.msml-conf+xml": {"source": "iana"},
    "application/vnd.radisys.msml-dialog+xml": {"source": "iana"},
    "application/vnd.radisys.msml-dialog-base+xml": {"source": "iana"},
    "application/vnd.radisys.msml-dialog-fax-detect+xml": {"source": "iana"},
    "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {"source": "iana"},
    "application/vnd.radisys.msml-dialog-group+xml": {"source": "iana"},
    "application/vnd.radisys.msml-dialog-speech+xml": {"source": "iana"},
    "application/vnd.radisys.msml-dialog-transform+xml": {"source": "iana"},
    "application/vnd.rainstor.data": {"source": "iana"},
    "application/vnd.rapid": {"source": "iana"},
    "application/vnd.realvnc.bed": {
      "source": "iana",
      "extensions": ["bed"]
    },
    "application/vnd.recordare.musicxml": {
      "source": "iana",
      "extensions": ["mxl"]
    },
    "application/vnd.recordare.musicxml+xml": {
      "source": "iana",
      "extensions": ["musicxml"]
    },
    "application/vnd.renlearn.rlprint": {"source": "iana"},
    "application/vnd.rig.cryptonote": {
      "source": "iana",
      "extensions": ["cryptonote"]
    },
    "application/vnd.rim.cod": {
      "source": "apache",
      "extensions": ["cod"]
    },
    "application/vnd.rn-realmedia": {
      "source": "apache",
      "extensions": ["rm"]
    },
    "application/vnd.rn-realmedia-vbr": {
      "source": "apache",
      "extensions": ["rmvb"]
    },
    "application/vnd.route66.link66+xml": {
      "source": "iana",
      "extensions": ["link66"]
    },
    "application/vnd.rs-274x": {"source": "iana"},
    "application/vnd.ruckus.download": {"source": "iana"},
    "application/vnd.s3sms": {"source": "iana"},
    "application/vnd.sailingtracker.track": {
      "source": "iana",
      "extensions": ["st"]
    },
    "application/vnd.sbm.cid": {"source": "iana"},
    "application/vnd.sbm.mid2": {"source": "iana"},
    "application/vnd.scribus": {"source": "iana"},
    "application/vnd.sealed.3df": {"source": "iana"},
    "application/vnd.sealed.csf": {"source": "iana"},
    "application/vnd.sealed.doc": {"source": "iana"},
    "application/vnd.sealed.eml": {"source": "iana"},
    "application/vnd.sealed.mht": {"source": "iana"},
    "application/vnd.sealed.net": {"source": "iana"},
    "application/vnd.sealed.ppt": {"source": "iana"},
    "application/vnd.sealed.tiff": {"source": "iana"},
    "application/vnd.sealed.xls": {"source": "iana"},
    "application/vnd.sealedmedia.softseal.html": {"source": "iana"},
    "application/vnd.sealedmedia.softseal.pdf": {"source": "iana"},
    "application/vnd.seemail": {
      "source": "iana",
      "extensions": ["see"]
    },
    "application/vnd.sema": {
      "source": "iana",
      "extensions": ["sema"]
    },
    "application/vnd.semd": {
      "source": "iana",
      "extensions": ["semd"]
    },
    "application/vnd.semf": {
      "source": "iana",
      "extensions": ["semf"]
    },
    "application/vnd.shana.informed.formdata": {
      "source": "iana",
      "extensions": ["ifm"]
    },
    "application/vnd.shana.informed.formtemplate": {
      "source": "iana",
      "extensions": ["itp"]
    },
    "application/vnd.shana.informed.interchange": {
      "source": "iana",
      "extensions": ["iif"]
    },
    "application/vnd.shana.informed.package": {
      "source": "iana",
      "extensions": ["ipk"]
    },
    "application/vnd.simtech-mindmapper": {
      "source": "iana",
      "extensions": ["twd", "twds"]
    },
    "application/vnd.siren+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.smaf": {
      "source": "iana",
      "extensions": ["mmf"]
    },
    "application/vnd.smart.notebook": {"source": "iana"},
    "application/vnd.smart.teacher": {
      "source": "iana",
      "extensions": ["teacher"]
    },
    "application/vnd.software602.filler.form+xml": {"source": "iana"},
    "application/vnd.software602.filler.form-xml-zip": {"source": "iana"},
    "application/vnd.solent.sdkm+xml": {
      "source": "iana",
      "extensions": ["sdkm", "sdkd"]
    },
    "application/vnd.spotfire.dxp": {
      "source": "iana",
      "extensions": ["dxp"]
    },
    "application/vnd.spotfire.sfs": {
      "source": "iana",
      "extensions": ["sfs"]
    },
    "application/vnd.sss-cod": {"source": "iana"},
    "application/vnd.sss-dtf": {"source": "iana"},
    "application/vnd.sss-ntf": {"source": "iana"},
    "application/vnd.stardivision.calc": {
      "source": "apache",
      "extensions": ["sdc"]
    },
    "application/vnd.stardivision.draw": {
      "source": "apache",
      "extensions": ["sda"]
    },
    "application/vnd.stardivision.impress": {
      "source": "apache",
      "extensions": ["sdd"]
    },
    "application/vnd.stardivision.math": {
      "source": "apache",
      "extensions": ["smf"]
    },
    "application/vnd.stardivision.writer": {
      "source": "apache",
      "extensions": ["sdw", "vor"]
    },
    "application/vnd.stardivision.writer-global": {
      "source": "apache",
      "extensions": ["sgl"]
    },
    "application/vnd.stepmania.package": {
      "source": "iana",
      "extensions": ["smzip"]
    },
    "application/vnd.stepmania.stepchart": {
      "source": "iana",
      "extensions": ["sm"]
    },
    "application/vnd.street-stream": {"source": "iana"},
    "application/vnd.sun.wadl+xml": {"source": "iana"},
    "application/vnd.sun.xml.calc": {
      "source": "apache",
      "extensions": ["sxc"]
    },
    "application/vnd.sun.xml.calc.template": {
      "source": "apache",
      "extensions": ["stc"]
    },
    "application/vnd.sun.xml.draw": {
      "source": "apache",
      "extensions": ["sxd"]
    },
    "application/vnd.sun.xml.draw.template": {
      "source": "apache",
      "extensions": ["std"]
    },
    "application/vnd.sun.xml.impress": {
      "source": "apache",
      "extensions": ["sxi"]
    },
    "application/vnd.sun.xml.impress.template": {
      "source": "apache",
      "extensions": ["sti"]
    },
    "application/vnd.sun.xml.math": {
      "source": "apache",
      "extensions": ["sxm"]
    },
    "application/vnd.sun.xml.writer": {
      "source": "apache",
      "extensions": ["sxw"]
    },
    "application/vnd.sun.xml.writer.global": {
      "source": "apache",
      "extensions": ["sxg"]
    },
    "application/vnd.sun.xml.writer.template": {
      "source": "apache",
      "extensions": ["stw"]
    },
    "application/vnd.sus-calendar": {
      "source": "iana",
      "extensions": ["sus", "susp"]
    },
    "application/vnd.svd": {
      "source": "iana",
      "extensions": ["svd"]
    },
    "application/vnd.swiftview-ics": {"source": "iana"},
    "application/vnd.symbian.install": {
      "source": "apache",
      "extensions": ["sis", "sisx"]
    },
    "application/vnd.syncml+xml": {
      "source": "iana",
      "extensions": ["xsm"]
    },
    "application/vnd.syncml.dm+wbxml": {
      "source": "iana",
      "extensions": ["bdm"]
    },
    "application/vnd.syncml.dm+xml": {
      "source": "iana",
      "extensions": ["xdm"]
    },
    "application/vnd.syncml.dm.notification": {"source": "iana"},
    "application/vnd.syncml.dmddf+wbxml": {"source": "iana"},
    "application/vnd.syncml.dmddf+xml": {"source": "iana"},
    "application/vnd.syncml.dmtnds+wbxml": {"source": "iana"},
    "application/vnd.syncml.dmtnds+xml": {"source": "iana"},
    "application/vnd.syncml.ds.notification": {"source": "iana"},
    "application/vnd.tao.intent-module-archive": {
      "source": "iana",
      "extensions": ["tao"]
    },
    "application/vnd.tcpdump.pcap": {
      "source": "iana",
      "extensions": ["pcap", "cap", "dmp"]
    },
    "application/vnd.tmd.mediaflex.api+xml": {"source": "iana"},
    "application/vnd.tmobile-livetv": {
      "source": "iana",
      "extensions": ["tmo"]
    },
    "application/vnd.trid.tpt": {
      "source": "iana",
      "extensions": ["tpt"]
    },
    "application/vnd.triscape.mxs": {
      "source": "iana",
      "extensions": ["mxs"]
    },
    "application/vnd.trueapp": {
      "source": "iana",
      "extensions": ["tra"]
    },
    "application/vnd.truedoc": {"source": "iana"},
    "application/vnd.ubisoft.webplayer": {"source": "iana"},
    "application/vnd.ufdl": {
      "source": "iana",
      "extensions": ["ufd", "ufdl"]
    },
    "application/vnd.uiq.theme": {
      "source": "iana",
      "extensions": ["utz"]
    },
    "application/vnd.umajin": {
      "source": "iana",
      "extensions": ["umj"]
    },
    "application/vnd.unity": {
      "source": "iana",
      "extensions": ["unityweb"]
    },
    "application/vnd.uoml+xml": {
      "source": "iana",
      "extensions": ["uoml"]
    },
    "application/vnd.uplanet.alert": {"source": "iana"},
    "application/vnd.uplanet.alert-wbxml": {"source": "iana"},
    "application/vnd.uplanet.bearer-choice": {"source": "iana"},
    "application/vnd.uplanet.bearer-choice-wbxml": {"source": "iana"},
    "application/vnd.uplanet.cacheop": {"source": "iana"},
    "application/vnd.uplanet.cacheop-wbxml": {"source": "iana"},
    "application/vnd.uplanet.channel": {"source": "iana"},
    "application/vnd.uplanet.channel-wbxml": {"source": "iana"},
    "application/vnd.uplanet.list": {"source": "iana"},
    "application/vnd.uplanet.list-wbxml": {"source": "iana"},
    "application/vnd.uplanet.listcmd": {"source": "iana"},
    "application/vnd.uplanet.listcmd-wbxml": {"source": "iana"},
    "application/vnd.uplanet.signal": {"source": "iana"},
    "application/vnd.uri-map": {"source": "iana"},
    "application/vnd.valve.source.material": {"source": "iana"},
    "application/vnd.vcx": {
      "source": "iana",
      "extensions": ["vcx"]
    },
    "application/vnd.vd-study": {"source": "iana"},
    "application/vnd.vectorworks": {"source": "iana"},
    "application/vnd.verimatrix.vcas": {"source": "iana"},
    "application/vnd.vidsoft.vidconference": {"source": "iana"},
    "application/vnd.visio": {
      "source": "iana",
      "extensions": ["vsd", "vst", "vss", "vsw"]
    },
    "application/vnd.visionary": {
      "source": "iana",
      "extensions": ["vis"]
    },
    "application/vnd.vividence.scriptfile": {"source": "iana"},
    "application/vnd.vsf": {
      "source": "iana",
      "extensions": ["vsf"]
    },
    "application/vnd.wap.sic": {"source": "iana"},
    "application/vnd.wap.slc": {"source": "iana"},
    "application/vnd.wap.wbxml": {
      "source": "iana",
      "extensions": ["wbxml"]
    },
    "application/vnd.wap.wmlc": {
      "source": "iana",
      "extensions": ["wmlc"]
    },
    "application/vnd.wap.wmlscriptc": {
      "source": "iana",
      "extensions": ["wmlsc"]
    },
    "application/vnd.webturbo": {
      "source": "iana",
      "extensions": ["wtb"]
    },
    "application/vnd.wfa.p2p": {"source": "iana"},
    "application/vnd.wfa.wsc": {"source": "iana"},
    "application/vnd.windows.devicepairing": {"source": "iana"},
    "application/vnd.wmc": {"source": "iana"},
    "application/vnd.wmf.bootstrap": {"source": "iana"},
    "application/vnd.wolfram.mathematica": {"source": "iana"},
    "application/vnd.wolfram.mathematica.package": {"source": "iana"},
    "application/vnd.wolfram.player": {
      "source": "iana",
      "extensions": ["nbp"]
    },
    "application/vnd.wordperfect": {
      "source": "iana",
      "extensions": ["wpd"]
    },
    "application/vnd.wqd": {
      "source": "iana",
      "extensions": ["wqd"]
    },
    "application/vnd.wrq-hp3000-labelled": {"source": "iana"},
    "application/vnd.wt.stf": {
      "source": "iana",
      "extensions": ["stf"]
    },
    "application/vnd.wv.csp+wbxml": {"source": "iana"},
    "application/vnd.wv.csp+xml": {"source": "iana"},
    "application/vnd.wv.ssp+xml": {"source": "iana"},
    "application/vnd.xacml+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.xara": {
      "source": "iana",
      "extensions": ["xar"]
    },
    "application/vnd.xfdl": {
      "source": "iana",
      "extensions": ["xfdl"]
    },
    "application/vnd.xfdl.webform": {"source": "iana"},
    "application/vnd.xmi+xml": {"source": "iana"},
    "application/vnd.xmpie.cpkg": {"source": "iana"},
    "application/vnd.xmpie.dpkg": {"source": "iana"},
    "application/vnd.xmpie.plan": {"source": "iana"},
    "application/vnd.xmpie.ppkg": {"source": "iana"},
    "application/vnd.xmpie.xlim": {"source": "iana"},
    "application/vnd.yamaha.hv-dic": {
      "source": "iana",
      "extensions": ["hvd"]
    },
    "application/vnd.yamaha.hv-script": {
      "source": "iana",
      "extensions": ["hvs"]
    },
    "application/vnd.yamaha.hv-voice": {
      "source": "iana",
      "extensions": ["hvp"]
    },
    "application/vnd.yamaha.openscoreformat": {
      "source": "iana",
      "extensions": ["osf"]
    },
    "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
      "source": "iana",
      "extensions": ["osfpvg"]
    },
    "application/vnd.yamaha.remote-setup": {"source": "iana"},
    "application/vnd.yamaha.smaf-audio": {
      "source": "iana",
      "extensions": ["saf"]
    },
    "application/vnd.yamaha.smaf-phrase": {
      "source": "iana",
      "extensions": ["spf"]
    },
    "application/vnd.yamaha.through-ngn": {"source": "iana"},
    "application/vnd.yamaha.tunnel-udpencap": {"source": "iana"},
    "application/vnd.yaoweme": {"source": "iana"},
    "application/vnd.yellowriver-custom-menu": {
      "source": "iana",
      "extensions": ["cmp"]
    },
    "application/vnd.zul": {
      "source": "iana",
      "extensions": ["zir", "zirz"]
    },
    "application/vnd.zzazz.deck+xml": {
      "source": "iana",
      "extensions": ["zaz"]
    },
    "application/voicexml+xml": {
      "source": "iana",
      "extensions": ["vxml"]
    },
    "application/vq-rtcpxr": {"source": "iana"},
    "application/watcherinfo+xml": {"source": "iana"},
    "application/whoispp-query": {"source": "iana"},
    "application/whoispp-response": {"source": "iana"},
    "application/widget": {
      "source": "iana",
      "extensions": ["wgt"]
    },
    "application/winhlp": {
      "source": "apache",
      "extensions": ["hlp"]
    },
    "application/wita": {"source": "iana"},
    "application/wordperfect5.1": {"source": "iana"},
    "application/wsdl+xml": {
      "source": "iana",
      "extensions": ["wsdl"]
    },
    "application/wspolicy+xml": {
      "source": "iana",
      "extensions": ["wspolicy"]
    },
    "application/x-7z-compressed": {
      "source": "apache",
      "compressible": false,
      "extensions": ["7z"]
    },
    "application/x-abiword": {
      "source": "apache",
      "extensions": ["abw"]
    },
    "application/x-ace-compressed": {
      "source": "apache",
      "extensions": ["ace"]
    },
    "application/x-amf": {"source": "apache"},
    "application/x-apple-diskimage": {
      "source": "apache",
      "extensions": ["dmg"]
    },
    "application/x-authorware-bin": {
      "source": "apache",
      "extensions": ["aab", "x32", "u32", "vox"]
    },
    "application/x-authorware-map": {
      "source": "apache",
      "extensions": ["aam"]
    },
    "application/x-authorware-seg": {
      "source": "apache",
      "extensions": ["aas"]
    },
    "application/x-bcpio": {
      "source": "apache",
      "extensions": ["bcpio"]
    },
    "application/x-bdoc": {
      "compressible": false,
      "extensions": ["bdoc"]
    },
    "application/x-bittorrent": {
      "source": "apache",
      "extensions": ["torrent"]
    },
    "application/x-blorb": {
      "source": "apache",
      "extensions": ["blb", "blorb"]
    },
    "application/x-bzip": {
      "source": "apache",
      "compressible": false,
      "extensions": ["bz"]
    },
    "application/x-bzip2": {
      "source": "apache",
      "compressible": false,
      "extensions": ["bz2", "boz"]
    },
    "application/x-cbr": {
      "source": "apache",
      "extensions": ["cbr", "cba", "cbt", "cbz", "cb7"]
    },
    "application/x-cdlink": {
      "source": "apache",
      "extensions": ["vcd"]
    },
    "application/x-cfs-compressed": {
      "source": "apache",
      "extensions": ["cfs"]
    },
    "application/x-chat": {
      "source": "apache",
      "extensions": ["chat"]
    },
    "application/x-chess-pgn": {
      "source": "apache",
      "extensions": ["pgn"]
    },
    "application/x-chrome-extension": {"extensions": ["crx"]},
    "application/x-cocoa": {
      "source": "nginx",
      "extensions": ["cco"]
    },
    "application/x-compress": {"source": "apache"},
    "application/x-conference": {
      "source": "apache",
      "extensions": ["nsc"]
    },
    "application/x-cpio": {
      "source": "apache",
      "extensions": ["cpio"]
    },
    "application/x-csh": {
      "source": "apache",
      "extensions": ["csh"]
    },
    "application/x-deb": {"compressible": false},
    "application/x-debian-package": {
      "source": "apache",
      "extensions": ["deb", "udeb"]
    },
    "application/x-dgc-compressed": {
      "source": "apache",
      "extensions": ["dgc"]
    },
    "application/x-director": {
      "source": "apache",
      "extensions": ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"]
    },
    "application/x-doom": {
      "source": "apache",
      "extensions": ["wad"]
    },
    "application/x-dtbncx+xml": {
      "source": "apache",
      "extensions": ["ncx"]
    },
    "application/x-dtbook+xml": {
      "source": "apache",
      "extensions": ["dtb"]
    },
    "application/x-dtbresource+xml": {
      "source": "apache",
      "extensions": ["res"]
    },
    "application/x-dvi": {
      "source": "apache",
      "compressible": false,
      "extensions": ["dvi"]
    },
    "application/x-envoy": {
      "source": "apache",
      "extensions": ["evy"]
    },
    "application/x-eva": {
      "source": "apache",
      "extensions": ["eva"]
    },
    "application/x-font-bdf": {
      "source": "apache",
      "extensions": ["bdf"]
    },
    "application/x-font-dos": {"source": "apache"},
    "application/x-font-framemaker": {"source": "apache"},
    "application/x-font-ghostscript": {
      "source": "apache",
      "extensions": ["gsf"]
    },
    "application/x-font-libgrx": {"source": "apache"},
    "application/x-font-linux-psf": {
      "source": "apache",
      "extensions": ["psf"]
    },
    "application/x-font-otf": {
      "source": "apache",
      "compressible": true,
      "extensions": ["otf"]
    },
    "application/x-font-pcf": {
      "source": "apache",
      "extensions": ["pcf"]
    },
    "application/x-font-snf": {
      "source": "apache",
      "extensions": ["snf"]
    },
    "application/x-font-speedo": {"source": "apache"},
    "application/x-font-sunos-news": {"source": "apache"},
    "application/x-font-ttf": {
      "source": "apache",
      "compressible": true,
      "extensions": ["ttf", "ttc"]
    },
    "application/x-font-type1": {
      "source": "apache",
      "extensions": ["pfa", "pfb", "pfm", "afm"]
    },
    "application/x-font-vfont": {"source": "apache"},
    "application/x-freearc": {
      "source": "apache",
      "extensions": ["arc"]
    },
    "application/x-futuresplash": {
      "source": "apache",
      "extensions": ["spl"]
    },
    "application/x-gca-compressed": {
      "source": "apache",
      "extensions": ["gca"]
    },
    "application/x-glulx": {
      "source": "apache",
      "extensions": ["ulx"]
    },
    "application/x-gnumeric": {
      "source": "apache",
      "extensions": ["gnumeric"]
    },
    "application/x-gramps-xml": {
      "source": "apache",
      "extensions": ["gramps"]
    },
    "application/x-gtar": {
      "source": "apache",
      "extensions": ["gtar"]
    },
    "application/x-gzip": {"source": "apache"},
    "application/x-hdf": {
      "source": "apache",
      "extensions": ["hdf"]
    },
    "application/x-httpd-php": {
      "compressible": true,
      "extensions": ["php"]
    },
    "application/x-install-instructions": {
      "source": "apache",
      "extensions": ["install"]
    },
    "application/x-iso9660-image": {
      "source": "apache",
      "extensions": ["iso"]
    },
    "application/x-java-archive-diff": {
      "source": "nginx",
      "extensions": ["jardiff"]
    },
    "application/x-java-jnlp-file": {
      "source": "apache",
      "compressible": false,
      "extensions": ["jnlp"]
    },
    "application/x-javascript": {"compressible": true},
    "application/x-latex": {
      "source": "apache",
      "compressible": false,
      "extensions": ["latex"]
    },
    "application/x-lua-bytecode": {"extensions": ["luac"]},
    "application/x-lzh-compressed": {
      "source": "apache",
      "extensions": ["lzh", "lha"]
    },
    "application/x-makeself": {
      "source": "nginx",
      "extensions": ["run"]
    },
    "application/x-mie": {
      "source": "apache",
      "extensions": ["mie"]
    },
    "application/x-mobipocket-ebook": {
      "source": "apache",
      "extensions": ["prc", "mobi"]
    },
    "application/x-mpegurl": {"compressible": false},
    "application/x-ms-application": {
      "source": "apache",
      "extensions": ["application"]
    },
    "application/x-ms-shortcut": {
      "source": "apache",
      "extensions": ["lnk"]
    },
    "application/x-ms-wmd": {
      "source": "apache",
      "extensions": ["wmd"]
    },
    "application/x-ms-wmz": {
      "source": "apache",
      "extensions": ["wmz"]
    },
    "application/x-ms-xbap": {
      "source": "apache",
      "extensions": ["xbap"]
    },
    "application/x-msaccess": {
      "source": "apache",
      "extensions": ["mdb"]
    },
    "application/x-msbinder": {
      "source": "apache",
      "extensions": ["obd"]
    },
    "application/x-mscardfile": {
      "source": "apache",
      "extensions": ["crd"]
    },
    "application/x-msclip": {
      "source": "apache",
      "extensions": ["clp"]
    },
    "application/x-msdos-program": {"extensions": ["exe"]},
    "application/x-msdownload": {
      "source": "apache",
      "extensions": ["exe", "dll", "com", "bat", "msi"]
    },
    "application/x-msmediaview": {
      "source": "apache",
      "extensions": ["mvb", "m13", "m14"]
    },
    "application/x-msmetafile": {
      "source": "apache",
      "extensions": ["wmf", "wmz", "emf", "emz"]
    },
    "application/x-msmoney": {
      "source": "apache",
      "extensions": ["mny"]
    },
    "application/x-mspublisher": {
      "source": "apache",
      "extensions": ["pub"]
    },
    "application/x-msschedule": {
      "source": "apache",
      "extensions": ["scd"]
    },
    "application/x-msterminal": {
      "source": "apache",
      "extensions": ["trm"]
    },
    "application/x-mswrite": {
      "source": "apache",
      "extensions": ["wri"]
    },
    "application/x-netcdf": {
      "source": "apache",
      "extensions": ["nc", "cdf"]
    },
    "application/x-ns-proxy-autoconfig": {
      "compressible": true,
      "extensions": ["pac"]
    },
    "application/x-nzb": {
      "source": "apache",
      "extensions": ["nzb"]
    },
    "application/x-perl": {
      "source": "nginx",
      "extensions": ["pl", "pm"]
    },
    "application/x-pilot": {
      "source": "nginx",
      "extensions": ["prc", "pdb"]
    },
    "application/x-pkcs12": {
      "source": "apache",
      "compressible": false,
      "extensions": ["p12", "pfx"]
    },
    "application/x-pkcs7-certificates": {
      "source": "apache",
      "extensions": ["p7b", "spc"]
    },
    "application/x-pkcs7-certreqresp": {
      "source": "apache",
      "extensions": ["p7r"]
    },
    "application/x-rar-compressed": {
      "source": "apache",
      "compressible": false,
      "extensions": ["rar"]
    },
    "application/x-redhat-package-manager": {
      "source": "nginx",
      "extensions": ["rpm"]
    },
    "application/x-research-info-systems": {
      "source": "apache",
      "extensions": ["ris"]
    },
    "application/x-sea": {
      "source": "nginx",
      "extensions": ["sea"]
    },
    "application/x-sh": {
      "source": "apache",
      "compressible": true,
      "extensions": ["sh"]
    },
    "application/x-shar": {
      "source": "apache",
      "extensions": ["shar"]
    },
    "application/x-shockwave-flash": {
      "source": "apache",
      "compressible": false,
      "extensions": ["swf"]
    },
    "application/x-silverlight-app": {
      "source": "apache",
      "extensions": ["xap"]
    },
    "application/x-sql": {
      "source": "apache",
      "extensions": ["sql"]
    },
    "application/x-stuffit": {
      "source": "apache",
      "compressible": false,
      "extensions": ["sit"]
    },
    "application/x-stuffitx": {
      "source": "apache",
      "extensions": ["sitx"]
    },
    "application/x-subrip": {
      "source": "apache",
      "extensions": ["srt"]
    },
    "application/x-sv4cpio": {
      "source": "apache",
      "extensions": ["sv4cpio"]
    },
    "application/x-sv4crc": {
      "source": "apache",
      "extensions": ["sv4crc"]
    },
    "application/x-t3vm-image": {
      "source": "apache",
      "extensions": ["t3"]
    },
    "application/x-tads": {
      "source": "apache",
      "extensions": ["gam"]
    },
    "application/x-tar": {
      "source": "apache",
      "compressible": true,
      "extensions": ["tar"]
    },
    "application/x-tcl": {
      "source": "apache",
      "extensions": ["tcl", "tk"]
    },
    "application/x-tex": {
      "source": "apache",
      "extensions": ["tex"]
    },
    "application/x-tex-tfm": {
      "source": "apache",
      "extensions": ["tfm"]
    },
    "application/x-texinfo": {
      "source": "apache",
      "extensions": ["texinfo", "texi"]
    },
    "application/x-tgif": {
      "source": "apache",
      "extensions": ["obj"]
    },
    "application/x-ustar": {
      "source": "apache",
      "extensions": ["ustar"]
    },
    "application/x-wais-source": {
      "source": "apache",
      "extensions": ["src"]
    },
    "application/x-web-app-manifest+json": {
      "compressible": true,
      "extensions": ["webapp"]
    },
    "application/x-www-form-urlencoded": {
      "source": "iana",
      "compressible": true
    },
    "application/x-x509-ca-cert": {
      "source": "apache",
      "extensions": ["der", "crt", "pem"]
    },
    "application/x-xfig": {
      "source": "apache",
      "extensions": ["fig"]
    },
    "application/x-xliff+xml": {
      "source": "apache",
      "extensions": ["xlf"]
    },
    "application/x-xpinstall": {
      "source": "apache",
      "compressible": false,
      "extensions": ["xpi"]
    },
    "application/x-xz": {
      "source": "apache",
      "extensions": ["xz"]
    },
    "application/x-zmachine": {
      "source": "apache",
      "extensions": ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"]
    },
    "application/x400-bp": {"source": "iana"},
    "application/xacml+xml": {"source": "iana"},
    "application/xaml+xml": {
      "source": "apache",
      "extensions": ["xaml"]
    },
    "application/xcap-att+xml": {"source": "iana"},
    "application/xcap-caps+xml": {"source": "iana"},
    "application/xcap-diff+xml": {
      "source": "iana",
      "extensions": ["xdf"]
    },
    "application/xcap-el+xml": {"source": "iana"},
    "application/xcap-error+xml": {"source": "iana"},
    "application/xcap-ns+xml": {"source": "iana"},
    "application/xcon-conference-info+xml": {"source": "iana"},
    "application/xcon-conference-info-diff+xml": {"source": "iana"},
    "application/xenc+xml": {
      "source": "iana",
      "extensions": ["xenc"]
    },
    "application/xhtml+xml": {
      "source": "iana",
      "compressible": true,
      "extensions": ["xhtml", "xht"]
    },
    "application/xhtml-voice+xml": {"source": "apache"},
    "application/xml": {
      "source": "iana",
      "compressible": true,
      "extensions": ["xml", "xsl", "xsd"]
    },
    "application/xml-dtd": {
      "source": "iana",
      "compressible": true,
      "extensions": ["dtd"]
    },
    "application/xml-external-parsed-entity": {"source": "iana"},
    "application/xml-patch+xml": {"source": "iana"},
    "application/xmpp+xml": {"source": "iana"},
    "application/xop+xml": {
      "source": "iana",
      "compressible": true,
      "extensions": ["xop"]
    },
    "application/xproc+xml": {
      "source": "apache",
      "extensions": ["xpl"]
    },
    "application/xslt+xml": {
      "source": "iana",
      "extensions": ["xslt"]
    },
    "application/xspf+xml": {
      "source": "apache",
      "extensions": ["xspf"]
    },
    "application/xv+xml": {
      "source": "iana",
      "extensions": ["mxml", "xhvml", "xvml", "xvm"]
    },
    "application/yang": {
      "source": "iana",
      "extensions": ["yang"]
    },
    "application/yin+xml": {
      "source": "iana",
      "extensions": ["yin"]
    },
    "application/zip": {
      "source": "iana",
      "compressible": false,
      "extensions": ["zip"]
    },
    "application/zlib": {"source": "iana"},
    "audio/1d-interleaved-parityfec": {"source": "iana"},
    "audio/32kadpcm": {"source": "iana"},
    "audio/3gpp": {"source": "iana"},
    "audio/3gpp2": {"source": "iana"},
    "audio/ac3": {"source": "iana"},
    "audio/adpcm": {
      "source": "apache",
      "extensions": ["adp"]
    },
    "audio/amr": {"source": "iana"},
    "audio/amr-wb": {"source": "iana"},
    "audio/amr-wb+": {"source": "iana"},
    "audio/aptx": {"source": "iana"},
    "audio/asc": {"source": "iana"},
    "audio/atrac-advanced-lossless": {"source": "iana"},
    "audio/atrac-x": {"source": "iana"},
    "audio/atrac3": {"source": "iana"},
    "audio/basic": {
      "source": "iana",
      "compressible": false,
      "extensions": ["au", "snd"]
    },
    "audio/bv16": {"source": "iana"},
    "audio/bv32": {"source": "iana"},
    "audio/clearmode": {"source": "iana"},
    "audio/cn": {"source": "iana"},
    "audio/dat12": {"source": "iana"},
    "audio/dls": {"source": "iana"},
    "audio/dsr-es201108": {"source": "iana"},
    "audio/dsr-es202050": {"source": "iana"},
    "audio/dsr-es202211": {"source": "iana"},
    "audio/dsr-es202212": {"source": "iana"},
    "audio/dv": {"source": "iana"},
    "audio/dvi4": {"source": "iana"},
    "audio/eac3": {"source": "iana"},
    "audio/encaprtp": {"source": "iana"},
    "audio/evrc": {"source": "iana"},
    "audio/evrc-qcp": {"source": "iana"},
    "audio/evrc0": {"source": "iana"},
    "audio/evrc1": {"source": "iana"},
    "audio/evrcb": {"source": "iana"},
    "audio/evrcb0": {"source": "iana"},
    "audio/evrcb1": {"source": "iana"},
    "audio/evrcnw": {"source": "iana"},
    "audio/evrcnw0": {"source": "iana"},
    "audio/evrcnw1": {"source": "iana"},
    "audio/evrcwb": {"source": "iana"},
    "audio/evrcwb0": {"source": "iana"},
    "audio/evrcwb1": {"source": "iana"},
    "audio/fwdred": {"source": "iana"},
    "audio/g711-0": {"source": "iana"},
    "audio/g719": {"source": "iana"},
    "audio/g722": {"source": "iana"},
    "audio/g7221": {"source": "iana"},
    "audio/g723": {"source": "iana"},
    "audio/g726-16": {"source": "iana"},
    "audio/g726-24": {"source": "iana"},
    "audio/g726-32": {"source": "iana"},
    "audio/g726-40": {"source": "iana"},
    "audio/g728": {"source": "iana"},
    "audio/g729": {"source": "iana"},
    "audio/g7291": {"source": "iana"},
    "audio/g729d": {"source": "iana"},
    "audio/g729e": {"source": "iana"},
    "audio/gsm": {"source": "iana"},
    "audio/gsm-efr": {"source": "iana"},
    "audio/gsm-hr-08": {"source": "iana"},
    "audio/ilbc": {"source": "iana"},
    "audio/ip-mr_v2.5": {"source": "iana"},
    "audio/isac": {"source": "apache"},
    "audio/l16": {"source": "iana"},
    "audio/l20": {"source": "iana"},
    "audio/l24": {
      "source": "iana",
      "compressible": false
    },
    "audio/l8": {"source": "iana"},
    "audio/lpc": {"source": "iana"},
    "audio/midi": {
      "source": "apache",
      "extensions": ["mid", "midi", "kar", "rmi"]
    },
    "audio/mobile-xmf": {"source": "iana"},
    "audio/mp4": {
      "source": "iana",
      "compressible": false,
      "extensions": ["mp4a", "m4a"]
    },
    "audio/mp4a-latm": {"source": "iana"},
    "audio/mpa": {"source": "iana"},
    "audio/mpa-robust": {"source": "iana"},
    "audio/mpeg": {
      "source": "iana",
      "compressible": false,
      "extensions": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"]
    },
    "audio/mpeg4-generic": {"source": "iana"},
    "audio/musepack": {"source": "apache"},
    "audio/ogg": {
      "source": "iana",
      "compressible": false,
      "extensions": ["oga", "ogg", "spx"]
    },
    "audio/opus": {"source": "iana"},
    "audio/parityfec": {"source": "iana"},
    "audio/pcma": {"source": "iana"},
    "audio/pcma-wb": {"source": "iana"},
    "audio/pcmu": {"source": "iana"},
    "audio/pcmu-wb": {"source": "iana"},
    "audio/prs.sid": {"source": "iana"},
    "audio/qcelp": {"source": "iana"},
    "audio/raptorfec": {"source": "iana"},
    "audio/red": {"source": "iana"},
    "audio/rtp-enc-aescm128": {"source": "iana"},
    "audio/rtp-midi": {"source": "iana"},
    "audio/rtploopback": {"source": "iana"},
    "audio/rtx": {"source": "iana"},
    "audio/s3m": {
      "source": "apache",
      "extensions": ["s3m"]
    },
    "audio/silk": {
      "source": "apache",
      "extensions": ["sil"]
    },
    "audio/smv": {"source": "iana"},
    "audio/smv-qcp": {"source": "iana"},
    "audio/smv0": {"source": "iana"},
    "audio/sp-midi": {"source": "iana"},
    "audio/speex": {"source": "iana"},
    "audio/t140c": {"source": "iana"},
    "audio/t38": {"source": "iana"},
    "audio/telephone-event": {"source": "iana"},
    "audio/tone": {"source": "iana"},
    "audio/uemclip": {"source": "iana"},
    "audio/ulpfec": {"source": "iana"},
    "audio/vdvi": {"source": "iana"},
    "audio/vmr-wb": {"source": "iana"},
    "audio/vnd.3gpp.iufp": {"source": "iana"},
    "audio/vnd.4sb": {"source": "iana"},
    "audio/vnd.audiokoz": {"source": "iana"},
    "audio/vnd.celp": {"source": "iana"},
    "audio/vnd.cisco.nse": {"source": "iana"},
    "audio/vnd.cmles.radio-events": {"source": "iana"},
    "audio/vnd.cns.anp1": {"source": "iana"},
    "audio/vnd.cns.inf1": {"source": "iana"},
    "audio/vnd.dece.audio": {
      "source": "iana",
      "extensions": ["uva", "uvva"]
    },
    "audio/vnd.digital-winds": {
      "source": "iana",
      "extensions": ["eol"]
    },
    "audio/vnd.dlna.adts": {"source": "iana"},
    "audio/vnd.dolby.heaac.1": {"source": "iana"},
    "audio/vnd.dolby.heaac.2": {"source": "iana"},
    "audio/vnd.dolby.mlp": {"source": "iana"},
    "audio/vnd.dolby.mps": {"source": "iana"},
    "audio/vnd.dolby.pl2": {"source": "iana"},
    "audio/vnd.dolby.pl2x": {"source": "iana"},
    "audio/vnd.dolby.pl2z": {"source": "iana"},
    "audio/vnd.dolby.pulse.1": {"source": "iana"},
    "audio/vnd.dra": {
      "source": "iana",
      "extensions": ["dra"]
    },
    "audio/vnd.dts": {
      "source": "iana",
      "extensions": ["dts"]
    },
    "audio/vnd.dts.hd": {
      "source": "iana",
      "extensions": ["dtshd"]
    },
    "audio/vnd.dvb.file": {"source": "iana"},
    "audio/vnd.everad.plj": {"source": "iana"},
    "audio/vnd.hns.audio": {"source": "iana"},
    "audio/vnd.lucent.voice": {
      "source": "iana",
      "extensions": ["lvp"]
    },
    "audio/vnd.ms-playready.media.pya": {
      "source": "iana",
      "extensions": ["pya"]
    },
    "audio/vnd.nokia.mobile-xmf": {"source": "iana"},
    "audio/vnd.nortel.vbk": {"source": "iana"},
    "audio/vnd.nuera.ecelp4800": {
      "source": "iana",
      "extensions": ["ecelp4800"]
    },
    "audio/vnd.nuera.ecelp7470": {
      "source": "iana",
      "extensions": ["ecelp7470"]
    },
    "audio/vnd.nuera.ecelp9600": {
      "source": "iana",
      "extensions": ["ecelp9600"]
    },
    "audio/vnd.octel.sbc": {"source": "iana"},
    "audio/vnd.qcelp": {"source": "iana"},
    "audio/vnd.rhetorex.32kadpcm": {"source": "iana"},
    "audio/vnd.rip": {
      "source": "iana",
      "extensions": ["rip"]
    },
    "audio/vnd.rn-realaudio": {"compressible": false},
    "audio/vnd.sealedmedia.softseal.mpeg": {"source": "iana"},
    "audio/vnd.vmx.cvsd": {"source": "iana"},
    "audio/vnd.wave": {"compressible": false},
    "audio/vorbis": {
      "source": "iana",
      "compressible": false
    },
    "audio/vorbis-config": {"source": "iana"},
    "audio/wav": {
      "compressible": false,
      "extensions": ["wav"]
    },
    "audio/wave": {
      "compressible": false,
      "extensions": ["wav"]
    },
    "audio/webm": {
      "source": "apache",
      "compressible": false,
      "extensions": ["weba"]
    },
    "audio/x-aac": {
      "source": "apache",
      "compressible": false,
      "extensions": ["aac"]
    },
    "audio/x-aiff": {
      "source": "apache",
      "extensions": ["aif", "aiff", "aifc"]
    },
    "audio/x-caf": {
      "source": "apache",
      "compressible": false,
      "extensions": ["caf"]
    },
    "audio/x-flac": {
      "source": "apache",
      "extensions": ["flac"]
    },
    "audio/x-m4a": {
      "source": "nginx",
      "extensions": ["m4a"]
    },
    "audio/x-matroska": {
      "source": "apache",
      "extensions": ["mka"]
    },
    "audio/x-mpegurl": {
      "source": "apache",
      "extensions": ["m3u"]
    },
    "audio/x-ms-wax": {
      "source": "apache",
      "extensions": ["wax"]
    },
    "audio/x-ms-wma": {
      "source": "apache",
      "extensions": ["wma"]
    },
    "audio/x-pn-realaudio": {
      "source": "apache",
      "extensions": ["ram", "ra"]
    },
    "audio/x-pn-realaudio-plugin": {
      "source": "apache",
      "extensions": ["rmp"]
    },
    "audio/x-realaudio": {
      "source": "nginx",
      "extensions": ["ra"]
    },
    "audio/x-tta": {"source": "apache"},
    "audio/x-wav": {
      "source": "apache",
      "extensions": ["wav"]
    },
    "audio/xm": {
      "source": "apache",
      "extensions": ["xm"]
    },
    "chemical/x-cdx": {
      "source": "apache",
      "extensions": ["cdx"]
    },
    "chemical/x-cif": {
      "source": "apache",
      "extensions": ["cif"]
    },
    "chemical/x-cmdf": {
      "source": "apache",
      "extensions": ["cmdf"]
    },
    "chemical/x-cml": {
      "source": "apache",
      "extensions": ["cml"]
    },
    "chemical/x-csml": {
      "source": "apache",
      "extensions": ["csml"]
    },
    "chemical/x-pdb": {"source": "apache"},
    "chemical/x-xyz": {
      "source": "apache",
      "extensions": ["xyz"]
    },
    "font/opentype": {
      "compressible": true,
      "extensions": ["otf"]
    },
    "image/bmp": {
      "source": "apache",
      "compressible": true,
      "extensions": ["bmp"]
    },
    "image/cgm": {
      "source": "iana",
      "extensions": ["cgm"]
    },
    "image/fits": {"source": "iana"},
    "image/g3fax": {
      "source": "iana",
      "extensions": ["g3"]
    },
    "image/gif": {
      "source": "iana",
      "compressible": false,
      "extensions": ["gif"]
    },
    "image/ief": {
      "source": "iana",
      "extensions": ["ief"]
    },
    "image/jp2": {"source": "iana"},
    "image/jpeg": {
      "source": "iana",
      "compressible": false,
      "extensions": ["jpeg", "jpg", "jpe"]
    },
    "image/jpm": {"source": "iana"},
    "image/jpx": {"source": "iana"},
    "image/ktx": {
      "source": "iana",
      "extensions": ["ktx"]
    },
    "image/naplps": {"source": "iana"},
    "image/pjpeg": {"compressible": false},
    "image/png": {
      "source": "iana",
      "compressible": false,
      "extensions": ["png"]
    },
    "image/prs.btif": {
      "source": "iana",
      "extensions": ["btif"]
    },
    "image/prs.pti": {"source": "iana"},
    "image/pwg-raster": {"source": "iana"},
    "image/sgi": {
      "source": "apache",
      "extensions": ["sgi"]
    },
    "image/svg+xml": {
      "source": "iana",
      "compressible": true,
      "extensions": ["svg", "svgz"]
    },
    "image/t38": {"source": "iana"},
    "image/tiff": {
      "source": "iana",
      "compressible": false,
      "extensions": ["tiff", "tif"]
    },
    "image/tiff-fx": {"source": "iana"},
    "image/vnd.adobe.photoshop": {
      "source": "iana",
      "compressible": true,
      "extensions": ["psd"]
    },
    "image/vnd.airzip.accelerator.azv": {"source": "iana"},
    "image/vnd.cns.inf2": {"source": "iana"},
    "image/vnd.dece.graphic": {
      "source": "iana",
      "extensions": ["uvi", "uvvi", "uvg", "uvvg"]
    },
    "image/vnd.djvu": {
      "source": "iana",
      "extensions": ["djvu", "djv"]
    },
    "image/vnd.dvb.subtitle": {
      "source": "iana",
      "extensions": ["sub"]
    },
    "image/vnd.dwg": {
      "source": "iana",
      "extensions": ["dwg"]
    },
    "image/vnd.dxf": {
      "source": "iana",
      "extensions": ["dxf"]
    },
    "image/vnd.fastbidsheet": {
      "source": "iana",
      "extensions": ["fbs"]
    },
    "image/vnd.fpx": {
      "source": "iana",
      "extensions": ["fpx"]
    },
    "image/vnd.fst": {
      "source": "iana",
      "extensions": ["fst"]
    },
    "image/vnd.fujixerox.edmics-mmr": {
      "source": "iana",
      "extensions": ["mmr"]
    },
    "image/vnd.fujixerox.edmics-rlc": {
      "source": "iana",
      "extensions": ["rlc"]
    },
    "image/vnd.globalgraphics.pgb": {"source": "iana"},
    "image/vnd.microsoft.icon": {"source": "iana"},
    "image/vnd.mix": {"source": "iana"},
    "image/vnd.mozilla.apng": {"source": "iana"},
    "image/vnd.ms-modi": {
      "source": "iana",
      "extensions": ["mdi"]
    },
    "image/vnd.ms-photo": {
      "source": "apache",
      "extensions": ["wdp"]
    },
    "image/vnd.net-fpx": {
      "source": "iana",
      "extensions": ["npx"]
    },
    "image/vnd.radiance": {"source": "iana"},
    "image/vnd.sealed.png": {"source": "iana"},
    "image/vnd.sealedmedia.softseal.gif": {"source": "iana"},
    "image/vnd.sealedmedia.softseal.jpg": {"source": "iana"},
    "image/vnd.svf": {"source": "iana"},
    "image/vnd.tencent.tap": {"source": "iana"},
    "image/vnd.valve.source.texture": {"source": "iana"},
    "image/vnd.wap.wbmp": {
      "source": "iana",
      "extensions": ["wbmp"]
    },
    "image/vnd.xiff": {
      "source": "iana",
      "extensions": ["xif"]
    },
    "image/vnd.zbrush.pcx": {"source": "iana"},
    "image/webp": {
      "source": "apache",
      "extensions": ["webp"]
    },
    "image/x-3ds": {
      "source": "apache",
      "extensions": ["3ds"]
    },
    "image/x-cmu-raster": {
      "source": "apache",
      "extensions": ["ras"]
    },
    "image/x-cmx": {
      "source": "apache",
      "extensions": ["cmx"]
    },
    "image/x-freehand": {
      "source": "apache",
      "extensions": ["fh", "fhc", "fh4", "fh5", "fh7"]
    },
    "image/x-icon": {
      "source": "apache",
      "compressible": true,
      "extensions": ["ico"]
    },
    "image/x-jng": {
      "source": "nginx",
      "extensions": ["jng"]
    },
    "image/x-mrsid-image": {
      "source": "apache",
      "extensions": ["sid"]
    },
    "image/x-ms-bmp": {
      "source": "nginx",
      "compressible": true,
      "extensions": ["bmp"]
    },
    "image/x-pcx": {
      "source": "apache",
      "extensions": ["pcx"]
    },
    "image/x-pict": {
      "source": "apache",
      "extensions": ["pic", "pct"]
    },
    "image/x-portable-anymap": {
      "source": "apache",
      "extensions": ["pnm"]
    },
    "image/x-portable-bitmap": {
      "source": "apache",
      "extensions": ["pbm"]
    },
    "image/x-portable-graymap": {
      "source": "apache",
      "extensions": ["pgm"]
    },
    "image/x-portable-pixmap": {
      "source": "apache",
      "extensions": ["ppm"]
    },
    "image/x-rgb": {
      "source": "apache",
      "extensions": ["rgb"]
    },
    "image/x-tga": {
      "source": "apache",
      "extensions": ["tga"]
    },
    "image/x-xbitmap": {
      "source": "apache",
      "extensions": ["xbm"]
    },
    "image/x-xcf": {"compressible": false},
    "image/x-xpixmap": {
      "source": "apache",
      "extensions": ["xpm"]
    },
    "image/x-xwindowdump": {
      "source": "apache",
      "extensions": ["xwd"]
    },
    "message/cpim": {"source": "iana"},
    "message/delivery-status": {"source": "iana"},
    "message/disposition-notification": {"source": "iana"},
    "message/external-body": {"source": "iana"},
    "message/feedback-report": {"source": "iana"},
    "message/global": {"source": "iana"},
    "message/global-delivery-status": {"source": "iana"},
    "message/global-disposition-notification": {"source": "iana"},
    "message/global-headers": {"source": "iana"},
    "message/http": {
      "source": "iana",
      "compressible": false
    },
    "message/imdn+xml": {
      "source": "iana",
      "compressible": true
    },
    "message/news": {"source": "iana"},
    "message/partial": {
      "source": "iana",
      "compressible": false
    },
    "message/rfc822": {
      "source": "iana",
      "compressible": true,
      "extensions": ["eml", "mime"]
    },
    "message/s-http": {"source": "iana"},
    "message/sip": {"source": "iana"},
    "message/sipfrag": {"source": "iana"},
    "message/tracking-status": {"source": "iana"},
    "message/vnd.si.simp": {"source": "iana"},
    "message/vnd.wfa.wsc": {"source": "iana"},
    "model/iges": {
      "source": "iana",
      "compressible": false,
      "extensions": ["igs", "iges"]
    },
    "model/mesh": {
      "source": "iana",
      "compressible": false,
      "extensions": ["msh", "mesh", "silo"]
    },
    "model/vnd.collada+xml": {
      "source": "iana",
      "extensions": ["dae"]
    },
    "model/vnd.dwf": {
      "source": "iana",
      "extensions": ["dwf"]
    },
    "model/vnd.flatland.3dml": {"source": "iana"},
    "model/vnd.gdl": {
      "source": "iana",
      "extensions": ["gdl"]
    },
    "model/vnd.gs-gdl": {"source": "apache"},
    "model/vnd.gs.gdl": {"source": "iana"},
    "model/vnd.gtw": {
      "source": "iana",
      "extensions": ["gtw"]
    },
    "model/vnd.moml+xml": {"source": "iana"},
    "model/vnd.mts": {
      "source": "iana",
      "extensions": ["mts"]
    },
    "model/vnd.opengex": {"source": "iana"},
    "model/vnd.parasolid.transmit.binary": {"source": "iana"},
    "model/vnd.parasolid.transmit.text": {"source": "iana"},
    "model/vnd.valve.source.compiled-map": {"source": "iana"},
    "model/vnd.vtu": {
      "source": "iana",
      "extensions": ["vtu"]
    },
    "model/vrml": {
      "source": "iana",
      "compressible": false,
      "extensions": ["wrl", "vrml"]
    },
    "model/x3d+binary": {
      "source": "apache",
      "compressible": false,
      "extensions": ["x3db", "x3dbz"]
    },
    "model/x3d+fastinfoset": {"source": "iana"},
    "model/x3d+vrml": {
      "source": "apache",
      "compressible": false,
      "extensions": ["x3dv", "x3dvz"]
    },
    "model/x3d+xml": {
      "source": "iana",
      "compressible": true,
      "extensions": ["x3d", "x3dz"]
    },
    "model/x3d-vrml": {"source": "iana"},
    "multipart/alternative": {
      "source": "iana",
      "compressible": false
    },
    "multipart/appledouble": {"source": "iana"},
    "multipart/byteranges": {"source": "iana"},
    "multipart/digest": {"source": "iana"},
    "multipart/encrypted": {
      "source": "iana",
      "compressible": false
    },
    "multipart/form-data": {
      "source": "iana",
      "compressible": false
    },
    "multipart/header-set": {"source": "iana"},
    "multipart/mixed": {
      "source": "iana",
      "compressible": false
    },
    "multipart/parallel": {"source": "iana"},
    "multipart/related": {
      "source": "iana",
      "compressible": false
    },
    "multipart/report": {"source": "iana"},
    "multipart/signed": {
      "source": "iana",
      "compressible": false
    },
    "multipart/voice-message": {"source": "iana"},
    "multipart/x-mixed-replace": {"source": "iana"},
    "text/1d-interleaved-parityfec": {"source": "iana"},
    "text/cache-manifest": {
      "source": "iana",
      "compressible": true,
      "extensions": ["appcache", "manifest"]
    },
    "text/calendar": {
      "source": "iana",
      "extensions": ["ics", "ifb"]
    },
    "text/calender": {"compressible": true},
    "text/cmd": {"compressible": true},
    "text/coffeescript": {"extensions": ["coffee", "litcoffee"]},
    "text/css": {
      "source": "iana",
      "compressible": true,
      "extensions": ["css"]
    },
    "text/csv": {
      "source": "iana",
      "compressible": true,
      "extensions": ["csv"]
    },
    "text/csv-schema": {"source": "iana"},
    "text/directory": {"source": "iana"},
    "text/dns": {"source": "iana"},
    "text/ecmascript": {"source": "iana"},
    "text/encaprtp": {"source": "iana"},
    "text/enriched": {"source": "iana"},
    "text/fwdred": {"source": "iana"},
    "text/grammar-ref-list": {"source": "iana"},
    "text/hjson": {"extensions": ["hjson"]},
    "text/html": {
      "source": "iana",
      "compressible": true,
      "extensions": ["html", "htm", "shtml"]
    },
    "text/jade": {"extensions": ["jade"]},
    "text/javascript": {
      "source": "iana",
      "compressible": true
    },
    "text/jcr-cnd": {"source": "iana"},
    "text/jsx": {
      "compressible": true,
      "extensions": ["jsx"]
    },
    "text/less": {"extensions": ["less"]},
    "text/markdown": {"source": "iana"},
    "text/mathml": {
      "source": "nginx",
      "extensions": ["mml"]
    },
    "text/mizar": {"source": "iana"},
    "text/n3": {
      "source": "iana",
      "compressible": true,
      "extensions": ["n3"]
    },
    "text/parameters": {"source": "iana"},
    "text/parityfec": {"source": "iana"},
    "text/plain": {
      "source": "iana",
      "compressible": true,
      "extensions": ["txt", "text", "conf", "def", "list", "log", "in", "ini"]
    },
    "text/provenance-notation": {"source": "iana"},
    "text/prs.fallenstein.rst": {"source": "iana"},
    "text/prs.lines.tag": {
      "source": "iana",
      "extensions": ["dsc"]
    },
    "text/raptorfec": {"source": "iana"},
    "text/red": {"source": "iana"},
    "text/rfc822-headers": {"source": "iana"},
    "text/richtext": {
      "source": "iana",
      "compressible": true,
      "extensions": ["rtx"]
    },
    "text/rtf": {
      "source": "iana",
      "compressible": true,
      "extensions": ["rtf"]
    },
    "text/rtp-enc-aescm128": {"source": "iana"},
    "text/rtploopback": {"source": "iana"},
    "text/rtx": {"source": "iana"},
    "text/sgml": {
      "source": "iana",
      "extensions": ["sgml", "sgm"]
    },
    "text/stylus": {"extensions": ["stylus", "styl"]},
    "text/t140": {"source": "iana"},
    "text/tab-separated-values": {
      "source": "iana",
      "compressible": true,
      "extensions": ["tsv"]
    },
    "text/troff": {
      "source": "iana",
      "extensions": ["t", "tr", "roff", "man", "me", "ms"]
    },
    "text/turtle": {
      "source": "iana",
      "extensions": ["ttl"]
    },
    "text/ulpfec": {"source": "iana"},
    "text/uri-list": {
      "source": "iana",
      "compressible": true,
      "extensions": ["uri", "uris", "urls"]
    },
    "text/vcard": {
      "source": "iana",
      "compressible": true,
      "extensions": ["vcard"]
    },
    "text/vnd.a": {"source": "iana"},
    "text/vnd.abc": {"source": "iana"},
    "text/vnd.curl": {
      "source": "iana",
      "extensions": ["curl"]
    },
    "text/vnd.curl.dcurl": {
      "source": "apache",
      "extensions": ["dcurl"]
    },
    "text/vnd.curl.mcurl": {
      "source": "apache",
      "extensions": ["mcurl"]
    },
    "text/vnd.curl.scurl": {
      "source": "apache",
      "extensions": ["scurl"]
    },
    "text/vnd.debian.copyright": {"source": "iana"},
    "text/vnd.dmclientscript": {"source": "iana"},
    "text/vnd.dvb.subtitle": {
      "source": "iana",
      "extensions": ["sub"]
    },
    "text/vnd.esmertec.theme-descriptor": {"source": "iana"},
    "text/vnd.fly": {
      "source": "iana",
      "extensions": ["fly"]
    },
    "text/vnd.fmi.flexstor": {
      "source": "iana",
      "extensions": ["flx"]
    },
    "text/vnd.graphviz": {
      "source": "iana",
      "extensions": ["gv"]
    },
    "text/vnd.in3d.3dml": {
      "source": "iana",
      "extensions": ["3dml"]
    },
    "text/vnd.in3d.spot": {
      "source": "iana",
      "extensions": ["spot"]
    },
    "text/vnd.iptc.newsml": {"source": "iana"},
    "text/vnd.iptc.nitf": {"source": "iana"},
    "text/vnd.latex-z": {"source": "iana"},
    "text/vnd.motorola.reflex": {"source": "iana"},
    "text/vnd.ms-mediapackage": {"source": "iana"},
    "text/vnd.net2phone.commcenter.command": {"source": "iana"},
    "text/vnd.radisys.msml-basic-layout": {"source": "iana"},
    "text/vnd.si.uricatalogue": {"source": "iana"},
    "text/vnd.sun.j2me.app-descriptor": {
      "source": "iana",
      "extensions": ["jad"]
    },
    "text/vnd.trolltech.linguist": {"source": "iana"},
    "text/vnd.wap.si": {"source": "iana"},
    "text/vnd.wap.sl": {"source": "iana"},
    "text/vnd.wap.wml": {
      "source": "iana",
      "extensions": ["wml"]
    },
    "text/vnd.wap.wmlscript": {
      "source": "iana",
      "extensions": ["wmls"]
    },
    "text/vtt": {
      "charset": "UTF-8",
      "compressible": true,
      "extensions": ["vtt"]
    },
    "text/x-asm": {
      "source": "apache",
      "extensions": ["s", "asm"]
    },
    "text/x-c": {
      "source": "apache",
      "extensions": ["c", "cc", "cxx", "cpp", "h", "hh", "dic"]
    },
    "text/x-component": {
      "source": "nginx",
      "extensions": ["htc"]
    },
    "text/x-fortran": {
      "source": "apache",
      "extensions": ["f", "for", "f77", "f90"]
    },
    "text/x-gwt-rpc": {"compressible": true},
    "text/x-handlebars-template": {"extensions": ["hbs"]},
    "text/x-java-source": {
      "source": "apache",
      "extensions": ["java"]
    },
    "text/x-jquery-tmpl": {"compressible": true},
    "text/x-lua": {"extensions": ["lua"]},
    "text/x-markdown": {
      "compressible": true,
      "extensions": ["markdown", "md", "mkd"]
    },
    "text/x-nfo": {
      "source": "apache",
      "extensions": ["nfo"]
    },
    "text/x-opml": {
      "source": "apache",
      "extensions": ["opml"]
    },
    "text/x-pascal": {
      "source": "apache",
      "extensions": ["p", "pas"]
    },
    "text/x-processing": {
      "compressible": true,
      "extensions": ["pde"]
    },
    "text/x-sass": {"extensions": ["sass"]},
    "text/x-scss": {"extensions": ["scss"]},
    "text/x-setext": {
      "source": "apache",
      "extensions": ["etx"]
    },
    "text/x-sfv": {
      "source": "apache",
      "extensions": ["sfv"]
    },
    "text/x-uuencode": {
      "source": "apache",
      "extensions": ["uu"]
    },
    "text/x-vcalendar": {
      "source": "apache",
      "extensions": ["vcs"]
    },
    "text/x-vcard": {
      "source": "apache",
      "extensions": ["vcf"]
    },
    "text/xml": {
      "source": "iana",
      "compressible": true,
      "extensions": ["xml"]
    },
    "text/xml-external-parsed-entity": {"source": "iana"},
    "text/yaml": {"extensions": ["yaml", "yml"]},
    "video/1d-interleaved-parityfec": {"source": "apache"},
    "video/3gpp": {
      "source": "apache",
      "extensions": ["3gp", "3gpp"]
    },
    "video/3gpp-tt": {"source": "apache"},
    "video/3gpp2": {
      "source": "apache",
      "extensions": ["3g2"]
    },
    "video/bmpeg": {"source": "apache"},
    "video/bt656": {"source": "apache"},
    "video/celb": {"source": "apache"},
    "video/dv": {"source": "apache"},
    "video/h261": {
      "source": "apache",
      "extensions": ["h261"]
    },
    "video/h263": {
      "source": "apache",
      "extensions": ["h263"]
    },
    "video/h263-1998": {"source": "apache"},
    "video/h263-2000": {"source": "apache"},
    "video/h264": {
      "source": "apache",
      "extensions": ["h264"]
    },
    "video/h264-rcdo": {"source": "apache"},
    "video/h264-svc": {"source": "apache"},
    "video/jpeg": {
      "source": "apache",
      "extensions": ["jpgv"]
    },
    "video/jpeg2000": {"source": "apache"},
    "video/jpm": {
      "source": "apache",
      "extensions": ["jpm", "jpgm"]
    },
    "video/mj2": {
      "source": "apache",
      "extensions": ["mj2", "mjp2"]
    },
    "video/mp1s": {"source": "apache"},
    "video/mp2p": {"source": "apache"},
    "video/mp2t": {
      "source": "apache",
      "extensions": ["ts"]
    },
    "video/mp4": {
      "source": "apache",
      "compressible": false,
      "extensions": ["mp4", "mp4v", "mpg4"]
    },
    "video/mp4v-es": {"source": "apache"},
    "video/mpeg": {
      "source": "apache",
      "compressible": false,
      "extensions": ["mpeg", "mpg", "mpe", "m1v", "m2v"]
    },
    "video/mpeg4-generic": {"source": "apache"},
    "video/mpv": {"source": "apache"},
    "video/nv": {"source": "apache"},
    "video/ogg": {
      "source": "apache",
      "compressible": false,
      "extensions": ["ogv"]
    },
    "video/parityfec": {"source": "apache"},
    "video/pointer": {"source": "apache"},
    "video/quicktime": {
      "source": "apache",
      "compressible": false,
      "extensions": ["qt", "mov"]
    },
    "video/raw": {"source": "apache"},
    "video/rtp-enc-aescm128": {"source": "apache"},
    "video/rtx": {"source": "apache"},
    "video/smpte292m": {"source": "apache"},
    "video/ulpfec": {"source": "apache"},
    "video/vc1": {"source": "apache"},
    "video/vnd.cctv": {"source": "apache"},
    "video/vnd.dece.hd": {
      "source": "apache",
      "extensions": ["uvh", "uvvh"]
    },
    "video/vnd.dece.mobile": {
      "source": "apache",
      "extensions": ["uvm", "uvvm"]
    },
    "video/vnd.dece.mp4": {"source": "apache"},
    "video/vnd.dece.pd": {
      "source": "apache",
      "extensions": ["uvp", "uvvp"]
    },
    "video/vnd.dece.sd": {
      "source": "apache",
      "extensions": ["uvs", "uvvs"]
    },
    "video/vnd.dece.video": {
      "source": "apache",
      "extensions": ["uvv", "uvvv"]
    },
    "video/vnd.directv.mpeg": {"source": "apache"},
    "video/vnd.directv.mpeg-tts": {"source": "apache"},
    "video/vnd.dlna.mpeg-tts": {"source": "apache"},
    "video/vnd.dvb.file": {
      "source": "apache",
      "extensions": ["dvb"]
    },
    "video/vnd.fvt": {
      "source": "apache",
      "extensions": ["fvt"]
    },
    "video/vnd.hns.video": {"source": "apache"},
    "video/vnd.iptvforum.1dparityfec-1010": {"source": "apache"},
    "video/vnd.iptvforum.1dparityfec-2005": {"source": "apache"},
    "video/vnd.iptvforum.2dparityfec-1010": {"source": "apache"},
    "video/vnd.iptvforum.2dparityfec-2005": {"source": "apache"},
    "video/vnd.iptvforum.ttsavc": {"source": "apache"},
    "video/vnd.iptvforum.ttsmpeg2": {"source": "apache"},
    "video/vnd.motorola.video": {"source": "apache"},
    "video/vnd.motorola.videop": {"source": "apache"},
    "video/vnd.mpegurl": {
      "source": "apache",
      "extensions": ["mxu", "m4u"]
    },
    "video/vnd.ms-playready.media.pyv": {
      "source": "apache",
      "extensions": ["pyv"]
    },
    "video/vnd.nokia.interleaved-multimedia": {"source": "apache"},
    "video/vnd.nokia.videovoip": {"source": "apache"},
    "video/vnd.objectvideo": {"source": "apache"},
    "video/vnd.sealed.mpeg1": {"source": "apache"},
    "video/vnd.sealed.mpeg4": {"source": "apache"},
    "video/vnd.sealed.swf": {"source": "apache"},
    "video/vnd.sealedmedia.softseal.mov": {"source": "apache"},
    "video/vnd.uvvu.mp4": {
      "source": "apache",
      "extensions": ["uvu", "uvvu"]
    },
    "video/vnd.vivo": {
      "source": "apache",
      "extensions": ["viv"]
    },
    "video/webm": {
      "source": "apache",
      "compressible": false,
      "extensions": ["webm"]
    },
    "video/x-f4v": {
      "source": "apache",
      "extensions": ["f4v"]
    },
    "video/x-fli": {
      "source": "apache",
      "extensions": ["fli"]
    },
    "video/x-flv": {
      "source": "apache",
      "compressible": false,
      "extensions": ["flv"]
    },
    "video/x-m4v": {
      "source": "apache",
      "extensions": ["m4v"]
    },
    "video/x-matroska": {
      "source": "apache",
      "compressible": false,
      "extensions": ["mkv", "mk3d", "mks"]
    },
    "video/x-mng": {
      "source": "apache",
      "extensions": ["mng"]
    },
    "video/x-ms-asf": {
      "source": "apache",
      "extensions": ["asf", "asx"]
    },
    "video/x-ms-vob": {
      "source": "apache",
      "extensions": ["vob"]
    },
    "video/x-ms-wm": {
      "source": "apache",
      "extensions": ["wm"]
    },
    "video/x-ms-wmv": {
      "source": "apache",
      "compressible": false,
      "extensions": ["wmv"]
    },
    "video/x-ms-wmx": {
      "source": "apache",
      "extensions": ["wmx"]
    },
    "video/x-ms-wvx": {
      "source": "apache",
      "extensions": ["wvx"]
    },
    "video/x-msvideo": {
      "source": "apache",
      "extensions": ["avi"]
    },
    "video/x-sgi-movie": {
      "source": "apache",
      "extensions": ["movie"]
    },
    "video/x-smv": {
      "source": "apache",
      "extensions": ["smv"]
    },
    "x-conference/x-cooltalk": {
      "source": "apache",
      "extensions": ["ice"]
    },
    "x-shader/x-fragment": {"compressible": true},
    "x-shader/x-vertex": {"compressible": true}
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("8e", ["8d"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("8d");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("8f", ["8e"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("8e");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("90", ["8f", "68"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var db = require("8f");
  var extname = require("68").extname;
  var extractTypeRegExp = /^\s*([^;\s]*)(?:;|\s|$)/;
  var textTypeRegExp = /^text\//i;
  exports.charset = charset;
  exports.charsets = {lookup: charset};
  exports.contentType = contentType;
  exports.extension = extension;
  exports.extensions = Object.create(null);
  exports.lookup = lookup;
  exports.types = Object.create(null);
  populateMaps(exports.extensions, exports.types);
  function charset(type) {
    if (!type || typeof type !== 'string') {
      return false;
    }
    var match = extractTypeRegExp.exec(type);
    var mime = match && db[match[1].toLowerCase()];
    if (mime && mime.charset) {
      return mime.charset;
    }
    if (match && textTypeRegExp.test(match[1])) {
      return 'UTF-8';
    }
    return false;
  }
  function contentType(str) {
    if (!str || typeof str !== 'string') {
      return false;
    }
    var mime = str.indexOf('/') === -1 ? exports.lookup(str) : str;
    if (!mime) {
      return false;
    }
    if (mime.indexOf('charset') === -1) {
      var charset = exports.charset(mime);
      if (charset)
        mime += '; charset=' + charset.toLowerCase();
    }
    return mime;
  }
  function extension(type) {
    if (!type || typeof type !== 'string') {
      return false;
    }
    var match = extractTypeRegExp.exec(type);
    var exts = match && exports.extensions[match[1].toLowerCase()];
    if (!exts || !exts.length) {
      return false;
    }
    return exts[0];
  }
  function lookup(path) {
    if (!path || typeof path !== 'string') {
      return false;
    }
    var extension = extname('x.' + path).toLowerCase().substr(1);
    if (!extension) {
      return false;
    }
    return exports.types[extension] || false;
  }
  function populateMaps(extensions, types) {
    var preference = ['nginx', 'apache', undefined, 'iana'];
    Object.keys(db).forEach(function forEachMimeType(type) {
      var mime = db[type];
      var exts = mime.extensions;
      if (!exts || !exts.length) {
        return;
      }
      extensions[type] = exts;
      for (var i = 0; i < exts.length; i++) {
        var extension = exts[i];
        if (types[extension]) {
          var from = preference.indexOf(db[types[extension]].source);
          var to = preference.indexOf(mime.source);
          if (types[extension] !== 'application/octet-stream' && from > to || (from === to && types[extension].substr(0, 12) === 'application/')) {
            continue;
          }
        }
        types[extension] = type;
      }
    });
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("91", ["90"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("90");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("92", ["72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    module.exports = isJSON;
    function isJSON(body) {
      if (!body)
        return false;
      if ('string' == typeof body)
        return false;
      if ('function' == typeof body.pipe)
        return false;
      if (Buffer.isBuffer(body))
        return false;
      return true;
    }
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("93", ["92"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("92");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("94", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var matchHtmlRegExp = /["'&<>]/;
  module.exports = escapeHtml;
  function escapeHtml(string) {
    var str = '' + string;
    var match = matchHtmlRegExp.exec(str);
    if (!match) {
      return str;
    }
    var escape;
    var html = '';
    var index = 0;
    var lastIndex = 0;
    for (index = match.index; index < str.length; index++) {
      switch (str.charCodeAt(index)) {
        case 34:
          escape = '&quot;';
          break;
        case 38:
          escape = '&amp;';
          break;
        case 39:
          escape = '&#39;';
          break;
        case 60:
          escape = '&lt;';
          break;
        case 62:
          escape = '&gt;';
          break;
        default:
          continue;
      }
      if (lastIndex !== index) {
        html += str.substring(lastIndex, index);
      }
      lastIndex = index + 1;
      html += escape;
    }
    return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("95", ["94"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("94");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("96", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var paramRegExp = /; *([!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) *= *("(?:[ !\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u0020-\u007e])*"|[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) */g;
  var textRegExp = /^[\u0020-\u007e\u0080-\u00ff]+$/;
  var tokenRegExp = /^[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+$/;
  var qescRegExp = /\\([\u0000-\u007f])/g;
  var quoteRegExp = /([\\"])/g;
  var subtypeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/;
  var typeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/;
  var typeRegExp = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;
  exports.format = format;
  exports.parse = parse;
  function format(obj) {
    if (!obj || typeof obj !== 'object') {
      throw new TypeError('argument obj is required');
    }
    var parameters = obj.parameters;
    var subtype = obj.subtype;
    var suffix = obj.suffix;
    var type = obj.type;
    if (!type || !typeNameRegExp.test(type)) {
      throw new TypeError('invalid type');
    }
    if (!subtype || !subtypeNameRegExp.test(subtype)) {
      throw new TypeError('invalid subtype');
    }
    var string = type + '/' + subtype;
    if (suffix) {
      if (!typeNameRegExp.test(suffix)) {
        throw new TypeError('invalid suffix');
      }
      string += '+' + suffix;
    }
    if (parameters && typeof parameters === 'object') {
      var param;
      var params = Object.keys(parameters).sort();
      for (var i = 0; i < params.length; i++) {
        param = params[i];
        if (!tokenRegExp.test(param)) {
          throw new TypeError('invalid parameter name');
        }
        string += '; ' + param + '=' + qstring(parameters[param]);
      }
    }
    return string;
  }
  function parse(string) {
    if (!string) {
      throw new TypeError('argument string is required');
    }
    if (typeof string === 'object') {
      string = getcontenttype(string);
    }
    if (typeof string !== 'string') {
      throw new TypeError('argument string is required to be a string');
    }
    var index = string.indexOf(';');
    var type = index !== -1 ? string.substr(0, index) : string;
    var key;
    var match;
    var obj = splitType(type);
    var params = {};
    var value;
    paramRegExp.lastIndex = index;
    while (match = paramRegExp.exec(string)) {
      if (match.index !== index) {
        throw new TypeError('invalid parameter format');
      }
      index += match[0].length;
      key = match[1].toLowerCase();
      value = match[2];
      if (value[0] === '"') {
        value = value.substr(1, value.length - 2).replace(qescRegExp, '$1');
      }
      params[key] = value;
    }
    if (index !== -1 && index !== string.length) {
      throw new TypeError('invalid parameter format');
    }
    obj.parameters = params;
    return obj;
  }
  function getcontenttype(obj) {
    if (typeof obj.getHeader === 'function') {
      return obj.getHeader('content-type');
    }
    if (typeof obj.headers === 'object') {
      return obj.headers && obj.headers['content-type'];
    }
  }
  function qstring(val) {
    var str = String(val);
    if (tokenRegExp.test(str)) {
      return str;
    }
    if (str.length > 0 && !textRegExp.test(str)) {
      throw new TypeError('invalid parameter value');
    }
    return '"' + str.replace(quoteRegExp, '\\$1') + '"';
  }
  function splitType(string) {
    var match = typeRegExp.exec(string.toLowerCase());
    if (!match) {
      throw new TypeError('invalid media type');
    }
    var type = match[1];
    var subtype = match[2];
    var suffix;
    var index = subtype.lastIndexOf('+');
    if (index !== -1) {
      suffix = subtype.substr(index + 1);
      subtype = subtype.substr(0, index);
    }
    var obj = {
      type: type,
      subtype: subtype,
      suffix: suffix
    };
    return obj;
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("97", ["96"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("96");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("98", ["97", "91"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var typer = require("97");
  var mime = require("91");
  module.exports = typeofrequest;
  module.exports.is = typeis;
  module.exports.hasBody = hasbody;
  module.exports.normalize = normalize;
  module.exports.match = mimeMatch;
  function typeis(value, types_) {
    var i;
    var types = types_;
    var val = tryNormalizeType(value);
    if (!val) {
      return false;
    }
    if (types && !Array.isArray(types)) {
      types = new Array(arguments.length - 1);
      for (i = 0; i < types.length; i++) {
        types[i] = arguments[i + 1];
      }
    }
    if (!types || !types.length) {
      return val;
    }
    var type;
    for (i = 0; i < types.length; i++) {
      if (mimeMatch(normalize(type = types[i]), val)) {
        return type[0] === '+' || type.indexOf('*') !== -1 ? val : type;
      }
    }
    return false;
  }
  function hasbody(req) {
    return req.headers['transfer-encoding'] !== undefined || !isNaN(req.headers['content-length']);
  }
  function typeofrequest(req, types_) {
    var types = types_;
    if (!hasbody(req)) {
      return null;
    }
    if (arguments.length > 2) {
      types = new Array(arguments.length - 1);
      for (var i = 0; i < types.length; i++) {
        types[i] = arguments[i + 1];
      }
    }
    var value = req.headers['content-type'];
    return typeis(value, types);
  }
  function normalize(type) {
    if (typeof type !== 'string') {
      return false;
    }
    switch (type) {
      case 'urlencoded':
        return 'application/x-www-form-urlencoded';
      case 'multipart':
        return 'multipart/*';
    }
    if (type[0] === '+') {
      return '*/*' + type;
    }
    return type.indexOf('/') === -1 ? mime.lookup(type) : type;
  }
  function mimeMatch(expected, actual) {
    if (expected === false) {
      return false;
    }
    var actualParts = actual.split('/');
    var expectedParts = expected.split('/');
    if (actualParts.length !== 2 || expectedParts.length !== 2) {
      return false;
    }
    if (expectedParts[0] !== '*' && expectedParts[0] !== actualParts[0]) {
      return false;
    }
    if (expectedParts[1].substr(0, 2) === '*+') {
      return expectedParts[1].length <= actualParts[1].length + 1 && expectedParts[1].substr(1) === actualParts[1].substr(1 - expectedParts[1].length);
    }
    if (expectedParts[1] !== '*' && expectedParts[1] !== actualParts[1]) {
      return false;
    }
    return true;
  }
  function normalizeType(value) {
    var type = typer.parse(value);
    type.parameters = undefined;
    return typer.format(type);
  }
  function tryNormalizeType(value) {
    try {
      return normalizeType(value);
    } catch (err) {
      return null;
    }
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("99", ["98"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("98");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("9a", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "100": "Continue",
    "101": "Switching Protocols",
    "102": "Processing",
    "200": "OK",
    "201": "Created",
    "202": "Accepted",
    "203": "Non-Authoritative Information",
    "204": "No Content",
    "205": "Reset Content",
    "206": "Partial Content",
    "207": "Multi-Status",
    "208": "Already Reported",
    "226": "IM Used",
    "300": "Multiple Choices",
    "301": "Moved Permanently",
    "302": "Found",
    "303": "See Other",
    "304": "Not Modified",
    "305": "Use Proxy",
    "306": "(Unused)",
    "307": "Temporary Redirect",
    "308": "Permanent Redirect",
    "400": "Bad Request",
    "401": "Unauthorized",
    "402": "Payment Required",
    "403": "Forbidden",
    "404": "Not Found",
    "405": "Method Not Allowed",
    "406": "Not Acceptable",
    "407": "Proxy Authentication Required",
    "408": "Request Timeout",
    "409": "Conflict",
    "410": "Gone",
    "411": "Length Required",
    "412": "Precondition Failed",
    "413": "Payload Too Large",
    "414": "URI Too Long",
    "415": "Unsupported Media Type",
    "416": "Range Not Satisfiable",
    "417": "Expectation Failed",
    "418": "I'm a teapot",
    "422": "Unprocessable Entity",
    "423": "Locked",
    "424": "Failed Dependency",
    "425": "Unordered Collection",
    "426": "Upgrade Required",
    "428": "Precondition Required",
    "429": "Too Many Requests",
    "431": "Request Header Fields Too Large",
    "451": "Unavailable For Legal Reasons",
    "500": "Internal Server Error",
    "501": "Not Implemented",
    "502": "Bad Gateway",
    "503": "Service Unavailable",
    "504": "Gateway Timeout",
    "505": "HTTP Version Not Supported",
    "506": "Variant Also Negotiates",
    "507": "Insufficient Storage",
    "508": "Loop Detected",
    "509": "Bandwidth Limit Exceeded",
    "510": "Not Extended",
    "511": "Network Authentication Required"
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("9b", ["9a"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var codes = require("9a");
  module.exports = status;
  status.codes = Object.keys(codes).map(function(code) {
    code = ~~code;
    var msg = codes[code];
    status[code] = msg;
    status[msg] = status[msg.toLowerCase()] = code;
    return code;
  });
  status.redirect = {
    300: true,
    301: true,
    302: true,
    303: true,
    305: true,
    307: true,
    308: true
  };
  status.empty = {
    204: true,
    205: true,
    304: true
  };
  status.retry = {
    502: true,
    503: true,
    504: true
  };
  function status(code) {
    if (typeof code === 'number') {
      if (!status[code])
        throw new Error('invalid status code: ' + code);
      return code;
    }
    if (typeof code !== 'string') {
      throw new TypeError('code must be a number or string');
    }
    var n = parseInt(code, 10);
    if (!isNaN(n)) {
      if (!status[n])
        throw new Error('invalid status code: ' + n);
      return n;
    }
    n = status[code.toLowerCase()];
    if (!n)
      throw new Error('invalid status message: "' + code + '"');
    return n;
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("9c", ["9b"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("9b");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("9d", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  if ($__System._nodeRequire) {
    module.exports = $__System._nodeRequire('fs');
  } else {
    exports.readFileSync = function(address) {
      var output;
      var xhr = new XMLHttpRequest();
      xhr.open('GET', address, false);
      xhr.onreadystatechange = function(e) {
        if (xhr.readyState == 4) {
          var status = xhr.status;
          if ((status > 399 && status < 600) || status == 400) {
            throw 'File read error on ' + address;
          } else
            output = xhr.responseText;
        }
      };
      xhr.send(null);
      return output;
    };
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("9e", ["9d"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("9d");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("9f", ["9e", "8a"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var ReadStream = require("9e").ReadStream;
  var Stream = require("8a");
  module.exports = function destroy(stream) {
    if (stream instanceof ReadStream) {
      return destroyReadStream(stream);
    }
    if (!(stream instanceof Stream)) {
      return stream;
    }
    if (typeof stream.destroy === 'function') {
      stream.destroy();
    }
    return stream;
  };
  function destroyReadStream(stream) {
    stream.destroy();
    if (typeof stream.close === 'function') {
      stream.on('open', onopenClose);
    }
    return stream;
  }
  function onopenClose() {
    if (typeof this.fd === 'number') {
      this.close();
    }
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("a0", ["9f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("9f");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("a1", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = function isBuffer(arg) {
    return arg && typeof arg === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("a2", ["a1", "76", "3f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    var formatRegExp = /%[sdj%]/g;
    exports.format = function(f) {
      if (!isString(f)) {
        var objects = [];
        for (var i = 0; i < arguments.length; i++) {
          objects.push(inspect(arguments[i]));
        }
        return objects.join(' ');
      }
      var i = 1;
      var args = arguments;
      var len = args.length;
      var str = String(f).replace(formatRegExp, function(x) {
        if (x === '%%')
          return '%';
        if (i >= len)
          return x;
        switch (x) {
          case '%s':
            return String(args[i++]);
          case '%d':
            return Number(args[i++]);
          case '%j':
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return '[Circular]';
            }
          default:
            return x;
        }
      });
      for (var x = args[i]; i < len; x = args[++i]) {
        if (isNull(x) || !isObject(x)) {
          str += ' ' + x;
        } else {
          str += ' ' + inspect(x);
        }
      }
      return str;
    };
    exports.deprecate = function(fn, msg) {
      if (isUndefined(global.process)) {
        return function() {
          return exports.deprecate(fn, msg).apply(this, arguments);
        };
      }
      if (process.noDeprecation === true) {
        return fn;
      }
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (process.throwDeprecation) {
            throw new Error(msg);
          } else if (process.traceDeprecation) {
            console.trace(msg);
          } else {
            console.error(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
      return deprecated;
    };
    var debugs = {};
    var debugEnviron;
    exports.debuglog = function(set) {
      if (isUndefined(debugEnviron))
        debugEnviron = process.env.NODE_DEBUG || '';
      set = set.toUpperCase();
      if (!debugs[set]) {
        if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
          var pid = process.pid;
          debugs[set] = function() {
            var msg = exports.format.apply(exports, arguments);
            console.error('%s %d: %s', set, pid, msg);
          };
        } else {
          debugs[set] = function() {};
        }
      }
      return debugs[set];
    };
    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      if (arguments.length >= 3)
        ctx.depth = arguments[2];
      if (arguments.length >= 4)
        ctx.colors = arguments[3];
      if (isBoolean(opts)) {
        ctx.showHidden = opts;
      } else if (opts) {
        exports._extend(ctx, opts);
      }
      if (isUndefined(ctx.showHidden))
        ctx.showHidden = false;
      if (isUndefined(ctx.depth))
        ctx.depth = 2;
      if (isUndefined(ctx.colors))
        ctx.colors = false;
      if (isUndefined(ctx.customInspect))
        ctx.customInspect = true;
      if (ctx.colors)
        ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }
    exports.inspect = inspect;
    inspect.colors = {
      'bold': [1, 22],
      'italic': [3, 23],
      'underline': [4, 24],
      'inverse': [7, 27],
      'white': [37, 39],
      'grey': [90, 39],
      'black': [30, 39],
      'blue': [34, 39],
      'cyan': [36, 39],
      'green': [32, 39],
      'magenta': [35, 39],
      'red': [31, 39],
      'yellow': [33, 39]
    };
    inspect.styles = {
      'special': 'cyan',
      'number': 'yellow',
      'boolean': 'yellow',
      'undefined': 'grey',
      'null': 'bold',
      'string': 'green',
      'date': 'magenta',
      'regexp': 'red'
    };
    function stylizeWithColor(str, styleType) {
      var style = inspect.styles[styleType];
      if (style) {
        return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
      } else {
        return str;
      }
    }
    function stylizeNoColor(str, styleType) {
      return str;
    }
    function arrayToHash(array) {
      var hash = {};
      array.forEach(function(val, idx) {
        hash[val] = true;
      });
      return hash;
    }
    function formatValue(ctx, value, recurseTimes) {
      if (ctx.customInspect && value && isFunction(value.inspect) && value.inspect !== exports.inspect && !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);
      if (ctx.showHidden) {
        keys = Object.getOwnPropertyNames(value);
      }
      if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
        return formatError(value);
      }
      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }
        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }
        if (isError(value)) {
          return formatError(value);
        }
      }
      var base = '',
          array = false,
          braces = ['{', '}'];
      if (isArray(value)) {
        array = true;
        braces = ['[', ']'];
      }
      if (isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }
      if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }
      if (isDate(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }
      if (isError(value)) {
        base = ' ' + formatError(value);
      }
      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }
      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }
      ctx.seen.push(value);
      var output;
      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function(key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }
      ctx.seen.pop();
      return reduceToSingleString(output, base, braces);
    }
    function formatPrimitive(ctx, value) {
      if (isUndefined(value))
        return ctx.stylize('undefined', 'undefined');
      if (isString(value)) {
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
        return ctx.stylize(simple, 'string');
      }
      if (isNumber(value))
        return ctx.stylize('' + value, 'number');
      if (isBoolean(value))
        return ctx.stylize('' + value, 'boolean');
      if (isNull(value))
        return ctx.stylize('null', 'null');
    }
    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }
    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i = 0,
          l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
        } else {
          output.push('');
        }
      }
      keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
        }
      });
      return output;
    }
    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name,
          str,
          desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || {value: value[key]};
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }
      if (!hasOwnProperty(visibleKeys, key)) {
        name = '[' + key + ']';
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function(line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function(line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }
      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }
      return name + ': ' + str;
    }
    function reduceToSingleString(output, base, braces) {
      var numLinesEst = 0;
      var length = output.reduce(function(prev, cur) {
        numLinesEst++;
        if (cur.indexOf('\n') >= 0)
          numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
      }, 0);
      if (length > 60) {
        return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
      }
      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }
    function isArray(ar) {
      return Array.isArray(ar);
    }
    exports.isArray = isArray;
    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }
    exports.isBoolean = isBoolean;
    function isNull(arg) {
      return arg === null;
    }
    exports.isNull = isNull;
    function isNullOrUndefined(arg) {
      return arg == null;
    }
    exports.isNullOrUndefined = isNullOrUndefined;
    function isNumber(arg) {
      return typeof arg === 'number';
    }
    exports.isNumber = isNumber;
    function isString(arg) {
      return typeof arg === 'string';
    }
    exports.isString = isString;
    function isSymbol(arg) {
      return typeof arg === 'symbol';
    }
    exports.isSymbol = isSymbol;
    function isUndefined(arg) {
      return arg === void 0;
    }
    exports.isUndefined = isUndefined;
    function isRegExp(re) {
      return isObject(re) && objectToString(re) === '[object RegExp]';
    }
    exports.isRegExp = isRegExp;
    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }
    exports.isObject = isObject;
    function isDate(d) {
      return isObject(d) && objectToString(d) === '[object Date]';
    }
    exports.isDate = isDate;
    function isError(e) {
      return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
    }
    exports.isError = isError;
    function isFunction(arg) {
      return typeof arg === 'function';
    }
    exports.isFunction = isFunction;
    function isPrimitive(arg) {
      return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || typeof arg === 'undefined';
    }
    exports.isPrimitive = isPrimitive;
    exports.isBuffer = require("a1");
    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }
    function pad(n) {
      return n < 10 ? '0' + n.toString(10) : n.toString(10);
    }
    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    function timestamp() {
      var d = new Date();
      var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
      return [d.getDate(), months[d.getMonth()], time].join(' ');
    }
    exports.log = function() {
      console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
    };
    exports.inherits = require("76");
    exports._extend = function(origin, add) {
      if (!add || !isObject(add))
        return origin;
      var keys = Object.keys(add);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add[keys[i]];
      }
      return origin;
    };
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
  })(require("3f"));
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("a3", ["a2"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("a2");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("a4", ["a3"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var util = require("a3");
  var pSlice = Array.prototype.slice;
  var hasOwn = Object.prototype.hasOwnProperty;
  var assert = module.exports = ok;
  assert.AssertionError = function AssertionError(options) {
    this.name = 'AssertionError';
    this.actual = options.actual;
    this.expected = options.expected;
    this.operator = options.operator;
    if (options.message) {
      this.message = options.message;
      this.generatedMessage = false;
    } else {
      this.message = getMessage(this);
      this.generatedMessage = true;
    }
    var stackStartFunction = options.stackStartFunction || fail;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, stackStartFunction);
    } else {
      var err = new Error();
      if (err.stack) {
        var out = err.stack;
        var fn_name = stackStartFunction.name;
        var idx = out.indexOf('\n' + fn_name);
        if (idx >= 0) {
          var next_line = out.indexOf('\n', idx + 1);
          out = out.substring(next_line + 1);
        }
        this.stack = out;
      }
    }
  };
  util.inherits(assert.AssertionError, Error);
  function replacer(key, value) {
    if (util.isUndefined(value)) {
      return '' + value;
    }
    if (util.isNumber(value) && !isFinite(value)) {
      return value.toString();
    }
    if (util.isFunction(value) || util.isRegExp(value)) {
      return value.toString();
    }
    return value;
  }
  function truncate(s, n) {
    if (util.isString(s)) {
      return s.length < n ? s : s.slice(0, n);
    } else {
      return s;
    }
  }
  function getMessage(self) {
    return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' + self.operator + ' ' + truncate(JSON.stringify(self.expected, replacer), 128);
  }
  function fail(actual, expected, message, operator, stackStartFunction) {
    throw new assert.AssertionError({
      message: message,
      actual: actual,
      expected: expected,
      operator: operator,
      stackStartFunction: stackStartFunction
    });
  }
  assert.fail = fail;
  function ok(value, message) {
    if (!value)
      fail(value, true, message, '==', assert.ok);
  }
  assert.ok = ok;
  assert.equal = function equal(actual, expected, message) {
    if (actual != expected)
      fail(actual, expected, message, '==', assert.equal);
  };
  assert.notEqual = function notEqual(actual, expected, message) {
    if (actual == expected) {
      fail(actual, expected, message, '!=', assert.notEqual);
    }
  };
  assert.deepEqual = function deepEqual(actual, expected, message) {
    if (!_deepEqual(actual, expected)) {
      fail(actual, expected, message, 'deepEqual', assert.deepEqual);
    }
  };
  function _deepEqual(actual, expected) {
    if (actual === expected) {
      return true;
    } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
      if (actual.length != expected.length)
        return false;
      for (var i = 0; i < actual.length; i++) {
        if (actual[i] !== expected[i])
          return false;
      }
      return true;
    } else if (util.isDate(actual) && util.isDate(expected)) {
      return actual.getTime() === expected.getTime();
    } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
      return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase;
    } else if (!util.isObject(actual) && !util.isObject(expected)) {
      return actual == expected;
    } else {
      return objEquiv(actual, expected);
    }
  }
  function isArguments(object) {
    return Object.prototype.toString.call(object) == '[object Arguments]';
  }
  function objEquiv(a, b) {
    if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
      return false;
    if (a.prototype !== b.prototype)
      return false;
    if (util.isPrimitive(a) || util.isPrimitive(b)) {
      return a === b;
    }
    var aIsArgs = isArguments(a),
        bIsArgs = isArguments(b);
    if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
      return false;
    if (aIsArgs) {
      a = pSlice.call(a);
      b = pSlice.call(b);
      return _deepEqual(a, b);
    }
    var ka = objectKeys(a),
        kb = objectKeys(b),
        key,
        i;
    if (ka.length != kb.length)
      return false;
    ka.sort();
    kb.sort();
    for (i = ka.length - 1; i >= 0; i--) {
      if (ka[i] != kb[i])
        return false;
    }
    for (i = ka.length - 1; i >= 0; i--) {
      key = ka[i];
      if (!_deepEqual(a[key], b[key]))
        return false;
    }
    return true;
  }
  assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
    if (_deepEqual(actual, expected)) {
      fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
    }
  };
  assert.strictEqual = function strictEqual(actual, expected, message) {
    if (actual !== expected) {
      fail(actual, expected, message, '===', assert.strictEqual);
    }
  };
  assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
    if (actual === expected) {
      fail(actual, expected, message, '!==', assert.notStrictEqual);
    }
  };
  function expectedException(actual, expected) {
    if (!actual || !expected) {
      return false;
    }
    if (Object.prototype.toString.call(expected) == '[object RegExp]') {
      return expected.test(actual);
    } else if (actual instanceof expected) {
      return true;
    } else if (expected.call({}, actual) === true) {
      return true;
    }
    return false;
  }
  function _throws(shouldThrow, block, expected, message) {
    var actual;
    if (util.isString(expected)) {
      message = expected;
      expected = null;
    }
    try {
      block();
    } catch (e) {
      actual = e;
    }
    message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');
    if (shouldThrow && !actual) {
      fail(actual, expected, 'Missing expected exception' + message);
    }
    if (!shouldThrow && expectedException(actual, expected)) {
      fail(actual, expected, 'Got unwanted exception' + message);
    }
    if ((shouldThrow && actual && expected && !expectedException(actual, expected)) || (!shouldThrow && actual)) {
      throw actual;
    }
  }
  assert.throws = function(block, error, message) {
    _throws.apply(this, [true].concat(pSlice.call(arguments)));
  };
  assert.doesNotThrow = function(block, message) {
    _throws.apply(this, [false].concat(pSlice.call(arguments)));
  };
  assert.ifError = function(err) {
    if (err) {
      throw err;
    }
  };
  var objectKeys = Object.keys || function(obj) {
    var keys = [];
    for (var key in obj) {
      if (hasOwn.call(obj, key))
        keys.push(key);
    }
    return keys;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("a5", ["a4"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("a4");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("a6", ["a5"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = $__System._nodeRequire ? $__System._nodeRequire('assert') : require("a5");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("a7", ["a6"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("a6");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("a8", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  module.exports = vary;
  module.exports.append = append;
  var separators = /[\(\)<>@,;:\\"\/\[\]\?=\{\}\u0020\u0009]/;
  function append(header, field) {
    if (typeof header !== 'string') {
      throw new TypeError('header argument is required');
    }
    if (!field) {
      throw new TypeError('field argument is required');
    }
    var fields = !Array.isArray(field) ? parse(String(field)) : field;
    for (var i = 0; i < fields.length; i++) {
      if (separators.test(fields[i])) {
        throw new TypeError('field argument contains an invalid header');
      }
    }
    if (header === '*') {
      return header;
    }
    var val = header;
    var vals = parse(header.toLowerCase());
    if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {
      return '*';
    }
    for (var i = 0; i < fields.length; i++) {
      var fld = fields[i].toLowerCase();
      if (vals.indexOf(fld) === -1) {
        vals.push(fld);
        val = val ? val + ', ' + fields[i] : fields[i];
      }
    }
    return val;
  }
  function parse(header) {
    return header.trim().split(/ *, */);
  }
  function vary(res, field) {
    if (!res || !res.getHeader || !res.setHeader) {
      throw new TypeError('res argument is required');
    }
    var val = res.getHeader('Vary') || '';
    var header = Array.isArray(val) ? val.join(', ') : String(val);
    if ((val = append(header, field))) {
      res.setHeader('Vary', val);
    }
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("a9", ["a8"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("a8");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("aa", ["74", "8c", "91", "64", "93", "95", "99", "9c", "a0", "a7", "68", "a9", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var contentDisposition = require("74");
    var ensureErrorHandler = require("8c");
    var getType = require("91").contentType;
    var onFinish = require("64");
    var isJSON = require("93");
    var escape = require("95");
    var typeis = require("99").is;
    var statuses = require("9c");
    var destroy = require("a0");
    var assert = require("a7");
    var path = require("68");
    var vary = require("a9");
    var extname = path.extname;
    module.exports = {
      get socket() {
        return this.ctx.req.socket;
      },
      get header() {
        return this.res._headers || {};
      },
      get headers() {
        return this.header;
      },
      get status() {
        return this.res.statusCode;
      },
      set status(code) {
        assert('number' == typeof code, 'status code must be a number');
        assert(statuses[code], 'invalid status code: ' + code);
        this._explicitStatus = true;
        this.res.statusCode = code;
        this.res.statusMessage = statuses[code];
        if (this.body && statuses.empty[code])
          this.body = null;
      },
      get message() {
        return this.res.statusMessage || statuses[this.status];
      },
      set message(msg) {
        this.res.statusMessage = msg;
      },
      get body() {
        return this._body;
      },
      set body(val) {
        var original = this._body;
        this._body = val;
        if (null == val) {
          if (!statuses.empty[this.status])
            this.status = 204;
          this.res.removeHeader('Content-Type');
          this.res.removeHeader('Content-Length');
          this.res.removeHeader('Transfer-Encoding');
          return;
        }
        if (!this._explicitStatus)
          this.status = 200;
        var setType = !this.header['content-type'];
        if ('string' == typeof val) {
          if (setType)
            this.type = /^\s*</.test(val) ? 'html' : 'text';
          this.length = Buffer.byteLength(val);
          return;
        }
        if (Buffer.isBuffer(val)) {
          if (setType)
            this.type = 'bin';
          this.length = val.length;
          return;
        }
        if ('function' == typeof val.pipe) {
          onFinish(this.res, destroy.bind(null, val));
          ensureErrorHandler(val, this.ctx.onerror);
          if (null != original && original != val)
            this.remove('Content-Length');
          if (setType)
            this.type = 'bin';
          return;
        }
        this.remove('Content-Length');
        this.type = 'json';
      },
      set length(n) {
        this.set('Content-Length', n);
      },
      get length() {
        var len = this.header['content-length'];
        var body = this.body;
        if (null == len) {
          if (!body)
            return;
          if ('string' == typeof body)
            return Buffer.byteLength(body);
          if (Buffer.isBuffer(body))
            return body.length;
          if (isJSON(body))
            return Buffer.byteLength(JSON.stringify(body));
          return;
        }
        return ~~len;
      },
      get headerSent() {
        return this.res.headersSent;
      },
      vary: function(field) {
        vary(this.res, field);
      },
      redirect: function(url, alt) {
        if ('back' == url)
          url = this.ctx.get('Referrer') || alt || '/';
        this.set('Location', url);
        if (!statuses.redirect[this.status])
          this.status = 302;
        if (this.ctx.accepts('html')) {
          url = escape(url);
          this.type = 'text/html; charset=utf-8';
          this.body = 'Redirecting to <a href="' + url + '">' + url + '</a>.';
          return;
        }
        this.type = 'text/plain; charset=utf-8';
        this.body = 'Redirecting to ' + url + '.';
      },
      attachment: function(filename) {
        if (filename)
          this.type = extname(filename);
        this.set('Content-Disposition', contentDisposition(filename));
      },
      set type(type) {
        this.set('Content-Type', getType(type) || 'application/octet-stream');
      },
      set lastModified(val) {
        if ('string' == typeof val)
          val = new Date(val);
        this.set('Last-Modified', val.toUTCString());
      },
      get lastModified() {
        var date = this.get('last-modified');
        if (date)
          return new Date(date);
      },
      set etag(val) {
        if (!/^(W\/)?"/.test(val))
          val = '"' + val + '"';
        this.set('ETag', val);
      },
      get etag() {
        return this.get('ETag');
      },
      get type() {
        var type = this.get('Content-Type');
        if (!type)
          return '';
        return type.split(';')[0];
      },
      is: function(types) {
        var type = this.type;
        if (!types)
          return type || false;
        if (!Array.isArray(types))
          types = [].slice.call(arguments);
        return typeis(type, types);
      },
      get: function(field) {
        return this.header[field.toLowerCase()] || '';
      },
      set: function(field, val) {
        if (2 == arguments.length) {
          if (Array.isArray(val))
            val = val.map(String);
          else
            val = String(val);
          this.res.setHeader(field, val);
        } else {
          for (var key in field) {
            this.set(key, field[key]);
          }
        }
      },
      append: function(field, val) {
        var prev = this.get(field);
        if (prev) {
          val = Array.isArray(prev) ? prev.concat(val) : [prev].concat(val);
        }
        return this.set(field, val);
      },
      remove: function(field) {
        this.res.removeHeader(field);
      },
      get writable() {
        var socket = this.res.socket;
        if (!socket)
          return false;
        return socket.writable;
      },
      inspect: function() {
        if (!this.res)
          return;
        var o = this.toJSON();
        o.body = this.body;
        return o;
      },
      toJSON: function() {
        return {
          status: this.status,
          message: this.message,
          header: this.header
        };
      }
    };
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("ab", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = compose;
  function compose(middleware) {
    return function*(next) {
      var i = middleware.length;
      var prev = next || noop();
      var curr;
      while (i--) {
        curr = middleware[i];
        prev = curr.call(this, prev);
      }
      yield* prev;
    };
  }
  function* noop() {}
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("ac", ["ab"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("ab");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("ad", ["9c", "76"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var statuses = require("9c");
  var inherits = require("76");
  function toIdentifier(str) {
    return str.split(' ').map(function(token) {
      return token.slice(0, 1).toUpperCase() + token.slice(1);
    }).join('').replace(/[^ _0-9a-z]/gi, '');
  }
  exports = module.exports = function httpError() {
    var err;
    var msg;
    var status = 500;
    var props = {};
    for (var i = 0; i < arguments.length; i++) {
      var arg = arguments[i];
      if (arg instanceof Error) {
        err = arg;
        status = err.status || err.statusCode || status;
        continue;
      }
      switch (typeof arg) {
        case 'string':
          msg = arg;
          break;
        case 'number':
          status = arg;
          break;
        case 'object':
          props = arg;
          break;
      }
    }
    if (typeof status !== 'number' || !statuses[status]) {
      status = 500;
    }
    var HttpError = exports[status];
    if (!err) {
      err = HttpError ? new HttpError(msg) : new Error(msg || statuses[status]);
      Error.captureStackTrace(err, httpError);
    }
    if (!HttpError || !(err instanceof HttpError)) {
      err.expose = status < 500;
      err.status = err.statusCode = status;
    }
    for (var key in props) {
      if (key !== 'status' && key !== 'statusCode') {
        err[key] = props[key];
      }
    }
    return err;
  };
  var codes = statuses.codes.filter(function(num) {
    return num >= 400;
  });
  codes.forEach(function(code) {
    var name = toIdentifier(statuses[code]);
    var className = name.match(/Error$/) ? name : name + 'Error';
    if (code >= 500) {
      var ServerError = function ServerError(msg) {
        var self = new Error(msg != null ? msg : statuses[code]);
        Error.captureStackTrace(self, ServerError);
        self.__proto__ = ServerError.prototype;
        Object.defineProperty(self, 'name', {
          enumerable: false,
          configurable: true,
          value: className,
          writable: true
        });
        return self;
      };
      inherits(ServerError, Error);
      ServerError.prototype.status = ServerError.prototype.statusCode = code;
      ServerError.prototype.expose = false;
      exports[code] = exports[name] = ServerError;
      return;
    }
    var ClientError = function ClientError(msg) {
      var self = new Error(msg != null ? msg : statuses[code]);
      Error.captureStackTrace(self, ClientError);
      self.__proto__ = ClientError.prototype;
      Object.defineProperty(self, 'name', {
        enumerable: false,
        configurable: true,
        value: className,
        writable: true
      });
      return self;
    };
    inherits(ClientError, Error);
    ClientError.prototype.status = ClientError.prototype.statusCode = code;
    ClientError.prototype.expose = true;
    exports[code] = exports[name] = ClientError;
    return;
  });
  exports["I'mateapot"] = exports.ImATeapot;
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("ae", ["ad"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("ad");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("af", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  exports = module.exports = typeof Object.keys === 'function' ? Object.keys : shim;
  exports.shim = shim;
  function shim(obj) {
    var keys = [];
    for (var key in obj)
      keys.push(key);
    return keys;
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("b0", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var supportsArgumentsClass = (function() {
    return Object.prototype.toString.call(arguments);
  })() == '[object Arguments]';
  exports = module.exports = supportsArgumentsClass ? supported : unsupported;
  exports.supported = supported;
  function supported(object) {
    return Object.prototype.toString.call(object) == '[object Arguments]';
  }
  ;
  exports.unsupported = unsupported;
  function unsupported(object) {
    return object && typeof object == 'object' && typeof object.length == 'number' && Object.prototype.hasOwnProperty.call(object, 'callee') && !Object.prototype.propertyIsEnumerable.call(object, 'callee') || false;
  }
  ;
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("b1", ["af", "b0"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var pSlice = Array.prototype.slice;
  var objectKeys = require("af");
  var isArguments = require("b0");
  var deepEqual = module.exports = function(actual, expected, opts) {
    if (!opts)
      opts = {};
    if (actual === expected) {
      return true;
    } else if (actual instanceof Date && expected instanceof Date) {
      return actual.getTime() === expected.getTime();
    } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
      return opts.strict ? actual === expected : actual == expected;
    } else {
      return objEquiv(actual, expected, opts);
    }
  };
  function isUndefinedOrNull(value) {
    return value === null || value === undefined;
  }
  function isBuffer(x) {
    if (!x || typeof x !== 'object' || typeof x.length !== 'number')
      return false;
    if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
      return false;
    }
    if (x.length > 0 && typeof x[0] !== 'number')
      return false;
    return true;
  }
  function objEquiv(a, b, opts) {
    var i,
        key;
    if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
      return false;
    if (a.prototype !== b.prototype)
      return false;
    if (isArguments(a)) {
      if (!isArguments(b)) {
        return false;
      }
      a = pSlice.call(a);
      b = pSlice.call(b);
      return deepEqual(a, b, opts);
    }
    if (isBuffer(a)) {
      if (!isBuffer(b)) {
        return false;
      }
      if (a.length !== b.length)
        return false;
      for (i = 0; i < a.length; i++) {
        if (a[i] !== b[i])
          return false;
      }
      return true;
    }
    try {
      var ka = objectKeys(a),
          kb = objectKeys(b);
    } catch (e) {
      return false;
    }
    if (ka.length != kb.length)
      return false;
    ka.sort();
    kb.sort();
    for (i = ka.length - 1; i >= 0; i--) {
      if (ka[i] != kb[i])
        return false;
    }
    for (i = ka.length - 1; i >= 0; i--) {
      key = ka[i];
      if (!deepEqual(a[key], b[key], opts))
        return false;
    }
    return typeof a === typeof b;
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("b2", ["b1"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("b1");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("b3", ["ae", "b2"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var createError = require("ae");
  var eql = require("b2");
  module.exports = assert;
  function assert(value, status, msg, opts) {
    if (value)
      return;
    throw createError(status, msg, opts);
  }
  assert.equal = function(a, b, status, msg, opts) {
    assert(a == b, status, msg, opts);
  };
  assert.notEqual = function(a, b, status, msg, opts) {
    assert(a != b, status, msg, opts);
  };
  assert.strictEqual = function(a, b, status, msg, opts) {
    assert(a === b, status, msg, opts);
  };
  assert.notStrictEqual = function(a, b, status, msg, opts) {
    assert(a !== b, status, msg, opts);
  };
  assert.deepEqual = function(a, b, status, msg, opts) {
    assert(eql(a, b), status, msg, opts);
  };
  assert.notDeepEqual = function(a, b, status, msg, opts) {
    assert(!eql(a, b), status, msg, opts);
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("b4", ["b3"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("b3");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("b5", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = Delegator;
  function Delegator(proto, target) {
    if (!(this instanceof Delegator))
      return new Delegator(proto, target);
    this.proto = proto;
    this.target = target;
    this.methods = [];
    this.getters = [];
    this.setters = [];
    this.fluents = [];
  }
  Delegator.prototype.method = function(name) {
    var proto = this.proto;
    var target = this.target;
    this.methods.push(name);
    proto[name] = function() {
      return this[target][name].apply(this[target], arguments);
    };
    return this;
  };
  Delegator.prototype.access = function(name) {
    return this.getter(name).setter(name);
  };
  Delegator.prototype.getter = function(name) {
    var proto = this.proto;
    var target = this.target;
    this.getters.push(name);
    proto.__defineGetter__(name, function() {
      return this[target][name];
    });
    return this;
  };
  Delegator.prototype.setter = function(name) {
    var proto = this.proto;
    var target = this.target;
    this.setters.push(name);
    proto.__defineSetter__(name, function(val) {
      return this[target][name] = val;
    });
    return this;
  };
  Delegator.prototype.fluent = function(name) {
    var proto = this.proto;
    var target = this.target;
    this.fluents.push(name);
    proto[name] = function(val) {
      if ('undefined' != typeof val) {
        this[target][name] = val;
        return this;
      } else {
        return this[target][name];
      }
    };
    return this;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("b6", ["b5"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("b5");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("b7", ["ae", "b4", "b6", "9c", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var createError = require("ae");
    var httpAssert = require("b4");
    var delegate = require("b6");
    var statuses = require("9c");
    var proto = module.exports = {
      inspect: function() {
        return this.toJSON();
      },
      toJSON: function() {
        return {
          request: this.request.toJSON(),
          response: this.response.toJSON(),
          app: this.app.toJSON(),
          originalUrl: this.originalUrl,
          req: '<original node req>',
          res: '<original node res>',
          socket: '<original node socket>'
        };
      },
      assert: httpAssert,
      throw: function() {
        throw createError.apply(null, arguments);
      },
      onerror: function(err) {
        if (null == err)
          return;
        if (!(err instanceof Error))
          err = new Error('non-error thrown: ' + err);
        this.app.emit('error', err, this);
        if (this.headerSent || !this.writable) {
          err.headerSent = true;
          return;
        }
        this.res._headers = {};
        this.type = 'text';
        if ('ENOENT' == err.code)
          err.status = 404;
        if ('number' != typeof err.status || !statuses[err.status])
          err.status = 500;
        var code = statuses[err.status];
        var msg = err.expose ? err.message : code;
        this.status = err.status;
        this.length = Buffer.byteLength(msg);
        this.res.end(msg);
      }
    };
    delegate(proto, 'response').method('attachment').method('redirect').method('remove').method('vary').method('set').method('append').access('status').access('message').access('body').access('length').access('type').access('lastModified').access('etag').getter('headerSent').getter('writable');
    delegate(proto, 'request').method('acceptsLanguages').method('acceptsEncodings').method('acceptsCharsets').method('accepts').method('get').method('is').access('querystring').access('idempotent').access('socket').access('search').access('method').access('query').access('path').access('url').getter('href').getter('subdomains').getter('protocol').getter('host').getter('hostname').getter('header').getter('headers').getter('secure').getter('stale').getter('fresh').getter('ips').getter('ip');
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("b8", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var paramRegExp = /; *([!#$%&'\*\+\-\.\^_`\|~0-9A-Za-z]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'\*\+\-\.\^_`\|~0-9A-Za-z]+) */g;
  var textRegExp = /^[\u000b\u0020-\u007e\u0080-\u00ff]+$/;
  var tokenRegExp = /^[!#$%&'\*\+\-\.\^_`\|~0-9A-Za-z]+$/;
  var qescRegExp = /\\([\u000b\u0020-\u00ff])/g;
  var quoteRegExp = /([\\"])/g;
  var typeRegExp = /^[!#$%&'\*\+\-\.\^_`\|~0-9A-Za-z]+\/[!#$%&'\*\+\-\.\^_`\|~0-9A-Za-z]+$/;
  exports.format = format;
  exports.parse = parse;
  function format(obj) {
    if (!obj || typeof obj !== 'object') {
      throw new TypeError('argument obj is required');
    }
    var parameters = obj.parameters;
    var type = obj.type;
    if (!type || !typeRegExp.test(type)) {
      throw new TypeError('invalid type');
    }
    var string = type;
    if (parameters && typeof parameters === 'object') {
      var param;
      var params = Object.keys(parameters).sort();
      for (var i = 0; i < params.length; i++) {
        param = params[i];
        if (!tokenRegExp.test(param)) {
          throw new TypeError('invalid parameter name');
        }
        string += '; ' + param + '=' + qstring(parameters[param]);
      }
    }
    return string;
  }
  function parse(string) {
    if (!string) {
      throw new TypeError('argument string is required');
    }
    if (typeof string === 'object') {
      string = getcontenttype(string);
      if (typeof string !== 'string') {
        throw new TypeError('content-type header is missing from object');
      }
    }
    if (typeof string !== 'string') {
      throw new TypeError('argument string is required to be a string');
    }
    var index = string.indexOf(';');
    var type = index !== -1 ? string.substr(0, index).trim() : string.trim();
    if (!typeRegExp.test(type)) {
      throw new TypeError('invalid media type');
    }
    var key;
    var match;
    var obj = new ContentType(type.toLowerCase());
    var value;
    paramRegExp.lastIndex = index;
    while (match = paramRegExp.exec(string)) {
      if (match.index !== index) {
        throw new TypeError('invalid parameter format');
      }
      index += match[0].length;
      key = match[1].toLowerCase();
      value = match[2];
      if (value[0] === '"') {
        value = value.substr(1, value.length - 2).replace(qescRegExp, '$1');
      }
      obj.parameters[key] = value;
    }
    if (index !== -1 && index !== string.length) {
      throw new TypeError('invalid parameter format');
    }
    return obj;
  }
  function getcontenttype(obj) {
    if (typeof obj.getHeader === 'function') {
      return obj.getHeader('content-type');
    }
    if (typeof obj.headers === 'object') {
      return obj.headers && obj.headers['content-type'];
    }
  }
  function qstring(val) {
    var str = String(val);
    if (tokenRegExp.test(str)) {
      return str;
    }
    if (str.length > 0 && !textRegExp.test(str)) {
      throw new TypeError('invalid parameter value');
    }
    return '"' + str.replace(quoteRegExp, '\\$1') + '"';
  }
  function ContentType(type) {
    this.parameters = Object.create(null);
    this.type = type;
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("b9", ["b8"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("b8");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("ba", ["3f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  (function(process) {
    ;
    (function(root) {
      var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
      var freeModule = typeof module == 'object' && module && !module.nodeType && module;
      var freeGlobal = typeof global == 'object' && global;
      if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
        root = freeGlobal;
      }
      var punycode,
          maxInt = 2147483647,
          base = 36,
          tMin = 1,
          tMax = 26,
          skew = 38,
          damp = 700,
          initialBias = 72,
          initialN = 128,
          delimiter = '-',
          regexPunycode = /^xn--/,
          regexNonASCII = /[^\x20-\x7E]/,
          regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,
          errors = {
            'overflow': 'Overflow: input needs wider integers to process',
            'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
            'invalid-input': 'Invalid input'
          },
          baseMinusTMin = base - tMin,
          floor = Math.floor,
          stringFromCharCode = String.fromCharCode,
          key;
      function error(type) {
        throw RangeError(errors[type]);
      }
      function map(array, fn) {
        var length = array.length;
        var result = [];
        while (length--) {
          result[length] = fn(array[length]);
        }
        return result;
      }
      function mapDomain(string, fn) {
        var parts = string.split('@');
        var result = '';
        if (parts.length > 1) {
          result = parts[0] + '@';
          string = parts[1];
        }
        string = string.replace(regexSeparators, '\x2E');
        var labels = string.split('.');
        var encoded = map(labels, fn).join('.');
        return result + encoded;
      }
      function ucs2decode(string) {
        var output = [],
            counter = 0,
            length = string.length,
            value,
            extra;
        while (counter < length) {
          value = string.charCodeAt(counter++);
          if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
            extra = string.charCodeAt(counter++);
            if ((extra & 0xFC00) == 0xDC00) {
              output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
            } else {
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }
        return output;
      }
      function ucs2encode(array) {
        return map(array, function(value) {
          var output = '';
          if (value > 0xFFFF) {
            value -= 0x10000;
            output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
            value = 0xDC00 | value & 0x3FF;
          }
          output += stringFromCharCode(value);
          return output;
        }).join('');
      }
      function basicToDigit(codePoint) {
        if (codePoint - 48 < 10) {
          return codePoint - 22;
        }
        if (codePoint - 65 < 26) {
          return codePoint - 65;
        }
        if (codePoint - 97 < 26) {
          return codePoint - 97;
        }
        return base;
      }
      function digitToBasic(digit, flag) {
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
      }
      function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for (; delta > baseMinusTMin * tMax >> 1; k += base) {
          delta = floor(delta / baseMinusTMin);
        }
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
      }
      function decode(input) {
        var output = [],
            inputLength = input.length,
            out,
            i = 0,
            n = initialN,
            bias = initialBias,
            basic,
            j,
            index,
            oldi,
            w,
            k,
            digit,
            t,
            baseMinusT;
        basic = input.lastIndexOf(delimiter);
        if (basic < 0) {
          basic = 0;
        }
        for (j = 0; j < basic; ++j) {
          if (input.charCodeAt(j) >= 0x80) {
            error('not-basic');
          }
          output.push(input.charCodeAt(j));
        }
        for (index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
          for (oldi = i, w = 1, k = base; ; k += base) {
            if (index >= inputLength) {
              error('invalid-input');
            }
            digit = basicToDigit(input.charCodeAt(index++));
            if (digit >= base || digit > floor((maxInt - i) / w)) {
              error('overflow');
            }
            i += digit * w;
            t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
            if (digit < t) {
              break;
            }
            baseMinusT = base - t;
            if (w > floor(maxInt / baseMinusT)) {
              error('overflow');
            }
            w *= baseMinusT;
          }
          out = output.length + 1;
          bias = adapt(i - oldi, out, oldi == 0);
          if (floor(i / out) > maxInt - n) {
            error('overflow');
          }
          n += floor(i / out);
          i %= out;
          output.splice(i++, 0, n);
        }
        return ucs2encode(output);
      }
      function encode(input) {
        var n,
            delta,
            handledCPCount,
            basicLength,
            bias,
            j,
            m,
            q,
            k,
            t,
            currentValue,
            output = [],
            inputLength,
            handledCPCountPlusOne,
            baseMinusT,
            qMinusT;
        input = ucs2decode(input);
        inputLength = input.length;
        n = initialN;
        delta = 0;
        bias = initialBias;
        for (j = 0; j < inputLength; ++j) {
          currentValue = input[j];
          if (currentValue < 0x80) {
            output.push(stringFromCharCode(currentValue));
          }
        }
        handledCPCount = basicLength = output.length;
        if (basicLength) {
          output.push(delimiter);
        }
        while (handledCPCount < inputLength) {
          for (m = maxInt, j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue >= n && currentValue < m) {
              m = currentValue;
            }
          }
          handledCPCountPlusOne = handledCPCount + 1;
          if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
            error('overflow');
          }
          delta += (m - n) * handledCPCountPlusOne;
          n = m;
          for (j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue < n && ++delta > maxInt) {
              error('overflow');
            }
            if (currentValue == n) {
              for (q = delta, k = base; ; k += base) {
                t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
                if (q < t) {
                  break;
                }
                qMinusT = q - t;
                baseMinusT = base - t;
                output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                q = floor(qMinusT / baseMinusT);
              }
              output.push(stringFromCharCode(digitToBasic(q, 0)));
              bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
              delta = 0;
              ++handledCPCount;
            }
          }
          ++delta;
          ++n;
        }
        return output.join('');
      }
      function toUnicode(input) {
        return mapDomain(input, function(string) {
          return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
      }
      function toASCII(input) {
        return mapDomain(input, function(string) {
          return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
        });
      }
      punycode = {
        'version': '1.3.2',
        'ucs2': {
          'decode': ucs2decode,
          'encode': ucs2encode
        },
        'decode': decode,
        'encode': encode,
        'toASCII': toASCII,
        'toUnicode': toUnicode
      };
      if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
        define('punycode', function() {
          return punycode;
        });
      } else if (freeExports && freeModule) {
        if (module.exports == freeExports) {
          freeModule.exports = punycode;
        } else {
          for (key in punycode) {
            punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
          }
        }
      } else {
        root.punycode = punycode;
      }
    }(this));
  })(require("3f"));
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("bb", ["ba"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("ba");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("bc", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }
  module.exports = function(qs, sep, eq, options) {
    sep = sep || '&';
    eq = eq || '=';
    var obj = {};
    if (typeof qs !== 'string' || qs.length === 0) {
      return obj;
    }
    var regexp = /\+/g;
    qs = qs.split(sep);
    var maxKeys = 1000;
    if (options && typeof options.maxKeys === 'number') {
      maxKeys = options.maxKeys;
    }
    var len = qs.length;
    if (maxKeys > 0 && len > maxKeys) {
      len = maxKeys;
    }
    for (var i = 0; i < len; ++i) {
      var x = qs[i].replace(regexp, '%20'),
          idx = x.indexOf(eq),
          kstr,
          vstr,
          k,
          v;
      if (idx >= 0) {
        kstr = x.substr(0, idx);
        vstr = x.substr(idx + 1);
      } else {
        kstr = x;
        vstr = '';
      }
      k = decodeURIComponent(kstr);
      v = decodeURIComponent(vstr);
      if (!hasOwnProperty(obj, k)) {
        obj[k] = v;
      } else if (Array.isArray(obj[k])) {
        obj[k].push(v);
      } else {
        obj[k] = [obj[k], v];
      }
    }
    return obj;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("bd", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var stringifyPrimitive = function(v) {
    switch (typeof v) {
      case 'string':
        return v;
      case 'boolean':
        return v ? 'true' : 'false';
      case 'number':
        return isFinite(v) ? v : '';
      default:
        return '';
    }
  };
  module.exports = function(obj, sep, eq, name) {
    sep = sep || '&';
    eq = eq || '=';
    if (obj === null) {
      obj = undefined;
    }
    if (typeof obj === 'object') {
      return Object.keys(obj).map(function(k) {
        var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
        if (Array.isArray(obj[k])) {
          return obj[k].map(function(v) {
            return ks + encodeURIComponent(stringifyPrimitive(v));
          }).join(sep);
        } else {
          return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
        }
      }).join(sep);
    }
    if (!name)
      return '';
    return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("be", ["bc", "bd"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  exports.decode = exports.parse = require("bc");
  exports.encode = exports.stringify = require("bd");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("bf", ["be"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("be");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("c0", ["bb", "bf"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var punycode = require("bb");
  exports.parse = urlParse;
  exports.resolve = urlResolve;
  exports.resolveObject = urlResolveObject;
  exports.format = urlFormat;
  exports.Url = Url;
  function Url() {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.host = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.query = null;
    this.pathname = null;
    this.path = null;
    this.href = null;
  }
  var protocolPattern = /^([a-z0-9.+-]+:)/i,
      portPattern = /:[0-9]*$/,
      delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
      unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
      autoEscape = ['\''].concat(unwise),
      nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
      hostEndingChars = ['/', '?', '#'],
      hostnameMaxLen = 255,
      hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
      hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
      unsafeProtocol = {
        'javascript': true,
        'javascript:': true
      },
      hostlessProtocol = {
        'javascript': true,
        'javascript:': true
      },
      slashedProtocol = {
        'http': true,
        'https': true,
        'ftp': true,
        'gopher': true,
        'file': true,
        'http:': true,
        'https:': true,
        'ftp:': true,
        'gopher:': true,
        'file:': true
      },
      querystring = require("bf");
  function urlParse(url, parseQueryString, slashesDenoteHost) {
    if (url && isObject(url) && url instanceof Url)
      return url;
    var u = new Url;
    u.parse(url, parseQueryString, slashesDenoteHost);
    return u;
  }
  Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
    if (!isString(url)) {
      throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
    }
    var rest = url;
    rest = rest.trim();
    var proto = protocolPattern.exec(rest);
    if (proto) {
      proto = proto[0];
      var lowerProto = proto.toLowerCase();
      this.protocol = lowerProto;
      rest = rest.substr(proto.length);
    }
    if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
      var slashes = rest.substr(0, 2) === '//';
      if (slashes && !(proto && hostlessProtocol[proto])) {
        rest = rest.substr(2);
        this.slashes = true;
      }
    }
    if (!hostlessProtocol[proto] && (slashes || (proto && !slashedProtocol[proto]))) {
      var hostEnd = -1;
      for (var i = 0; i < hostEndingChars.length; i++) {
        var hec = rest.indexOf(hostEndingChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
          hostEnd = hec;
      }
      var auth,
          atSign;
      if (hostEnd === -1) {
        atSign = rest.lastIndexOf('@');
      } else {
        atSign = rest.lastIndexOf('@', hostEnd);
      }
      if (atSign !== -1) {
        auth = rest.slice(0, atSign);
        rest = rest.slice(atSign + 1);
        this.auth = decodeURIComponent(auth);
      }
      hostEnd = -1;
      for (var i = 0; i < nonHostChars.length; i++) {
        var hec = rest.indexOf(nonHostChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
          hostEnd = hec;
      }
      if (hostEnd === -1)
        hostEnd = rest.length;
      this.host = rest.slice(0, hostEnd);
      rest = rest.slice(hostEnd);
      this.parseHost();
      this.hostname = this.hostname || '';
      var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']';
      if (!ipv6Hostname) {
        var hostparts = this.hostname.split(/\./);
        for (var i = 0,
            l = hostparts.length; i < l; i++) {
          var part = hostparts[i];
          if (!part)
            continue;
          if (!part.match(hostnamePartPattern)) {
            var newpart = '';
            for (var j = 0,
                k = part.length; j < k; j++) {
              if (part.charCodeAt(j) > 127) {
                newpart += 'x';
              } else {
                newpart += part[j];
              }
            }
            if (!newpart.match(hostnamePartPattern)) {
              var validParts = hostparts.slice(0, i);
              var notHost = hostparts.slice(i + 1);
              var bit = part.match(hostnamePartStart);
              if (bit) {
                validParts.push(bit[1]);
                notHost.unshift(bit[2]);
              }
              if (notHost.length) {
                rest = '/' + notHost.join('.') + rest;
              }
              this.hostname = validParts.join('.');
              break;
            }
          }
        }
      }
      if (this.hostname.length > hostnameMaxLen) {
        this.hostname = '';
      } else {
        this.hostname = this.hostname.toLowerCase();
      }
      if (!ipv6Hostname) {
        var domainArray = this.hostname.split('.');
        var newOut = [];
        for (var i = 0; i < domainArray.length; ++i) {
          var s = domainArray[i];
          newOut.push(s.match(/[^A-Za-z0-9_-]/) ? 'xn--' + punycode.encode(s) : s);
        }
        this.hostname = newOut.join('.');
      }
      var p = this.port ? ':' + this.port : '';
      var h = this.hostname || '';
      this.host = h + p;
      this.href += this.host;
      if (ipv6Hostname) {
        this.hostname = this.hostname.substr(1, this.hostname.length - 2);
        if (rest[0] !== '/') {
          rest = '/' + rest;
        }
      }
    }
    if (!unsafeProtocol[lowerProto]) {
      for (var i = 0,
          l = autoEscape.length; i < l; i++) {
        var ae = autoEscape[i];
        var esc = encodeURIComponent(ae);
        if (esc === ae) {
          esc = escape(ae);
        }
        rest = rest.split(ae).join(esc);
      }
    }
    var hash = rest.indexOf('#');
    if (hash !== -1) {
      this.hash = rest.substr(hash);
      rest = rest.slice(0, hash);
    }
    var qm = rest.indexOf('?');
    if (qm !== -1) {
      this.search = rest.substr(qm);
      this.query = rest.substr(qm + 1);
      if (parseQueryString) {
        this.query = querystring.parse(this.query);
      }
      rest = rest.slice(0, qm);
    } else if (parseQueryString) {
      this.search = '';
      this.query = {};
    }
    if (rest)
      this.pathname = rest;
    if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
      this.pathname = '/';
    }
    if (this.pathname || this.search) {
      var p = this.pathname || '';
      var s = this.search || '';
      this.path = p + s;
    }
    this.href = this.format();
    return this;
  };
  function urlFormat(obj) {
    if (isString(obj))
      obj = urlParse(obj);
    if (!(obj instanceof Url))
      return Url.prototype.format.call(obj);
    return obj.format();
  }
  Url.prototype.format = function() {
    var auth = this.auth || '';
    if (auth) {
      auth = encodeURIComponent(auth);
      auth = auth.replace(/%3A/i, ':');
      auth += '@';
    }
    var protocol = this.protocol || '',
        pathname = this.pathname || '',
        hash = this.hash || '',
        host = false,
        query = '';
    if (this.host) {
      host = auth + this.host;
    } else if (this.hostname) {
      host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');
      if (this.port) {
        host += ':' + this.port;
      }
    }
    if (this.query && isObject(this.query) && Object.keys(this.query).length) {
      query = querystring.stringify(this.query);
    }
    var search = this.search || (query && ('?' + query)) || '';
    if (protocol && protocol.substr(-1) !== ':')
      protocol += ':';
    if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
      host = '//' + (host || '');
      if (pathname && pathname.charAt(0) !== '/')
        pathname = '/' + pathname;
    } else if (!host) {
      host = '';
    }
    if (hash && hash.charAt(0) !== '#')
      hash = '#' + hash;
    if (search && search.charAt(0) !== '?')
      search = '?' + search;
    pathname = pathname.replace(/[?#]/g, function(match) {
      return encodeURIComponent(match);
    });
    search = search.replace('#', '%23');
    return protocol + host + pathname + search + hash;
  };
  function urlResolve(source, relative) {
    return urlParse(source, false, true).resolve(relative);
  }
  Url.prototype.resolve = function(relative) {
    return this.resolveObject(urlParse(relative, false, true)).format();
  };
  function urlResolveObject(source, relative) {
    if (!source)
      return relative;
    return urlParse(source, false, true).resolveObject(relative);
  }
  Url.prototype.resolveObject = function(relative) {
    if (isString(relative)) {
      var rel = new Url();
      rel.parse(relative, false, true);
      relative = rel;
    }
    var result = new Url();
    Object.keys(this).forEach(function(k) {
      result[k] = this[k];
    }, this);
    result.hash = relative.hash;
    if (relative.href === '') {
      result.href = result.format();
      return result;
    }
    if (relative.slashes && !relative.protocol) {
      Object.keys(relative).forEach(function(k) {
        if (k !== 'protocol')
          result[k] = relative[k];
      });
      if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
        result.path = result.pathname = '/';
      }
      result.href = result.format();
      return result;
    }
    if (relative.protocol && relative.protocol !== result.protocol) {
      if (!slashedProtocol[relative.protocol]) {
        Object.keys(relative).forEach(function(k) {
          result[k] = relative[k];
        });
        result.href = result.format();
        return result;
      }
      result.protocol = relative.protocol;
      if (!relative.host && !hostlessProtocol[relative.protocol]) {
        var relPath = (relative.pathname || '').split('/');
        while (relPath.length && !(relative.host = relPath.shift()))
          ;
        if (!relative.host)
          relative.host = '';
        if (!relative.hostname)
          relative.hostname = '';
        if (relPath[0] !== '')
          relPath.unshift('');
        if (relPath.length < 2)
          relPath.unshift('');
        result.pathname = relPath.join('/');
      } else {
        result.pathname = relative.pathname;
      }
      result.search = relative.search;
      result.query = relative.query;
      result.host = relative.host || '';
      result.auth = relative.auth;
      result.hostname = relative.hostname || relative.host;
      result.port = relative.port;
      if (result.pathname || result.search) {
        var p = result.pathname || '';
        var s = result.search || '';
        result.path = p + s;
      }
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    }
    var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
        isRelAbs = (relative.host || relative.pathname && relative.pathname.charAt(0) === '/'),
        mustEndAbs = (isRelAbs || isSourceAbs || (result.host && relative.pathname)),
        removeAllDots = mustEndAbs,
        srcPath = result.pathname && result.pathname.split('/') || [],
        relPath = relative.pathname && relative.pathname.split('/') || [],
        psychotic = result.protocol && !slashedProtocol[result.protocol];
    if (psychotic) {
      result.hostname = '';
      result.port = null;
      if (result.host) {
        if (srcPath[0] === '')
          srcPath[0] = result.host;
        else
          srcPath.unshift(result.host);
      }
      result.host = '';
      if (relative.protocol) {
        relative.hostname = null;
        relative.port = null;
        if (relative.host) {
          if (relPath[0] === '')
            relPath[0] = relative.host;
          else
            relPath.unshift(relative.host);
        }
        relative.host = null;
      }
      mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
    }
    if (isRelAbs) {
      result.host = (relative.host || relative.host === '') ? relative.host : result.host;
      result.hostname = (relative.hostname || relative.hostname === '') ? relative.hostname : result.hostname;
      result.search = relative.search;
      result.query = relative.query;
      srcPath = relPath;
    } else if (relPath.length) {
      if (!srcPath)
        srcPath = [];
      srcPath.pop();
      srcPath = srcPath.concat(relPath);
      result.search = relative.search;
      result.query = relative.query;
    } else if (!isNullOrUndefined(relative.search)) {
      if (psychotic) {
        result.hostname = result.host = srcPath.shift();
        var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
        if (authInHost) {
          result.auth = authInHost.shift();
          result.host = result.hostname = authInHost.shift();
        }
      }
      result.search = relative.search;
      result.query = relative.query;
      if (!isNull(result.pathname) || !isNull(result.search)) {
        result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
      }
      result.href = result.format();
      return result;
    }
    if (!srcPath.length) {
      result.pathname = null;
      if (result.search) {
        result.path = '/' + result.search;
      } else {
        result.path = null;
      }
      result.href = result.format();
      return result;
    }
    var last = srcPath.slice(-1)[0];
    var hasTrailingSlash = ((result.host || relative.host) && (last === '.' || last === '..') || last === '');
    var up = 0;
    for (var i = srcPath.length; i >= 0; i--) {
      last = srcPath[i];
      if (last == '.') {
        srcPath.splice(i, 1);
      } else if (last === '..') {
        srcPath.splice(i, 1);
        up++;
      } else if (up) {
        srcPath.splice(i, 1);
        up--;
      }
    }
    if (!mustEndAbs && !removeAllDots) {
      for (; up--; up) {
        srcPath.unshift('..');
      }
    }
    if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
      srcPath.unshift('');
    }
    if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
      srcPath.push('');
    }
    var isAbsolute = srcPath[0] === '' || (srcPath[0] && srcPath[0].charAt(0) === '/');
    if (psychotic) {
      result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';
      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    mustEndAbs = mustEndAbs || (result.host && srcPath.length);
    if (mustEndAbs && !isAbsolute) {
      srcPath.unshift('');
    }
    if (!srcPath.length) {
      result.pathname = null;
      result.path = null;
    } else {
      result.pathname = srcPath.join('/');
    }
    if (!isNull(result.pathname) || !isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
    }
    result.auth = relative.auth || result.auth;
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  };
  Url.prototype.parseHost = function() {
    var host = this.host;
    var port = portPattern.exec(host);
    if (port) {
      port = port[0];
      if (port !== ':') {
        this.port = port.substr(1);
      }
      host = host.substr(0, host.length - port.length);
    }
    if (host)
      this.hostname = host;
  };
  function isString(arg) {
    return typeof arg === "string";
  }
  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }
  function isNull(arg) {
    return arg === null;
  }
  function isNullOrUndefined(arg) {
    return arg == null;
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("c1", ["c0"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("c0");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("c2", ["c1"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = $__System._nodeRequire ? $__System._nodeRequire('url') : require("c1");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("c3", ["c2"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("c2");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("c4", ["c3"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var url = require("c3");
  var parse = url.parse;
  var Url = url.Url;
  var simplePathRegExp = /^(\/\/?(?!\/)[^\?#\s]*)(\?[^#\s]*)?$/;
  module.exports = parseurl;
  module.exports.original = originalurl;
  function parseurl(req) {
    var url = req.url;
    if (url === undefined) {
      return undefined;
    }
    var parsed = req._parsedUrl;
    if (fresh(url, parsed)) {
      return parsed;
    }
    parsed = fastparse(url);
    parsed._raw = url;
    return req._parsedUrl = parsed;
  }
  ;
  function originalurl(req) {
    var url = req.originalUrl;
    if (typeof url !== 'string') {
      return parseurl(req);
    }
    var parsed = req._parsedOriginalUrl;
    if (fresh(url, parsed)) {
      return parsed;
    }
    parsed = fastparse(url);
    parsed._raw = url;
    return req._parsedOriginalUrl = parsed;
  }
  ;
  function fastparse(str) {
    var simplePath = typeof str === 'string' && simplePathRegExp.exec(str);
    if (simplePath) {
      var pathname = simplePath[1];
      var search = simplePath[2] || null;
      var url = Url !== undefined ? new Url() : {};
      url.path = str;
      url.href = str;
      url.pathname = pathname;
      url.search = search;
      url.query = search && search.substr(1);
      return url;
    }
    return parse(str);
  }
  function fresh(url, parsedUrl) {
    return typeof parsedUrl === 'object' && parsedUrl !== null && (Url === undefined || parsedUrl instanceof Url) && parsedUrl._raw === url;
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("c5", ["c4"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("c4");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("c6", ["bf"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = $__System._nodeRequire ? $__System._nodeRequire('querystring') : require("bf");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("c7", ["c6"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("c6");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("c8", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = fresh;
  function fresh(req, res) {
    var etagMatches = true;
    var notModified = true;
    var modifiedSince = req['if-modified-since'];
    var noneMatch = req['if-none-match'];
    var lastModified = res['last-modified'];
    var etag = res['etag'];
    var cc = req['cache-control'];
    if (!modifiedSince && !noneMatch)
      return false;
    if (cc && cc.indexOf('no-cache') !== -1)
      return false;
    if (noneMatch)
      noneMatch = noneMatch.split(/ *, */);
    if (noneMatch) {
      etagMatches = noneMatch.some(function(match) {
        return match === '*' || match === etag || match === 'W/' + etag;
      });
    }
    if (modifiedSince) {
      modifiedSince = new Date(modifiedSince);
      lastModified = new Date(lastModified);
      notModified = lastModified <= modifiedSince;
    }
    return !!(etagMatches && notModified);
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("c9", ["c8"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("c8");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("ca", ["b9", "c3", "c5", "c7", "99", "c9"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var contentType = require("b9");
  var stringify = require("c3").format;
  var parse = require("c5");
  var qs = require("c7");
  var typeis = require("99");
  var fresh = require("c9");
  module.exports = {
    get header() {
      return this.req.headers;
    },
    get headers() {
      return this.req.headers;
    },
    get url() {
      return this.req.url;
    },
    set url(val) {
      this.req.url = val;
    },
    get href() {
      if (/^https?:\/\//i.test(this.originalUrl)) {
        return this.originalUrl;
      }
      return this.protocol + '://' + this.host + this.originalUrl;
    },
    get method() {
      return this.req.method;
    },
    set method(val) {
      this.req.method = val;
    },
    get path() {
      return parse(this.req).pathname;
    },
    set path(path) {
      var url = parse(this.req);
      url.pathname = path;
      url.path = null;
      this.url = stringify(url);
    },
    get query() {
      var str = this.querystring;
      var c = this._querycache = this._querycache || {};
      return c[str] || (c[str] = qs.parse(str));
    },
    set query(obj) {
      this.querystring = qs.stringify(obj);
    },
    get querystring() {
      if (!this.req)
        return '';
      return parse(this.req).query || '';
    },
    set querystring(str) {
      var url = parse(this.req);
      url.search = str;
      url.path = null;
      this.url = stringify(url);
    },
    get search() {
      if (!this.querystring)
        return '';
      return '?' + this.querystring;
    },
    set search(str) {
      this.querystring = str;
    },
    get host() {
      var proxy = this.app.proxy;
      var host = proxy && this.get('X-Forwarded-Host');
      host = host || this.get('Host');
      if (!host)
        return '';
      return host.split(/\s*,\s*/)[0];
    },
    get hostname() {
      var host = this.host;
      if (!host)
        return '';
      return host.split(':')[0];
    },
    get fresh() {
      var method = this.method;
      var s = this.ctx.status;
      if ('GET' != method && 'HEAD' != method)
        return false;
      if ((s >= 200 && s < 300) || 304 == s) {
        return fresh(this.header, this.ctx.response.header);
      }
      return false;
    },
    get stale() {
      return !this.fresh;
    },
    get idempotent() {
      var methods = ['GET', 'HEAD', 'PUT', 'DELETE', 'OPTIONS', 'TRACE'];
      return !!~methods.indexOf(this.method);
    },
    get socket() {
      return this.req.socket;
    },
    get charset() {
      var type = this.get('Content-Type');
      if (!type)
        return '';
      return contentType.parse(type).parameters.charset || '';
    },
    get length() {
      var len = this.get('Content-Length');
      if (len == '')
        return;
      return ~~len;
    },
    get protocol() {
      var proxy = this.app.proxy;
      if (this.socket.encrypted)
        return 'https';
      if (!proxy)
        return 'http';
      var proto = this.get('X-Forwarded-Proto') || 'http';
      return proto.split(/\s*,\s*/)[0];
    },
    get secure() {
      return 'https' == this.protocol;
    },
    get ip() {
      return this.ips[0] || this.socket.remoteAddress || '';
    },
    get ips() {
      var proxy = this.app.proxy;
      var val = this.get('X-Forwarded-For');
      return proxy && val ? val.split(/\s*,\s*/) : [];
    },
    get subdomains() {
      var offset = this.app.subdomainOffset;
      return (this.host || '').split('.').reverse().slice(offset);
    },
    accepts: function() {
      return this.accept.types.apply(this.accept, arguments);
    },
    acceptsEncodings: function() {
      return this.accept.encodings.apply(this.accept, arguments);
    },
    acceptsCharsets: function() {
      return this.accept.charsets.apply(this.accept, arguments);
    },
    acceptsLanguages: function() {
      return this.accept.languages.apply(this.accept, arguments);
    },
    is: function(types) {
      if (!types)
        return typeis(this.req);
      if (!Array.isArray(types))
        types = [].slice.call(arguments);
      return typeis(this.req, types);
    },
    get type() {
      var type = this.get('Content-Type');
      if (!type)
        return '';
      return type.split(';')[0];
    },
    get: function(field) {
      var req = this.req;
      switch (field = field.toLowerCase()) {
        case 'referer':
        case 'referrer':
          return req.headers.referrer || req.headers.referer || '';
        default:
          return req.headers[field] || '';
      }
    },
    inspect: function() {
      if (!this.req)
        return;
      return this.toJSON();
    },
    toJSON: function() {
      return {
        method: this.method,
        url: this.url,
        header: this.header
      };
    }
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("cb", ["72", "3f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer, process) {
    'use strict';
    var crypto = global.crypto || global.msCrypto;
    if (crypto && crypto.getRandomValues) {
      module.exports = randomBytes;
    } else {
      module.exports = oldBrowser;
    }
    function randomBytes(size, cb) {
      var bytes = new Buffer(size);
      crypto.getRandomValues(bytes);
      if (typeof cb === 'function') {
        return process.nextTick(function() {
          cb(null, bytes);
        });
      }
      return bytes;
    }
    function oldBrowser() {
      throw new Error('secure random number generation not supported by this browser\n' + 'use chrome, FireFox or Internet Explorer 11');
    }
  })(require("72").Buffer, require("3f"));
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("cc", ["cb"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("cb");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("cd", ["72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    'use strict';
    var intSize = 4;
    var zeroBuffer = new Buffer(intSize);
    zeroBuffer.fill(0);
    var chrsz = 8;
    function toArray(buf, bigEndian) {
      if ((buf.length % intSize) !== 0) {
        var len = buf.length + (intSize - (buf.length % intSize));
        buf = Buffer.concat([buf, zeroBuffer], len);
      }
      var arr = [];
      var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
      for (var i = 0; i < buf.length; i += intSize) {
        arr.push(fn.call(buf, i));
      }
      return arr;
    }
    function toBuffer(arr, size, bigEndian) {
      var buf = new Buffer(size);
      var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
      for (var i = 0; i < arr.length; i++) {
        fn.call(buf, arr[i], i * 4, true);
      }
      return buf;
    }
    function hash(buf, fn, hashSize, bigEndian) {
      if (!Buffer.isBuffer(buf))
        buf = new Buffer(buf);
      var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
      return toBuffer(arr, hashSize, bigEndian);
    }
    exports.hash = hash;
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("ce", ["cd"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var helpers = require("cd");
  function core_md5(x, len) {
    x[len >> 5] |= 0x80 << ((len) % 32);
    x[(((len + 64) >>> 9) << 4) + 14] = len;
    var a = 1732584193;
    var b = -271733879;
    var c = -1732584194;
    var d = 271733878;
    for (var i = 0; i < x.length; i += 16) {
      var olda = a;
      var oldb = b;
      var oldc = c;
      var oldd = d;
      a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
      d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
      c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
      b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
      a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
      d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
      c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
      b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
      a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
      d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
      c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
      b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
      a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
      d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
      c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
      b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);
      a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
      d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
      c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
      b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
      a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
      d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
      c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
      b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
      a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
      d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
      c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
      b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
      a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
      d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
      c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
      b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);
      a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
      d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
      c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
      b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
      a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
      d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
      c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
      b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
      a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
      d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
      c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
      b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
      a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
      d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
      c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
      b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);
      a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
      d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
      c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
      b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
      a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
      d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
      c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
      b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
      a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
      d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
      c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
      b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
      a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
      d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
      c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
      b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);
      a = safe_add(a, olda);
      b = safe_add(b, oldb);
      c = safe_add(c, oldc);
      d = safe_add(d, oldd);
    }
    return Array(a, b, c, d);
  }
  function md5_cmn(q, a, b, x, s, t) {
    return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
  }
  function md5_ff(a, b, c, d, x, s, t) {
    return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
  }
  function md5_gg(a, b, c, d, x, s, t) {
    return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
  }
  function md5_hh(a, b, c, d, x, s, t) {
    return md5_cmn(b ^ c ^ d, a, b, x, s, t);
  }
  function md5_ii(a, b, c, d, x, s, t) {
    return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
  }
  function safe_add(x, y) {
    var lsw = (x & 0xFFFF) + (y & 0xFFFF);
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return (msw << 16) | (lsw & 0xFFFF);
  }
  function bit_rol(num, cnt) {
    return (num << cnt) | (num >>> (32 - cnt));
  }
  module.exports = function md5(buf) {
    return helpers.hash(buf, core_md5, 16);
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("cf", ["72", "3f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer, process) {
    var zl = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
    var zr = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
    var sl = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
    var sr = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
    var hl = [0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
    var hr = [0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];
    function bytesToWords(bytes) {
      var words = [];
      for (var i = 0,
          b = 0; i < bytes.length; i++, b += 8) {
        words[b >>> 5] |= bytes[i] << (24 - b % 32);
      }
      return words;
    }
    function wordsToBytes(words) {
      var bytes = [];
      for (var b = 0; b < words.length * 32; b += 8) {
        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
      }
      return bytes;
    }
    function processBlock(H, M, offset) {
      for (var i = 0; i < 16; i++) {
        var offset_i = offset + i;
        var M_offset_i = M[offset_i];
        M[offset_i] = ((((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) | (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00));
      }
      var al,
          bl,
          cl,
          dl,
          el;
      var ar,
          br,
          cr,
          dr,
          er;
      ar = al = H[0];
      br = bl = H[1];
      cr = cl = H[2];
      dr = dl = H[3];
      er = el = H[4];
      var t;
      for (i = 0; i < 80; i += 1) {
        t = (al + M[offset + zl[i]]) | 0;
        if (i < 16) {
          t += f1(bl, cl, dl) + hl[0];
        } else if (i < 32) {
          t += f2(bl, cl, dl) + hl[1];
        } else if (i < 48) {
          t += f3(bl, cl, dl) + hl[2];
        } else if (i < 64) {
          t += f4(bl, cl, dl) + hl[3];
        } else {
          t += f5(bl, cl, dl) + hl[4];
        }
        t = t | 0;
        t = rotl(t, sl[i]);
        t = (t + el) | 0;
        al = el;
        el = dl;
        dl = rotl(cl, 10);
        cl = bl;
        bl = t;
        t = (ar + M[offset + zr[i]]) | 0;
        if (i < 16) {
          t += f5(br, cr, dr) + hr[0];
        } else if (i < 32) {
          t += f4(br, cr, dr) + hr[1];
        } else if (i < 48) {
          t += f3(br, cr, dr) + hr[2];
        } else if (i < 64) {
          t += f2(br, cr, dr) + hr[3];
        } else {
          t += f1(br, cr, dr) + hr[4];
        }
        t = t | 0;
        t = rotl(t, sr[i]);
        t = (t + er) | 0;
        ar = er;
        er = dr;
        dr = rotl(cr, 10);
        cr = br;
        br = t;
      }
      t = (H[1] + cl + dr) | 0;
      H[1] = (H[2] + dl + er) | 0;
      H[2] = (H[3] + el + ar) | 0;
      H[3] = (H[4] + al + br) | 0;
      H[4] = (H[0] + bl + cr) | 0;
      H[0] = t;
    }
    function f1(x, y, z) {
      return ((x) ^ (y) ^ (z));
    }
    function f2(x, y, z) {
      return (((x) & (y)) | ((~x) & (z)));
    }
    function f3(x, y, z) {
      return (((x) | (~(y))) ^ (z));
    }
    function f4(x, y, z) {
      return (((x) & (z)) | ((y) & (~(z))));
    }
    function f5(x, y, z) {
      return ((x) ^ ((y) | (~(z))));
    }
    function rotl(x, n) {
      return (x << n) | (x >>> (32 - n));
    }
    function ripemd160(message) {
      var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];
      if (typeof message === 'string') {
        message = new Buffer(message, 'utf8');
      }
      var m = bytesToWords(message);
      var nBitsLeft = message.length * 8;
      var nBitsTotal = message.length * 8;
      m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
      m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = ((((nBitsTotal << 8) | (nBitsTotal >>> 24)) & 0x00ff00ff) | (((nBitsTotal << 24) | (nBitsTotal >>> 8)) & 0xff00ff00));
      for (var i = 0; i < m.length; i += 16) {
        processBlock(H, m, i);
      }
      for (i = 0; i < 5; i++) {
        var H_i = H[i];
        H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) | (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00);
      }
      var digestbytes = wordsToBytes(H);
      return new Buffer(digestbytes);
    }
    module.exports = ripemd160;
  })(require("72").Buffer, require("3f"));
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("d0", ["cf"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("cf");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("d1", ["72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    function Hash(blockSize, finalSize) {
      this._block = new Buffer(blockSize);
      this._finalSize = finalSize;
      this._blockSize = blockSize;
      this._len = 0;
      this._s = 0;
    }
    Hash.prototype.update = function(data, enc) {
      if (typeof data === 'string') {
        enc = enc || 'utf8';
        data = new Buffer(data, enc);
      }
      var l = this._len += data.length;
      var s = this._s || 0;
      var f = 0;
      var buffer = this._block;
      while (s < l) {
        var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize));
        var ch = (t - f);
        for (var i = 0; i < ch; i++) {
          buffer[(s % this._blockSize) + i] = data[i + f];
        }
        s += ch;
        f += ch;
        if ((s % this._blockSize) === 0) {
          this._update(buffer);
        }
      }
      this._s = s;
      return this;
    };
    Hash.prototype.digest = function(enc) {
      var l = this._len * 8;
      this._block[this._len % this._blockSize] = 0x80;
      this._block.fill(0, this._len % this._blockSize + 1);
      if (l % (this._blockSize * 8) >= this._finalSize * 8) {
        this._update(this._block);
        this._block.fill(0);
      }
      this._block.writeInt32BE(l, this._blockSize - 4);
      var hash = this._update(this._block) || this._hash();
      return enc ? hash.toString(enc) : hash;
    };
    Hash.prototype._update = function() {
      throw new Error('_update must be implemented by subclass');
    };
    module.exports = Hash;
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("d2", ["76", "d1", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var inherits = require("76");
    var Hash = require("d1");
    var W = new Array(80);
    function Sha() {
      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
    }
    inherits(Sha, Hash);
    Sha.prototype.init = function() {
      this._a = 0x67452301 | 0;
      this._b = 0xefcdab89 | 0;
      this._c = 0x98badcfe | 0;
      this._d = 0x10325476 | 0;
      this._e = 0xc3d2e1f0 | 0;
      return this;
    };
    function rol(num, cnt) {
      return (num << cnt) | (num >>> (32 - cnt));
    }
    Sha.prototype._update = function(M) {
      var W = this._w;
      var a = this._a;
      var b = this._b;
      var c = this._c;
      var d = this._d;
      var e = this._e;
      var j = 0;
      var k;
      function calcW() {
        return W[j - 3] ^ W[j - 8] ^ W[j - 14] ^ W[j - 16];
      }
      function loop(w, f) {
        W[j] = w;
        var t = rol(a, 5) + f + e + w + k;
        e = d;
        d = c;
        c = rol(b, 30);
        b = a;
        a = t;
        j++;
      }
      k = 1518500249;
      while (j < 16)
        loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d));
      while (j < 20)
        loop(calcW(), (b & c) | ((~b) & d));
      k = 1859775393;
      while (j < 40)
        loop(calcW(), b ^ c ^ d);
      k = -1894007588;
      while (j < 60)
        loop(calcW(), (b & c) | (b & d) | (c & d));
      k = -899497514;
      while (j < 80)
        loop(calcW(), b ^ c ^ d);
      this._a = (a + this._a) | 0;
      this._b = (b + this._b) | 0;
      this._c = (c + this._c) | 0;
      this._d = (d + this._d) | 0;
      this._e = (e + this._e) | 0;
    };
    Sha.prototype._hash = function() {
      var H = new Buffer(20);
      H.writeInt32BE(this._a | 0, 0);
      H.writeInt32BE(this._b | 0, 4);
      H.writeInt32BE(this._c | 0, 8);
      H.writeInt32BE(this._d | 0, 12);
      H.writeInt32BE(this._e | 0, 16);
      return H;
    };
    module.exports = Sha;
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("d3", ["76", "d1", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var inherits = require("76");
    var Hash = require("d1");
    var W = new Array(80);
    function Sha1() {
      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
    }
    inherits(Sha1, Hash);
    Sha1.prototype.init = function() {
      this._a = 0x67452301 | 0;
      this._b = 0xefcdab89 | 0;
      this._c = 0x98badcfe | 0;
      this._d = 0x10325476 | 0;
      this._e = 0xc3d2e1f0 | 0;
      return this;
    };
    function rol(num, cnt) {
      return (num << cnt) | (num >>> (32 - cnt));
    }
    Sha1.prototype._update = function(M) {
      var W = this._w;
      var a = this._a;
      var b = this._b;
      var c = this._c;
      var d = this._d;
      var e = this._e;
      var j = 0;
      var k;
      function calcW() {
        return rol(W[j - 3] ^ W[j - 8] ^ W[j - 14] ^ W[j - 16], 1);
      }
      function loop(w, f) {
        W[j] = w;
        var t = rol(a, 5) + f + e + w + k;
        e = d;
        d = c;
        c = rol(b, 30);
        b = a;
        a = t;
        j++;
      }
      k = 1518500249;
      while (j < 16)
        loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d));
      while (j < 20)
        loop(calcW(), (b & c) | ((~b) & d));
      k = 1859775393;
      while (j < 40)
        loop(calcW(), b ^ c ^ d);
      k = -1894007588;
      while (j < 60)
        loop(calcW(), (b & c) | (b & d) | (c & d));
      k = -899497514;
      while (j < 80)
        loop(calcW(), b ^ c ^ d);
      this._a = (a + this._a) | 0;
      this._b = (b + this._b) | 0;
      this._c = (c + this._c) | 0;
      this._d = (d + this._d) | 0;
      this._e = (e + this._e) | 0;
    };
    Sha1.prototype._hash = function() {
      var H = new Buffer(20);
      H.writeInt32BE(this._a | 0, 0);
      H.writeInt32BE(this._b | 0, 4);
      H.writeInt32BE(this._c | 0, 8);
      H.writeInt32BE(this._d | 0, 12);
      H.writeInt32BE(this._e | 0, 16);
      return H;
    };
    module.exports = Sha1;
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("d4", ["76", "d1", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var inherits = require("76");
    var Hash = require("d1");
    var K = [0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2];
    var W = new Array(64);
    function Sha256() {
      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
    }
    inherits(Sha256, Hash);
    Sha256.prototype.init = function() {
      this._a = 0x6a09e667 | 0;
      this._b = 0xbb67ae85 | 0;
      this._c = 0x3c6ef372 | 0;
      this._d = 0xa54ff53a | 0;
      this._e = 0x510e527f | 0;
      this._f = 0x9b05688c | 0;
      this._g = 0x1f83d9ab | 0;
      this._h = 0x5be0cd19 | 0;
      return this;
    };
    function Ch(x, y, z) {
      return z ^ (x & (y ^ z));
    }
    function Maj(x, y, z) {
      return (x & y) | (z & (x | y));
    }
    function Sigma0(x) {
      return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
    }
    function Sigma1(x) {
      return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
    }
    function Gamma0(x) {
      return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3);
    }
    function Gamma1(x) {
      return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10);
    }
    Sha256.prototype._update = function(M) {
      var W = this._w;
      var a = this._a | 0;
      var b = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;
      var f = this._f | 0;
      var g = this._g | 0;
      var h = this._h | 0;
      var j = 0;
      function calcW() {
        return Gamma1(W[j - 2]) + W[j - 7] + Gamma0(W[j - 15]) + W[j - 16];
      }
      function loop(w) {
        W[j] = w;
        var T1 = h + Sigma1(e) + Ch(e, f, g) + K[j] + w;
        var T2 = Sigma0(a) + Maj(a, b, c);
        h = g;
        g = f;
        f = e;
        e = d + T1;
        d = c;
        c = b;
        b = a;
        a = T1 + T2;
        j++;
      }
      while (j < 16)
        loop(M.readInt32BE(j * 4));
      while (j < 64)
        loop(calcW());
      this._a = (a + this._a) | 0;
      this._b = (b + this._b) | 0;
      this._c = (c + this._c) | 0;
      this._d = (d + this._d) | 0;
      this._e = (e + this._e) | 0;
      this._f = (f + this._f) | 0;
      this._g = (g + this._g) | 0;
      this._h = (h + this._h) | 0;
    };
    Sha256.prototype._hash = function() {
      var H = new Buffer(32);
      H.writeInt32BE(this._a, 0);
      H.writeInt32BE(this._b, 4);
      H.writeInt32BE(this._c, 8);
      H.writeInt32BE(this._d, 12);
      H.writeInt32BE(this._e, 16);
      H.writeInt32BE(this._f, 20);
      H.writeInt32BE(this._g, 24);
      H.writeInt32BE(this._h, 28);
      return H;
    };
    module.exports = Sha256;
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("d5", ["76", "d4", "d1", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var inherits = require("76");
    var Sha256 = require("d4");
    var Hash = require("d1");
    var W = new Array(64);
    function Sha224() {
      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
    }
    inherits(Sha224, Sha256);
    Sha224.prototype.init = function() {
      this._a = 0xc1059ed8 | 0;
      this._b = 0x367cd507 | 0;
      this._c = 0x3070dd17 | 0;
      this._d = 0xf70e5939 | 0;
      this._e = 0xffc00b31 | 0;
      this._f = 0x68581511 | 0;
      this._g = 0x64f98fa7 | 0;
      this._h = 0xbefa4fa4 | 0;
      return this;
    };
    Sha224.prototype._hash = function() {
      var H = new Buffer(28);
      H.writeInt32BE(this._a, 0);
      H.writeInt32BE(this._b, 4);
      H.writeInt32BE(this._c, 8);
      H.writeInt32BE(this._d, 12);
      H.writeInt32BE(this._e, 16);
      H.writeInt32BE(this._f, 20);
      H.writeInt32BE(this._g, 24);
      return H;
    };
    module.exports = Sha224;
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("d6", ["76", "d1", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var inherits = require("76");
    var Hash = require("d1");
    var K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];
    var W = new Array(160);
    function Sha512() {
      this.init();
      this._w = W;
      Hash.call(this, 128, 112);
    }
    inherits(Sha512, Hash);
    Sha512.prototype.init = function() {
      this._a = 0x6a09e667 | 0;
      this._b = 0xbb67ae85 | 0;
      this._c = 0x3c6ef372 | 0;
      this._d = 0xa54ff53a | 0;
      this._e = 0x510e527f | 0;
      this._f = 0x9b05688c | 0;
      this._g = 0x1f83d9ab | 0;
      this._h = 0x5be0cd19 | 0;
      this._al = 0xf3bcc908 | 0;
      this._bl = 0x84caa73b | 0;
      this._cl = 0xfe94f82b | 0;
      this._dl = 0x5f1d36f1 | 0;
      this._el = 0xade682d1 | 0;
      this._fl = 0x2b3e6c1f | 0;
      this._gl = 0xfb41bd6b | 0;
      this._hl = 0x137e2179 | 0;
      return this;
    };
    function Ch(x, y, z) {
      return z ^ (x & (y ^ z));
    }
    function Maj(x, y, z) {
      return (x & y) | (z & (x | y));
    }
    function Sigma0(x, xl) {
      return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
    }
    function Sigma1(x, xl) {
      return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
    }
    function Gamma0(x, xl) {
      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7);
    }
    function Gamma0l(x, xl) {
      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
    }
    function Gamma1(x, xl) {
      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6);
    }
    function Gamma1l(x, xl) {
      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
    }
    Sha512.prototype._update = function(M) {
      var W = this._w;
      var a = this._a | 0;
      var b = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;
      var f = this._f | 0;
      var g = this._g | 0;
      var h = this._h | 0;
      var al = this._al | 0;
      var bl = this._bl | 0;
      var cl = this._cl | 0;
      var dl = this._dl | 0;
      var el = this._el | 0;
      var fl = this._fl | 0;
      var gl = this._gl | 0;
      var hl = this._hl | 0;
      var i = 0;
      var j = 0;
      var Wi,
          Wil;
      function calcW() {
        var x = W[j - 15 * 2];
        var xl = W[j - 15 * 2 + 1];
        var gamma0 = Gamma0(x, xl);
        var gamma0l = Gamma0l(xl, x);
        x = W[j - 2 * 2];
        xl = W[j - 2 * 2 + 1];
        var gamma1 = Gamma1(x, xl);
        var gamma1l = Gamma1l(xl, x);
        var Wi7 = W[j - 7 * 2];
        var Wi7l = W[j - 7 * 2 + 1];
        var Wi16 = W[j - 16 * 2];
        var Wi16l = W[j - 16 * 2 + 1];
        Wil = gamma0l + Wi7l;
        Wi = gamma0 + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);
        Wil = Wil + gamma1l;
        Wi = Wi + gamma1 + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);
        Wil = Wil + Wi16l;
        Wi = Wi + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);
      }
      function loop() {
        W[j] = Wi;
        W[j + 1] = Wil;
        var maj = Maj(a, b, c);
        var majl = Maj(al, bl, cl);
        var sigma0h = Sigma0(a, al);
        var sigma0l = Sigma0(al, a);
        var sigma1h = Sigma1(e, el);
        var sigma1l = Sigma1(el, e);
        var Ki = K[j];
        var Kil = K[j + 1];
        var ch = Ch(e, f, g);
        var chl = Ch(el, fl, gl);
        var t1l = hl + sigma1l;
        var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);
        t1l = t1l + chl;
        t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);
        t1l = t1l + Kil;
        t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);
        t1l = t1l + Wil;
        t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);
        var t2l = sigma0l + majl;
        var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);
        h = g;
        hl = gl;
        g = f;
        gl = fl;
        f = e;
        fl = el;
        el = (dl + t1l) | 0;
        e = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;
        d = c;
        dl = cl;
        c = b;
        cl = bl;
        b = a;
        bl = al;
        al = (t1l + t2l) | 0;
        a = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;
        i++;
        j += 2;
      }
      while (i < 16) {
        Wi = M.readInt32BE(j * 4);
        Wil = M.readInt32BE(j * 4 + 4);
        loop();
      }
      while (i < 80) {
        calcW();
        loop();
      }
      this._al = (this._al + al) | 0;
      this._bl = (this._bl + bl) | 0;
      this._cl = (this._cl + cl) | 0;
      this._dl = (this._dl + dl) | 0;
      this._el = (this._el + el) | 0;
      this._fl = (this._fl + fl) | 0;
      this._gl = (this._gl + gl) | 0;
      this._hl = (this._hl + hl) | 0;
      this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0;
      this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0;
      this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0;
      this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;
      this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0;
      this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0;
      this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0;
      this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0;
    };
    Sha512.prototype._hash = function() {
      var H = new Buffer(64);
      function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
      }
      writeInt64BE(this._a, this._al, 0);
      writeInt64BE(this._b, this._bl, 8);
      writeInt64BE(this._c, this._cl, 16);
      writeInt64BE(this._d, this._dl, 24);
      writeInt64BE(this._e, this._el, 32);
      writeInt64BE(this._f, this._fl, 40);
      writeInt64BE(this._g, this._gl, 48);
      writeInt64BE(this._h, this._hl, 56);
      return H;
    };
    module.exports = Sha512;
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("d7", ["76", "d6", "d1", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var inherits = require("76");
    var SHA512 = require("d6");
    var Hash = require("d1");
    var W = new Array(160);
    function Sha384() {
      this.init();
      this._w = W;
      Hash.call(this, 128, 112);
    }
    inherits(Sha384, SHA512);
    Sha384.prototype.init = function() {
      this._a = 0xcbbb9d5d | 0;
      this._b = 0x629a292a | 0;
      this._c = 0x9159015a | 0;
      this._d = 0x152fecd8 | 0;
      this._e = 0x67332667 | 0;
      this._f = 0x8eb44a87 | 0;
      this._g = 0xdb0c2e0d | 0;
      this._h = 0x47b5481d | 0;
      this._al = 0xc1059ed8 | 0;
      this._bl = 0x367cd507 | 0;
      this._cl = 0x3070dd17 | 0;
      this._dl = 0xf70e5939 | 0;
      this._el = 0xffc00b31 | 0;
      this._fl = 0x68581511 | 0;
      this._gl = 0x64f98fa7 | 0;
      this._hl = 0xbefa4fa4 | 0;
      return this;
    };
    Sha384.prototype._hash = function() {
      var H = new Buffer(48);
      function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
      }
      writeInt64BE(this._a, this._al, 0);
      writeInt64BE(this._b, this._bl, 8);
      writeInt64BE(this._c, this._cl, 16);
      writeInt64BE(this._d, this._dl, 24);
      writeInt64BE(this._e, this._el, 32);
      writeInt64BE(this._f, this._fl, 40);
      return H;
    };
    module.exports = Sha384;
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("d8", ["d2", "d3", "d5", "d4", "d7", "d6"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var exports = module.exports = function SHA(algorithm) {
    algorithm = algorithm.toLowerCase();
    var Algorithm = exports[algorithm];
    if (!Algorithm)
      throw new Error(algorithm + ' is not supported (we accept pull requests)');
    return new Algorithm();
  };
  exports.sha = require("d2");
  exports.sha1 = require("d3");
  exports.sha224 = require("d5");
  exports.sha256 = require("d4");
  exports.sha384 = require("d7");
  exports.sha512 = require("d6");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("d9", ["d8"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("d8");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("da", ["7c"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = $__System._nodeRequire ? $__System._nodeRequire('string_decoder') : require("7c");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("db", ["da"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("da");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("dc", ["8a", "76", "db", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var Transform = require("8a").Transform;
    var inherits = require("76");
    var StringDecoder = require("db").StringDecoder;
    module.exports = CipherBase;
    inherits(CipherBase, Transform);
    function CipherBase(hashMode) {
      Transform.call(this);
      this.hashMode = typeof hashMode === 'string';
      if (this.hashMode) {
        this[hashMode] = this._finalOrDigest;
      } else {
        this.final = this._finalOrDigest;
      }
      this._decoder = null;
      this._encoding = null;
    }
    CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
      if (typeof data === 'string') {
        data = new Buffer(data, inputEnc);
      }
      var outData = this._update(data);
      if (this.hashMode) {
        return this;
      }
      if (outputEnc) {
        outData = this._toString(outData, outputEnc);
      }
      return outData;
    };
    CipherBase.prototype._transform = function(data, _, next) {
      var err;
      try {
        if (this.hashMode) {
          this._update(data);
        } else {
          this.push(this._update(data));
        }
      } catch (e) {
        err = e;
      } finally {
        next(err);
      }
    };
    CipherBase.prototype._flush = function(done) {
      var err;
      try {
        this.push(this._final());
      } catch (e) {
        err = e;
      } finally {
        done(err);
      }
    };
    CipherBase.prototype._finalOrDigest = function(outputEnc) {
      var outData = this._final() || new Buffer('');
      if (outputEnc) {
        outData = this._toString(outData, outputEnc, true);
      }
      return outData;
    };
    CipherBase.prototype._toString = function(value, enc, final) {
      if (!this._decoder) {
        this._decoder = new StringDecoder(enc);
        this._encoding = enc;
      }
      if (this._encoding !== enc) {
        throw new Error('can\'t switch encodings');
      }
      var out = this._decoder.write(value);
      if (final) {
        out += this._decoder.end();
      }
      return out;
    };
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("dd", ["dc"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("dc");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("de", ["76", "ce", "d0", "d9", "dd", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    'use strict';
    var inherits = require("76");
    var md5 = require("ce");
    var rmd160 = require("d0");
    var sha = require("d9");
    var Base = require("dd");
    function HashNoConstructor(hash) {
      Base.call(this, 'digest');
      this._hash = hash;
      this.buffers = [];
    }
    inherits(HashNoConstructor, Base);
    HashNoConstructor.prototype._update = function(data) {
      this.buffers.push(data);
    };
    HashNoConstructor.prototype._final = function() {
      var buf = Buffer.concat(this.buffers);
      var r = this._hash(buf);
      this.buffers = null;
      return r;
    };
    function Hash(hash) {
      Base.call(this, 'digest');
      this._hash = hash;
    }
    inherits(Hash, Base);
    Hash.prototype._update = function(data) {
      this._hash.update(data);
    };
    Hash.prototype._final = function() {
      return this._hash.digest();
    };
    module.exports = function createHash(alg) {
      alg = alg.toLowerCase();
      if ('md5' === alg)
        return new HashNoConstructor(md5);
      if ('rmd160' === alg || 'ripemd160' === alg)
        return new HashNoConstructor(rmd160);
      return new Hash(sha(alg));
    };
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("df", ["de"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("de");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("e0", ["de", "76", "8a", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    'use strict';
    var createHash = require("de");
    var inherits = require("76");
    var Transform = require("8a").Transform;
    var ZEROS = new Buffer(128);
    ZEROS.fill(0);
    function Hmac(alg, key) {
      Transform.call(this);
      alg = alg.toLowerCase();
      if (typeof key === 'string') {
        key = new Buffer(key);
      }
      var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64;
      this._alg = alg;
      this._key = key;
      if (key.length > blocksize) {
        key = createHash(alg).update(key).digest();
      } else if (key.length < blocksize) {
        key = Buffer.concat([key, ZEROS], blocksize);
      }
      var ipad = this._ipad = new Buffer(blocksize);
      var opad = this._opad = new Buffer(blocksize);
      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
      }
      this._hash = createHash(alg).update(ipad);
    }
    inherits(Hmac, Transform);
    Hmac.prototype.update = function(data, enc) {
      this._hash.update(data, enc);
      return this;
    };
    Hmac.prototype._transform = function(data, _, next) {
      this._hash.update(data);
      next();
    };
    Hmac.prototype._flush = function(next) {
      this.push(this.digest());
      next();
    };
    Hmac.prototype.digest = function(enc) {
      var h = this._hash.digest();
      return createHash(this._alg).update(this._opad).update(h).digest(enc);
    };
    module.exports = function createHmac(alg, key) {
      return new Hmac(alg, key);
    };
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("e1", ["e0"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("e0");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("e2", ["72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    'use strict';
    exports['RSA-SHA224'] = exports.sha224WithRSAEncryption = {
      sign: 'rsa',
      hash: 'sha224',
      id: new Buffer('302d300d06096086480165030402040500041c', 'hex')
    };
    exports['RSA-SHA256'] = exports.sha256WithRSAEncryption = {
      sign: 'rsa',
      hash: 'sha256',
      id: new Buffer('3031300d060960864801650304020105000420', 'hex')
    };
    exports['RSA-SHA384'] = exports.sha384WithRSAEncryption = {
      sign: 'rsa',
      hash: 'sha384',
      id: new Buffer('3041300d060960864801650304020205000430', 'hex')
    };
    exports['RSA-SHA512'] = exports.sha512WithRSAEncryption = {
      sign: 'rsa',
      hash: 'sha512',
      id: new Buffer('3051300d060960864801650304020305000440', 'hex')
    };
    exports['RSA-SHA1'] = {
      sign: 'rsa',
      hash: 'sha1',
      id: new Buffer('3021300906052b0e03021a05000414', 'hex')
    };
    exports['ecdsa-with-SHA1'] = {
      sign: 'ecdsa',
      hash: 'sha1',
      id: new Buffer('', 'hex')
    };
    exports.DSA = exports['DSA-SHA1'] = exports['DSA-SHA'] = {
      sign: 'dsa',
      hash: 'sha1',
      id: new Buffer('', 'hex')
    };
    exports['DSA-SHA224'] = exports['DSA-WITH-SHA224'] = {
      sign: 'dsa',
      hash: 'sha224',
      id: new Buffer('', 'hex')
    };
    exports['DSA-SHA256'] = exports['DSA-WITH-SHA256'] = {
      sign: 'dsa',
      hash: 'sha256',
      id: new Buffer('', 'hex')
    };
    exports['DSA-SHA384'] = exports['DSA-WITH-SHA384'] = {
      sign: 'dsa',
      hash: 'sha384',
      id: new Buffer('', 'hex')
    };
    exports['DSA-SHA512'] = exports['DSA-WITH-SHA512'] = {
      sign: 'dsa',
      hash: 'sha512',
      id: new Buffer('', 'hex')
    };
    exports['DSA-RIPEMD160'] = {
      sign: 'dsa',
      hash: 'rmd160',
      id: new Buffer('', 'hex')
    };
    exports['RSA-RIPEMD160'] = exports.ripemd160WithRSA = {
      sign: 'rsa',
      hash: 'rmd160',
      id: new Buffer('3021300906052b2403020105000414', 'hex')
    };
    exports['RSA-MD5'] = exports.md5WithRSAEncryption = {
      sign: 'rsa',
      hash: 'md5',
      id: new Buffer('3020300c06082a864886f70d020505000410', 'hex')
    };
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("e3", ["e1", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var createHmac = require("e1");
    var MAX_ALLOC = Math.pow(2, 30) - 1;
    exports.pbkdf2 = pbkdf2;
    function pbkdf2(password, salt, iterations, keylen, digest, callback) {
      if (typeof digest === 'function') {
        callback = digest;
        digest = undefined;
      }
      if (typeof callback !== 'function') {
        throw new Error('No callback provided to pbkdf2');
      }
      var result = pbkdf2Sync(password, salt, iterations, keylen, digest);
      setTimeout(function() {
        callback(undefined, result);
      });
    }
    exports.pbkdf2Sync = pbkdf2Sync;
    function pbkdf2Sync(password, salt, iterations, keylen, digest) {
      if (typeof iterations !== 'number') {
        throw new TypeError('Iterations not a number');
      }
      if (iterations < 0) {
        throw new TypeError('Bad iterations');
      }
      if (typeof keylen !== 'number') {
        throw new TypeError('Key length not a number');
      }
      if (keylen < 0 || keylen > MAX_ALLOC) {
        throw new TypeError('Bad key length');
      }
      digest = digest || 'sha1';
      if (!Buffer.isBuffer(password))
        password = new Buffer(password, 'binary');
      if (!Buffer.isBuffer(salt))
        salt = new Buffer(salt, 'binary');
      var hLen;
      var l = 1;
      var DK = new Buffer(keylen);
      var block1 = new Buffer(salt.length + 4);
      salt.copy(block1, 0, 0, salt.length);
      var r;
      var T;
      for (var i = 1; i <= l; i++) {
        block1.writeUInt32BE(i, salt.length);
        var U = createHmac(digest, password).update(block1).digest();
        if (!hLen) {
          hLen = U.length;
          T = new Buffer(hLen);
          l = Math.ceil(keylen / hLen);
          r = keylen - (l - 1) * hLen;
        }
        U.copy(T, 0, 0, hLen);
        for (var j = 1; j < iterations; j++) {
          U = createHmac(digest, password).update(U).digest();
          for (var k = 0; k < hLen; k++) {
            T[k] ^= U[k];
          }
        }
        var destPos = (i - 1) * hLen;
        var len = (i === l ? r : hLen);
        T.copy(DK, destPos, 0, len);
      }
      return DK;
    }
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("e4", ["e3"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("e3");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("e5", ["ce", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var md5 = require("ce");
    module.exports = EVP_BytesToKey;
    function EVP_BytesToKey(password, salt, keyLen, ivLen) {
      if (!Buffer.isBuffer(password)) {
        password = new Buffer(password, 'binary');
      }
      if (salt && !Buffer.isBuffer(salt)) {
        salt = new Buffer(salt, 'binary');
      }
      keyLen = keyLen / 8;
      ivLen = ivLen || 0;
      var ki = 0;
      var ii = 0;
      var key = new Buffer(keyLen);
      var iv = new Buffer(ivLen);
      var addmd = 0;
      var md_buf;
      var i;
      var bufs = [];
      while (true) {
        if (addmd++ > 0) {
          bufs.push(md_buf);
        }
        bufs.push(password);
        if (salt) {
          bufs.push(salt);
        }
        md_buf = md5(Buffer.concat(bufs));
        bufs = [];
        i = 0;
        if (keyLen > 0) {
          while (true) {
            if (keyLen === 0) {
              break;
            }
            if (i === md_buf.length) {
              break;
            }
            key[ki++] = md_buf[i];
            keyLen--;
            i++;
          }
        }
        if (ivLen > 0 && i !== md_buf.length) {
          while (true) {
            if (ivLen === 0) {
              break;
            }
            if (i === md_buf.length) {
              break;
            }
            iv[ii++] = md_buf[i];
            ivLen--;
            i++;
          }
        }
        if (keyLen === 0 && ivLen === 0) {
          break;
        }
      }
      for (i = 0; i < md_buf.length; i++) {
        md_buf[i] = 0;
      }
      return {
        key: key,
        iv: iv
      };
    }
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("e6", ["e5"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("e5");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("e7", ["72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var uint_max = Math.pow(2, 32);
    function fixup_uint32(x) {
      var ret,
          x_pos;
      ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x;
      return ret;
    }
    function scrub_vec(v) {
      for (var i = 0; i < v.length; v++) {
        v[i] = 0;
      }
      return false;
    }
    function Global() {
      this.SBOX = [];
      this.INV_SBOX = [];
      this.SUB_MIX = [[], [], [], []];
      this.INV_SUB_MIX = [[], [], [], []];
      this.init();
      this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
    }
    Global.prototype.init = function() {
      var d,
          i,
          sx,
          t,
          x,
          x2,
          x4,
          x8,
          xi,
          _i;
      d = (function() {
        var _i,
            _results;
        _results = [];
        for (i = _i = 0; _i < 256; i = ++_i) {
          if (i < 128) {
            _results.push(i << 1);
          } else {
            _results.push((i << 1) ^ 0x11b);
          }
        }
        return _results;
      })();
      x = 0;
      xi = 0;
      for (i = _i = 0; _i < 256; i = ++_i) {
        sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
        sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
        this.SBOX[x] = sx;
        this.INV_SBOX[sx] = x;
        x2 = d[x];
        x4 = d[x2];
        x8 = d[x4];
        t = (d[sx] * 0x101) ^ (sx * 0x1010100);
        this.SUB_MIX[0][x] = (t << 24) | (t >>> 8);
        this.SUB_MIX[1][x] = (t << 16) | (t >>> 16);
        this.SUB_MIX[2][x] = (t << 8) | (t >>> 24);
        this.SUB_MIX[3][x] = t;
        t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
        this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8);
        this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16);
        this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24);
        this.INV_SUB_MIX[3][sx] = t;
        if (x === 0) {
          x = xi = 1;
        } else {
          x = x2 ^ d[d[d[x8 ^ x2]]];
          xi ^= d[d[xi]];
        }
      }
      return true;
    };
    var G = new Global();
    AES.blockSize = 4 * 4;
    AES.prototype.blockSize = AES.blockSize;
    AES.keySize = 256 / 8;
    AES.prototype.keySize = AES.keySize;
    function bufferToArray(buf) {
      var len = buf.length / 4;
      var out = new Array(len);
      var i = -1;
      while (++i < len) {
        out[i] = buf.readUInt32BE(i * 4);
      }
      return out;
    }
    function AES(key) {
      this._key = bufferToArray(key);
      this._doReset();
    }
    AES.prototype._doReset = function() {
      var invKsRow,
          keySize,
          keyWords,
          ksRow,
          ksRows,
          t;
      keyWords = this._key;
      keySize = keyWords.length;
      this._nRounds = keySize + 6;
      ksRows = (this._nRounds + 1) * 4;
      this._keySchedule = [];
      for (ksRow = 0; ksRow < ksRows; ksRow++) {
        this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t);
      }
      this._invKeySchedule = [];
      for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
        ksRow = ksRows - invKsRow;
        t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)];
        this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]];
      }
      return true;
    };
    AES.prototype.encryptBlock = function(M) {
      M = bufferToArray(new Buffer(M));
      var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX);
      var buf = new Buffer(16);
      buf.writeUInt32BE(out[0], 0);
      buf.writeUInt32BE(out[1], 4);
      buf.writeUInt32BE(out[2], 8);
      buf.writeUInt32BE(out[3], 12);
      return buf;
    };
    AES.prototype.decryptBlock = function(M) {
      M = bufferToArray(new Buffer(M));
      var temp = [M[3], M[1]];
      M[1] = temp[0];
      M[3] = temp[1];
      var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX);
      var buf = new Buffer(16);
      buf.writeUInt32BE(out[0], 0);
      buf.writeUInt32BE(out[3], 4);
      buf.writeUInt32BE(out[2], 8);
      buf.writeUInt32BE(out[1], 12);
      return buf;
    };
    AES.prototype.scrub = function() {
      scrub_vec(this._keySchedule);
      scrub_vec(this._invKeySchedule);
      scrub_vec(this._key);
    };
    AES.prototype._doCryptBlock = function(M, keySchedule, SUB_MIX, SBOX) {
      var ksRow,
          s0,
          s1,
          s2,
          s3,
          t0,
          t1,
          t2,
          t3;
      s0 = M[0] ^ keySchedule[0];
      s1 = M[1] ^ keySchedule[1];
      s2 = M[2] ^ keySchedule[2];
      s3 = M[3] ^ keySchedule[3];
      ksRow = 4;
      for (var round = 1; round < this._nRounds; round++) {
        t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++];
        t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++];
        t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++];
        t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++];
        s0 = t0;
        s1 = t1;
        s2 = t2;
        s3 = t3;
      }
      t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
      t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
      t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
      t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
      return [fixup_uint32(t0), fixup_uint32(t1), fixup_uint32(t2), fixup_uint32(t3)];
    };
    exports.AES = AES;
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("e8", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  exports['aes-128-ecb'] = {
    cipher: 'AES',
    key: 128,
    iv: 0,
    mode: 'ECB',
    type: 'block'
  };
  exports['aes-192-ecb'] = {
    cipher: 'AES',
    key: 192,
    iv: 0,
    mode: 'ECB',
    type: 'block'
  };
  exports['aes-256-ecb'] = {
    cipher: 'AES',
    key: 256,
    iv: 0,
    mode: 'ECB',
    type: 'block'
  };
  exports['aes-128-cbc'] = {
    cipher: 'AES',
    key: 128,
    iv: 16,
    mode: 'CBC',
    type: 'block'
  };
  exports['aes-192-cbc'] = {
    cipher: 'AES',
    key: 192,
    iv: 16,
    mode: 'CBC',
    type: 'block'
  };
  exports['aes-256-cbc'] = {
    cipher: 'AES',
    key: 256,
    iv: 16,
    mode: 'CBC',
    type: 'block'
  };
  exports['aes128'] = exports['aes-128-cbc'];
  exports['aes192'] = exports['aes-192-cbc'];
  exports['aes256'] = exports['aes-256-cbc'];
  exports['aes-128-cfb'] = {
    cipher: 'AES',
    key: 128,
    iv: 16,
    mode: 'CFB',
    type: 'stream'
  };
  exports['aes-192-cfb'] = {
    cipher: 'AES',
    key: 192,
    iv: 16,
    mode: 'CFB',
    type: 'stream'
  };
  exports['aes-256-cfb'] = {
    cipher: 'AES',
    key: 256,
    iv: 16,
    mode: 'CFB',
    type: 'stream'
  };
  exports['aes-128-cfb8'] = {
    cipher: 'AES',
    key: 128,
    iv: 16,
    mode: 'CFB8',
    type: 'stream'
  };
  exports['aes-192-cfb8'] = {
    cipher: 'AES',
    key: 192,
    iv: 16,
    mode: 'CFB8',
    type: 'stream'
  };
  exports['aes-256-cfb8'] = {
    cipher: 'AES',
    key: 256,
    iv: 16,
    mode: 'CFB8',
    type: 'stream'
  };
  exports['aes-128-cfb1'] = {
    cipher: 'AES',
    key: 128,
    iv: 16,
    mode: 'CFB1',
    type: 'stream'
  };
  exports['aes-192-cfb1'] = {
    cipher: 'AES',
    key: 192,
    iv: 16,
    mode: 'CFB1',
    type: 'stream'
  };
  exports['aes-256-cfb1'] = {
    cipher: 'AES',
    key: 256,
    iv: 16,
    mode: 'CFB1',
    type: 'stream'
  };
  exports['aes-128-ofb'] = {
    cipher: 'AES',
    key: 128,
    iv: 16,
    mode: 'OFB',
    type: 'stream'
  };
  exports['aes-192-ofb'] = {
    cipher: 'AES',
    key: 192,
    iv: 16,
    mode: 'OFB',
    type: 'stream'
  };
  exports['aes-256-ofb'] = {
    cipher: 'AES',
    key: 256,
    iv: 16,
    mode: 'OFB',
    type: 'stream'
  };
  exports['aes-128-ctr'] = {
    cipher: 'AES',
    key: 128,
    iv: 16,
    mode: 'CTR',
    type: 'stream'
  };
  exports['aes-192-ctr'] = {
    cipher: 'AES',
    key: 192,
    iv: 16,
    mode: 'CTR',
    type: 'stream'
  };
  exports['aes-256-ctr'] = {
    cipher: 'AES',
    key: 256,
    iv: 16,
    mode: 'CTR',
    type: 'stream'
  };
  exports['aes-128-gcm'] = {
    cipher: 'AES',
    key: 128,
    iv: 12,
    mode: 'GCM',
    type: 'auth'
  };
  exports['aes-192-gcm'] = {
    cipher: 'AES',
    key: 192,
    iv: 12,
    mode: 'GCM',
    type: 'auth'
  };
  exports['aes-256-gcm'] = {
    cipher: 'AES',
    key: 256,
    iv: 12,
    mode: 'GCM',
    type: 'auth'
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("e9", ["e7", "dd", "76", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var aes = require("e7");
    var Transform = require("dd");
    var inherits = require("76");
    inherits(StreamCipher, Transform);
    module.exports = StreamCipher;
    function StreamCipher(mode, key, iv, decrypt) {
      if (!(this instanceof StreamCipher)) {
        return new StreamCipher(mode, key, iv);
      }
      Transform.call(this);
      this._cipher = new aes.AES(key);
      this._prev = new Buffer(iv.length);
      this._cache = new Buffer('');
      this._secCache = new Buffer('');
      this._decrypt = decrypt;
      iv.copy(this._prev);
      this._mode = mode;
    }
    StreamCipher.prototype._update = function(chunk) {
      return this._mode.encrypt(this, chunk, this._decrypt);
    };
    StreamCipher.prototype._final = function() {
      this._cipher.scrub();
    };
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("ea", ["72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var zeros = new Buffer(16);
    zeros.fill(0);
    module.exports = GHASH;
    function GHASH(key) {
      this.h = key;
      this.state = new Buffer(16);
      this.state.fill(0);
      this.cache = new Buffer('');
    }
    GHASH.prototype.ghash = function(block) {
      var i = -1;
      while (++i < block.length) {
        this.state[i] ^= block[i];
      }
      this._multiply();
    };
    GHASH.prototype._multiply = function() {
      var Vi = toArray(this.h);
      var Zi = [0, 0, 0, 0];
      var j,
          xi,
          lsb_Vi;
      var i = -1;
      while (++i < 128) {
        xi = (this.state[~~(i / 8)] & (1 << (7 - i % 8))) !== 0;
        if (xi) {
          Zi = xor(Zi, Vi);
        }
        lsb_Vi = (Vi[3] & 1) !== 0;
        for (j = 3; j > 0; j--) {
          Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31);
        }
        Vi[0] = Vi[0] >>> 1;
        if (lsb_Vi) {
          Vi[0] = Vi[0] ^ (0xe1 << 24);
        }
      }
      this.state = fromArray(Zi);
    };
    GHASH.prototype.update = function(buf) {
      this.cache = Buffer.concat([this.cache, buf]);
      var chunk;
      while (this.cache.length >= 16) {
        chunk = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        this.ghash(chunk);
      }
    };
    GHASH.prototype.final = function(abl, bl) {
      if (this.cache.length) {
        this.ghash(Buffer.concat([this.cache, zeros], 16));
      }
      this.ghash(fromArray([0, abl, 0, bl]));
      return this.state;
    };
    function toArray(buf) {
      return [buf.readUInt32BE(0), buf.readUInt32BE(4), buf.readUInt32BE(8), buf.readUInt32BE(12)];
    }
    function fromArray(out) {
      out = out.map(fixup_uint32);
      var buf = new Buffer(16);
      buf.writeUInt32BE(out[0], 0);
      buf.writeUInt32BE(out[1], 4);
      buf.writeUInt32BE(out[2], 8);
      buf.writeUInt32BE(out[3], 12);
      return buf;
    }
    var uint_max = Math.pow(2, 32);
    function fixup_uint32(x) {
      var ret,
          x_pos;
      ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x;
      return ret;
    }
    function xor(a, b) {
      return [a[0] ^ b[0], a[1] ^ b[1], a[2] ^ b[2], a[3] ^ b[3]];
    }
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("eb", ["72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    module.exports = function xor(a, b) {
      var length = Math.min(a.length, b.length);
      var buffer = new Buffer(length);
      for (var i = 0; i < length; ++i) {
        buffer[i] = a[i] ^ b[i];
      }
      return buffer;
    };
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("ec", ["eb"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("eb");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("ed", ["e7", "dd", "76", "ea", "ec", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var aes = require("e7");
    var Transform = require("dd");
    var inherits = require("76");
    var GHASH = require("ea");
    var xor = require("ec");
    inherits(StreamCipher, Transform);
    module.exports = StreamCipher;
    function StreamCipher(mode, key, iv, decrypt) {
      if (!(this instanceof StreamCipher)) {
        return new StreamCipher(mode, key, iv);
      }
      Transform.call(this);
      this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])]);
      iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])]);
      this._cipher = new aes.AES(key);
      this._prev = new Buffer(iv.length);
      this._cache = new Buffer('');
      this._secCache = new Buffer('');
      this._decrypt = decrypt;
      this._alen = 0;
      this._len = 0;
      iv.copy(this._prev);
      this._mode = mode;
      var h = new Buffer(4);
      h.fill(0);
      this._ghash = new GHASH(this._cipher.encryptBlock(h));
      this._authTag = null;
      this._called = false;
    }
    StreamCipher.prototype._update = function(chunk) {
      if (!this._called && this._alen) {
        var rump = 16 - (this._alen % 16);
        if (rump < 16) {
          rump = new Buffer(rump);
          rump.fill(0);
          this._ghash.update(rump);
        }
      }
      this._called = true;
      var out = this._mode.encrypt(this, chunk);
      if (this._decrypt) {
        this._ghash.update(chunk);
      } else {
        this._ghash.update(out);
      }
      this._len += chunk.length;
      return out;
    };
    StreamCipher.prototype._final = function() {
      if (this._decrypt && !this._authTag) {
        throw new Error('Unsupported state or unable to authenticate data');
      }
      var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
      if (this._decrypt) {
        if (xorTest(tag, this._authTag)) {
          throw new Error('Unsupported state or unable to authenticate data');
        }
      } else {
        this._authTag = tag;
      }
      this._cipher.scrub();
    };
    StreamCipher.prototype.getAuthTag = function getAuthTag() {
      if (!this._decrypt && Buffer.isBuffer(this._authTag)) {
        return this._authTag;
      } else {
        throw new Error('Attempting to get auth tag in unsupported state');
      }
    };
    StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
      if (this._decrypt) {
        this._authTag = tag;
      } else {
        throw new Error('Attempting to set auth tag in unsupported state');
      }
    };
    StreamCipher.prototype.setAAD = function setAAD(buf) {
      if (!this._called) {
        this._ghash.update(buf);
        this._alen += buf.length;
      } else {
        throw new Error('Attempting to set AAD in unsupported state');
      }
    };
    function xorTest(a, b) {
      var out = 0;
      if (a.length !== b.length) {
        out++;
      }
      var len = Math.min(a.length, b.length);
      var i = -1;
      while (++i < len) {
        out += (a[i] ^ b[i]);
      }
      return out;
    }
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("ee", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  exports.encrypt = function(self, block) {
    return self._cipher.encryptBlock(block);
  };
  exports.decrypt = function(self, block) {
    return self._cipher.decryptBlock(block);
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("ef", ["ec"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var xor = require("ec");
  exports.encrypt = function(self, block) {
    var data = xor(block, self._prev);
    self._prev = self._cipher.encryptBlock(data);
    return self._prev;
  };
  exports.decrypt = function(self, block) {
    var pad = self._prev;
    self._prev = block;
    var out = self._cipher.decryptBlock(block);
    return xor(out, pad);
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("f0", ["ec", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var xor = require("ec");
    exports.encrypt = function(self, data, decrypt) {
      var out = new Buffer('');
      var len;
      while (data.length) {
        if (self._cache.length === 0) {
          self._cache = self._cipher.encryptBlock(self._prev);
          self._prev = new Buffer('');
        }
        if (self._cache.length <= data.length) {
          len = self._cache.length;
          out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);
          data = data.slice(len);
        } else {
          out = Buffer.concat([out, encryptStart(self, data, decrypt)]);
          break;
        }
      }
      return out;
    };
    function encryptStart(self, data, decrypt) {
      var len = data.length;
      var out = xor(data, self._cache);
      self._cache = self._cache.slice(len);
      self._prev = Buffer.concat([self._prev, decrypt ? data : out]);
      return out;
    }
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("f1", ["72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    function encryptByte(self, byteParam, decrypt) {
      var pad = self._cipher.encryptBlock(self._prev);
      var out = pad[0] ^ byteParam;
      self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt ? byteParam : out])]);
      return out;
    }
    exports.encrypt = function(self, chunk, decrypt) {
      var len = chunk.length;
      var out = new Buffer(len);
      var i = -1;
      while (++i < len) {
        out[i] = encryptByte(self, chunk[i], decrypt);
      }
      return out;
    };
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("f2", ["72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    function encryptByte(self, byteParam, decrypt) {
      var pad;
      var i = -1;
      var len = 8;
      var out = 0;
      var bit,
          value;
      while (++i < len) {
        pad = self._cipher.encryptBlock(self._prev);
        bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0;
        value = pad[0] ^ bit;
        out += ((value & 0x80) >> (i % 8));
        self._prev = shiftIn(self._prev, decrypt ? bit : value);
      }
      return out;
    }
    exports.encrypt = function(self, chunk, decrypt) {
      var len = chunk.length;
      var out = new Buffer(len);
      var i = -1;
      while (++i < len) {
        out[i] = encryptByte(self, chunk[i], decrypt);
      }
      return out;
    };
    function shiftIn(buffer, value) {
      var len = buffer.length;
      var i = -1;
      var out = new Buffer(buffer.length);
      buffer = Buffer.concat([buffer, new Buffer([value])]);
      while (++i < len) {
        out[i] = buffer[i] << 1 | buffer[i + 1] >> (7);
      }
      return out;
    }
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("f3", ["ec", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var xor = require("ec");
    function getBlock(self) {
      self._prev = self._cipher.encryptBlock(self._prev);
      return self._prev;
    }
    exports.encrypt = function(self, chunk) {
      while (self._cache.length < chunk.length) {
        self._cache = Buffer.concat([self._cache, getBlock(self)]);
      }
      var pad = self._cache.slice(0, chunk.length);
      self._cache = self._cache.slice(chunk.length);
      return xor(chunk, pad);
    };
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("f4", ["ec", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var xor = require("ec");
    function incr32(iv) {
      var len = iv.length;
      var item;
      while (len--) {
        item = iv.readUInt8(len);
        if (item === 255) {
          iv.writeUInt8(0, len);
        } else {
          item++;
          iv.writeUInt8(item, len);
          break;
        }
      }
    }
    function getBlock(self) {
      var out = self._cipher.encryptBlock(self._prev);
      incr32(self._prev);
      return out;
    }
    exports.encrypt = function(self, chunk) {
      while (self._cache.length < chunk.length) {
        self._cache = Buffer.concat([self._cache, getBlock(self)]);
      }
      var pad = self._cache.slice(0, chunk.length);
      self._cache = self._cache.slice(chunk.length);
      return xor(chunk, pad);
    };
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("f5", ["e7", "dd", "76", "e8", "e6", "e9", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var aes = require("e7");
    var Transform = require("dd");
    var inherits = require("76");
    var modes = require("e8");
    var ebtk = require("e6");
    var StreamCipher = require("e9");
    var AuthCipher = require("ed");
    inherits(Cipher, Transform);
    function Cipher(mode, key, iv) {
      if (!(this instanceof Cipher)) {
        return new Cipher(mode, key, iv);
      }
      Transform.call(this);
      this._cache = new Splitter();
      this._cipher = new aes.AES(key);
      this._prev = new Buffer(iv.length);
      iv.copy(this._prev);
      this._mode = mode;
      this._autopadding = true;
    }
    Cipher.prototype._update = function(data) {
      this._cache.add(data);
      var chunk;
      var thing;
      var out = [];
      while ((chunk = this._cache.get())) {
        thing = this._mode.encrypt(this, chunk);
        out.push(thing);
      }
      return Buffer.concat(out);
    };
    Cipher.prototype._final = function() {
      var chunk = this._cache.flush();
      if (this._autopadding) {
        chunk = this._mode.encrypt(this, chunk);
        this._cipher.scrub();
        return chunk;
      } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {
        this._cipher.scrub();
        throw new Error('data not multiple of block length');
      }
    };
    Cipher.prototype.setAutoPadding = function(setTo) {
      this._autopadding = !!setTo;
    };
    function Splitter() {
      if (!(this instanceof Splitter)) {
        return new Splitter();
      }
      this.cache = new Buffer('');
    }
    Splitter.prototype.add = function(data) {
      this.cache = Buffer.concat([this.cache, data]);
    };
    Splitter.prototype.get = function() {
      if (this.cache.length > 15) {
        var out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
      }
      return null;
    };
    Splitter.prototype.flush = function() {
      var len = 16 - this.cache.length;
      var padBuff = new Buffer(len);
      var i = -1;
      while (++i < len) {
        padBuff.writeUInt8(len, i);
      }
      var out = Buffer.concat([this.cache, padBuff]);
      return out;
    };
    var modelist = {
      ECB: require("ee"),
      CBC: require("ef"),
      CFB: require("f0"),
      CFB8: require("f1"),
      CFB1: require("f2"),
      OFB: require("f3"),
      CTR: require("f4"),
      GCM: require("f4")
    };
    function createCipheriv(suite, password, iv) {
      var config = modes[suite.toLowerCase()];
      if (!config) {
        throw new TypeError('invalid suite type');
      }
      if (typeof iv === 'string') {
        iv = new Buffer(iv);
      }
      if (typeof password === 'string') {
        password = new Buffer(password);
      }
      if (password.length !== config.key / 8) {
        throw new TypeError('invalid key length ' + password.length);
      }
      if (iv.length !== config.iv) {
        throw new TypeError('invalid iv length ' + iv.length);
      }
      if (config.type === 'stream') {
        return new StreamCipher(modelist[config.mode], password, iv);
      } else if (config.type === 'auth') {
        return new AuthCipher(modelist[config.mode], password, iv);
      }
      return new Cipher(modelist[config.mode], password, iv);
    }
    function createCipher(suite, password) {
      var config = modes[suite.toLowerCase()];
      if (!config) {
        throw new TypeError('invalid suite type');
      }
      var keys = ebtk(password, false, config.key, config.iv);
      return createCipheriv(suite, keys.key, keys.iv);
    }
    exports.createCipheriv = createCipheriv;
    exports.createCipher = createCipher;
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("f6", ["e7", "dd", "76", "e8", "e9", "ed", "e6", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var aes = require("e7");
    var Transform = require("dd");
    var inherits = require("76");
    var modes = require("e8");
    var StreamCipher = require("e9");
    var AuthCipher = require("ed");
    var ebtk = require("e6");
    inherits(Decipher, Transform);
    function Decipher(mode, key, iv) {
      if (!(this instanceof Decipher)) {
        return new Decipher(mode, key, iv);
      }
      Transform.call(this);
      this._cache = new Splitter();
      this._last = void 0;
      this._cipher = new aes.AES(key);
      this._prev = new Buffer(iv.length);
      iv.copy(this._prev);
      this._mode = mode;
      this._autopadding = true;
    }
    Decipher.prototype._update = function(data) {
      this._cache.add(data);
      var chunk;
      var thing;
      var out = [];
      while ((chunk = this._cache.get(this._autopadding))) {
        thing = this._mode.decrypt(this, chunk);
        out.push(thing);
      }
      return Buffer.concat(out);
    };
    Decipher.prototype._final = function() {
      var chunk = this._cache.flush();
      if (this._autopadding) {
        return unpad(this._mode.decrypt(this, chunk));
      } else if (chunk) {
        throw new Error('data not multiple of block length');
      }
    };
    Decipher.prototype.setAutoPadding = function(setTo) {
      this._autopadding = !!setTo;
    };
    function Splitter() {
      if (!(this instanceof Splitter)) {
        return new Splitter();
      }
      this.cache = new Buffer('');
    }
    Splitter.prototype.add = function(data) {
      this.cache = Buffer.concat([this.cache, data]);
    };
    Splitter.prototype.get = function(autoPadding) {
      var out;
      if (autoPadding) {
        if (this.cache.length > 16) {
          out = this.cache.slice(0, 16);
          this.cache = this.cache.slice(16);
          return out;
        }
      } else {
        if (this.cache.length >= 16) {
          out = this.cache.slice(0, 16);
          this.cache = this.cache.slice(16);
          return out;
        }
      }
      return null;
    };
    Splitter.prototype.flush = function() {
      if (this.cache.length) {
        return this.cache;
      }
    };
    function unpad(last) {
      var padded = last[15];
      var i = -1;
      while (++i < padded) {
        if (last[(i + (16 - padded))] !== padded) {
          throw new Error('unable to decrypt data');
        }
      }
      if (padded === 16) {
        return;
      }
      return last.slice(0, 16 - padded);
    }
    var modelist = {
      ECB: require("ee"),
      CBC: require("ef"),
      CFB: require("f0"),
      CFB8: require("f1"),
      CFB1: require("f2"),
      OFB: require("f3"),
      CTR: require("f4"),
      GCM: require("f4")
    };
    function createDecipheriv(suite, password, iv) {
      var config = modes[suite.toLowerCase()];
      if (!config) {
        throw new TypeError('invalid suite type');
      }
      if (typeof iv === 'string') {
        iv = new Buffer(iv);
      }
      if (typeof password === 'string') {
        password = new Buffer(password);
      }
      if (password.length !== config.key / 8) {
        throw new TypeError('invalid key length ' + password.length);
      }
      if (iv.length !== config.iv) {
        throw new TypeError('invalid iv length ' + iv.length);
      }
      if (config.type === 'stream') {
        return new StreamCipher(modelist[config.mode], password, iv, true);
      } else if (config.type === 'auth') {
        return new AuthCipher(modelist[config.mode], password, iv, true);
      }
      return new Decipher(modelist[config.mode], password, iv);
    }
    function createDecipher(suite, password) {
      var config = modes[suite.toLowerCase()];
      if (!config) {
        throw new TypeError('invalid suite type');
      }
      var keys = ebtk(password, false, config.key, config.iv);
      return createDecipheriv(suite, keys.key, keys.iv);
    }
    exports.createDecipher = createDecipher;
    exports.createDecipheriv = createDecipheriv;
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("f7", ["f5", "f6", "e8"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var ciphers = require("f5");
  exports.createCipher = exports.Cipher = ciphers.createCipher;
  exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv;
  var deciphers = require("f6");
  exports.createDecipher = exports.Decipher = deciphers.createDecipher;
  exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv;
  var modes = require("e8");
  function getCiphers() {
    return Object.keys(modes);
  }
  exports.listCiphers = exports.getCiphers = getCiphers;
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("f8", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  exports.readUInt32BE = function readUInt32BE(bytes, off) {
    var res = (bytes[0 + off] << 24) | (bytes[1 + off] << 16) | (bytes[2 + off] << 8) | bytes[3 + off];
    return res >>> 0;
  };
  exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
    bytes[0 + off] = value >>> 24;
    bytes[1 + off] = (value >>> 16) & 0xff;
    bytes[2 + off] = (value >>> 8) & 0xff;
    bytes[3 + off] = value & 0xff;
  };
  exports.ip = function ip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for (var i = 6; i >= 0; i -= 2) {
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= (inR >>> (j + i)) & 1;
      }
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= (inL >>> (j + i)) & 1;
      }
    }
    for (var i = 6; i >= 0; i -= 2) {
      for (var j = 1; j <= 25; j += 8) {
        outR <<= 1;
        outR |= (inR >>> (j + i)) & 1;
      }
      for (var j = 1; j <= 25; j += 8) {
        outR <<= 1;
        outR |= (inL >>> (j + i)) & 1;
      }
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };
  exports.rip = function rip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for (var i = 0; i < 4; i++) {
      for (var j = 24; j >= 0; j -= 8) {
        outL <<= 1;
        outL |= (inR >>> (j + i)) & 1;
        outL <<= 1;
        outL |= (inL >>> (j + i)) & 1;
      }
    }
    for (var i = 4; i < 8; i++) {
      for (var j = 24; j >= 0; j -= 8) {
        outR <<= 1;
        outR |= (inR >>> (j + i)) & 1;
        outR <<= 1;
        outR |= (inL >>> (j + i)) & 1;
      }
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };
  exports.pc1 = function pc1(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for (var i = 7; i >= 5; i--) {
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= (inR >> (j + i)) & 1;
      }
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= (inL >> (j + i)) & 1;
      }
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var i = 1; i <= 3; i++) {
      for (var j = 0; j <= 24; j += 8) {
        outR <<= 1;
        outR |= (inR >> (j + i)) & 1;
      }
      for (var j = 0; j <= 24; j += 8) {
        outR <<= 1;
        outR |= (inL >> (j + i)) & 1;
      }
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };
  exports.r28shl = function r28shl(num, shift) {
    return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
  };
  var pc2table = [14, 11, 17, 4, 27, 23, 25, 0, 13, 22, 7, 18, 5, 9, 16, 24, 2, 20, 12, 21, 1, 8, 15, 26, 15, 4, 25, 19, 9, 1, 26, 16, 5, 11, 23, 8, 12, 7, 17, 0, 22, 3, 10, 14, 6, 20, 27, 24];
  exports.pc2 = function pc2(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    var len = pc2table.length >>> 1;
    for (var i = 0; i < len; i++) {
      outL <<= 1;
      outL |= (inL >>> pc2table[i]) & 0x1;
    }
    for (var i = len; i < pc2table.length; i++) {
      outR <<= 1;
      outR |= (inR >>> pc2table[i]) & 0x1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };
  exports.expand = function expand(r, out, off) {
    var outL = 0;
    var outR = 0;
    outL = ((r & 1) << 5) | (r >>> 27);
    for (var i = 23; i >= 15; i -= 4) {
      outL <<= 6;
      outL |= (r >>> i) & 0x3f;
    }
    for (var i = 11; i >= 3; i -= 4) {
      outR |= (r >>> i) & 0x3f;
      outR <<= 6;
    }
    outR |= ((r & 0x1f) << 1) | (r >>> 31);
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };
  var sTable = [14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1, 3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8, 4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7, 15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13, 15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14, 9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5, 0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2, 5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9, 10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10, 1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1, 13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7, 11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12, 7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3, 1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9, 10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8, 15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14, 2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1, 8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6, 4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13, 15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3, 12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5, 0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8, 9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10, 7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13, 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7, 10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12, 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4, 10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13, 0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11];
  exports.substitute = function substitute(inL, inR) {
    var out = 0;
    for (var i = 0; i < 4; i++) {
      var b = (inL >>> (18 - i * 6)) & 0x3f;
      var sb = sTable[i * 0x40 + b];
      out <<= 4;
      out |= sb;
    }
    for (var i = 0; i < 4; i++) {
      var b = (inR >>> (18 - i * 6)) & 0x3f;
      var sb = sTable[4 * 0x40 + i * 0x40 + b];
      out <<= 4;
      out |= sb;
    }
    return out >>> 0;
  };
  var permuteTable = [16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22, 30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7];
  exports.permute = function permute(num) {
    var out = 0;
    for (var i = 0; i < permuteTable.length; i++) {
      out <<= 1;
      out |= (num >>> permuteTable[i]) & 0x1;
    }
    return out >>> 0;
  };
  exports.padSplit = function padSplit(num, size, group) {
    var str = num.toString(2);
    while (str.length < size)
      str = '0' + str;
    var out = [];
    for (var i = 0; i < size; i += group)
      out.push(str.slice(i, i + group));
    return out.join(' ');
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("f9", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = assert;
  function assert(val, msg) {
    if (!val)
      throw new Error(msg || 'Assertion failed');
  }
  assert.equal = function assertEqual(l, r, msg) {
    if (l != r)
      throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("fa", ["f9"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("f9");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("fb", ["fa", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    'use strict';
    var assert = require("fa");
    function Cipher(options) {
      this.options = options;
      this.type = this.options.type;
      this.blockSize = 8;
      this._init();
      this.buffer = new Array(this.blockSize);
      this.bufferOff = 0;
    }
    module.exports = Cipher;
    Cipher.prototype._init = function _init() {};
    Cipher.prototype.update = function update(data) {
      if (data.length === 0)
        return [];
      if (this.type === 'decrypt')
        return this._updateDecrypt(data);
      else
        return this._updateEncrypt(data);
    };
    Cipher.prototype._buffer = function _buffer(data, off) {
      var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
      for (var i = 0; i < min; i++)
        this.buffer[this.bufferOff + i] = data[off + i];
      this.bufferOff += min;
      return min;
    };
    Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
      this._update(this.buffer, 0, out, off);
      this.bufferOff = 0;
      return this.blockSize;
    };
    Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
      var inputOff = 0;
      var outputOff = 0;
      var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
      var out = new Array(count * this.blockSize);
      if (this.bufferOff !== 0) {
        inputOff += this._buffer(data, inputOff);
        if (this.bufferOff === this.buffer.length)
          outputOff += this._flushBuffer(out, outputOff);
      }
      var max = data.length - ((data.length - inputOff) % this.blockSize);
      for (; inputOff < max; inputOff += this.blockSize) {
        this._update(data, inputOff, out, outputOff);
        outputOff += this.blockSize;
      }
      for (; inputOff < data.length; inputOff++, this.bufferOff++)
        this.buffer[this.bufferOff] = data[inputOff];
      return out;
    };
    Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
      var inputOff = 0;
      var outputOff = 0;
      var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
      var out = new Array(count * this.blockSize);
      for (; count > 0; count--) {
        inputOff += this._buffer(data, inputOff);
        outputOff += this._flushBuffer(out, outputOff);
      }
      inputOff += this._buffer(data, inputOff);
      return out;
    };
    Cipher.prototype.final = function final(buffer) {
      var first;
      if (buffer)
        first = this.update(buffer);
      var last;
      if (this.type === 'encrypt')
        last = this._finalEncrypt();
      else
        last = this._finalDecrypt();
      if (first)
        return first.concat(last);
      else
        return last;
    };
    Cipher.prototype._pad = function _pad(buffer, off) {
      if (off === 0)
        return false;
      while (off < buffer.length)
        buffer[off++] = 0;
      return true;
    };
    Cipher.prototype._finalEncrypt = function _finalEncrypt() {
      if (!this._pad(this.buffer, this.bufferOff))
        return [];
      var out = new Array(this.blockSize);
      this._update(this.buffer, 0, out, 0);
      return out;
    };
    Cipher.prototype._unpad = function _unpad(buffer) {
      return buffer;
    };
    Cipher.prototype._finalDecrypt = function _finalDecrypt() {
      assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
      var out = new Array(this.blockSize);
      this._flushBuffer(out, 0);
      return this._unpad(out);
    };
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("fc", ["fa", "76", "fd"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var assert = require("fa");
  var inherits = require("76");
  var des = require("fd");
  var utils = des.utils;
  var Cipher = des.Cipher;
  function DESState() {
    this.tmp = new Array(2);
    this.keys = null;
  }
  function DES(options) {
    Cipher.call(this, options);
    var state = new DESState();
    this._desState = state;
    this.deriveKeys(state, options.key);
  }
  inherits(DES, Cipher);
  module.exports = DES;
  DES.create = function create(options) {
    return new DES(options);
  };
  var shiftTable = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];
  DES.prototype.deriveKeys = function deriveKeys(state, key) {
    state.keys = new Array(16 * 2);
    assert.equal(key.length, this.blockSize, 'Invalid key length');
    var kL = utils.readUInt32BE(key, 0);
    var kR = utils.readUInt32BE(key, 4);
    utils.pc1(kL, kR, state.tmp, 0);
    kL = state.tmp[0];
    kR = state.tmp[1];
    for (var i = 0; i < state.keys.length; i += 2) {
      var shift = shiftTable[i >>> 1];
      kL = utils.r28shl(kL, shift);
      kR = utils.r28shl(kR, shift);
      utils.pc2(kL, kR, state.keys, i);
    }
  };
  DES.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._desState;
    var l = utils.readUInt32BE(inp, inOff);
    var r = utils.readUInt32BE(inp, inOff + 4);
    utils.ip(l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    if (this.type === 'encrypt')
      this._encrypt(state, l, r, state.tmp, 0);
    else
      this._decrypt(state, l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    utils.writeUInt32BE(out, l, outOff);
    utils.writeUInt32BE(out, r, outOff + 4);
  };
  DES.prototype._pad = function _pad(buffer, off) {
    var value = buffer.length - off;
    for (var i = off; i < buffer.length; i++)
      buffer[i] = value;
    return true;
  };
  DES.prototype._unpad = function _unpad(buffer) {
    var pad = buffer[buffer.length - 1];
    for (var i = buffer.length - pad; i < buffer.length; i++)
      assert.equal(buffer[i], pad);
    return buffer.slice(0, buffer.length - pad);
  };
  DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
    var l = lStart;
    var r = rStart;
    for (var i = 0; i < state.keys.length; i += 2) {
      var keyL = state.keys[i];
      var keyR = state.keys[i + 1];
      utils.expand(r, state.tmp, 0);
      keyL ^= state.tmp[0];
      keyR ^= state.tmp[1];
      var s = utils.substitute(keyL, keyR);
      var f = utils.permute(s);
      var t = r;
      r = (l ^ f) >>> 0;
      l = t;
    }
    utils.rip(r, l, out, off);
  };
  DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
    var l = rStart;
    var r = lStart;
    for (var i = state.keys.length - 2; i >= 0; i -= 2) {
      var keyL = state.keys[i];
      var keyR = state.keys[i + 1];
      utils.expand(l, state.tmp, 0);
      keyL ^= state.tmp[0];
      keyR ^= state.tmp[1];
      var s = utils.substitute(keyL, keyR);
      var f = utils.permute(s);
      var t = l;
      l = (r ^ f) >>> 0;
      r = t;
    }
    utils.rip(l, r, out, off);
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("fe", ["fa", "76"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var assert = require("fa");
  var inherits = require("76");
  var proto = {};
  function CBCState(iv) {
    assert.equal(iv.length, 8, 'Invalid IV length');
    this.iv = new Array(8);
    for (var i = 0; i < this.iv.length; i++)
      this.iv[i] = iv[i];
  }
  function instantiate(Base) {
    function CBC(options) {
      Base.call(this, options);
      this._cbcInit();
    }
    inherits(CBC, Base);
    var keys = Object.keys(proto);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      CBC.prototype[key] = proto[key];
    }
    CBC.create = function create(options) {
      return new CBC(options);
    };
    return CBC;
  }
  exports.instantiate = instantiate;
  proto._cbcInit = function _cbcInit() {
    var state = new CBCState(this.options.iv);
    this._cbcState = state;
  };
  proto._update = function _update(inp, inOff, out, outOff) {
    var state = this._cbcState;
    var superProto = this.constructor.super_.prototype;
    var iv = state.iv;
    if (this.type === 'encrypt') {
      for (var i = 0; i < this.blockSize; i++)
        iv[i] ^= inp[inOff + i];
      superProto._update.call(this, iv, 0, out, outOff);
      for (var i = 0; i < this.blockSize; i++)
        iv[i] = out[outOff + i];
    } else {
      superProto._update.call(this, inp, inOff, out, outOff);
      for (var i = 0; i < this.blockSize; i++)
        out[outOff + i] ^= iv[i];
      for (var i = 0; i < this.blockSize; i++)
        iv[i] = inp[inOff + i];
    }
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("ff", ["fa", "76", "fd"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var assert = require("fa");
  var inherits = require("76");
  var des = require("fd");
  var Cipher = des.Cipher;
  var DES = des.DES;
  function EDEState(type, key) {
    assert.equal(key.length, 24, 'Invalid key length');
    var k1 = key.slice(0, 8);
    var k2 = key.slice(8, 16);
    var k3 = key.slice(16, 24);
    if (type === 'encrypt') {
      this.ciphers = [DES.create({
        type: 'encrypt',
        key: k1
      }), DES.create({
        type: 'decrypt',
        key: k2
      }), DES.create({
        type: 'encrypt',
        key: k3
      })];
    } else {
      this.ciphers = [DES.create({
        type: 'decrypt',
        key: k3
      }), DES.create({
        type: 'encrypt',
        key: k2
      }), DES.create({
        type: 'decrypt',
        key: k1
      })];
    }
  }
  function EDE(options) {
    Cipher.call(this, options);
    var state = new EDEState(this.type, this.options.key);
    this._edeState = state;
  }
  inherits(EDE, Cipher);
  module.exports = EDE;
  EDE.create = function create(options) {
    return new EDE(options);
  };
  EDE.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._edeState;
    state.ciphers[0]._update(inp, inOff, out, outOff);
    state.ciphers[1]._update(out, outOff, out, outOff);
    state.ciphers[2]._update(out, outOff, out, outOff);
  };
  EDE.prototype._pad = DES.prototype._pad;
  EDE.prototype._unpad = DES.prototype._unpad;
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("fd", ["f8", "fb", "fc", "fe", "ff"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  exports.utils = require("f8");
  exports.Cipher = require("fb");
  exports.DES = require("fc");
  exports.CBC = require("fe");
  exports.EDE = require("ff");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("100", ["fd"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("fd");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("101", ["dd", "100", "76", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var CipherBase = require("dd");
    var des = require("100");
    var inherits = require("76");
    var modes = {
      'des-ede3-cbc': des.CBC.instantiate(des.EDE),
      'des-ede3': des.EDE,
      'des-ede-cbc': des.CBC.instantiate(des.EDE),
      'des-ede': des.EDE,
      'des-cbc': des.CBC.instantiate(des.DES),
      'des-ecb': des.DES
    };
    modes.des = modes['des-cbc'];
    modes.des3 = modes['des-ede3-cbc'];
    module.exports = DES;
    inherits(DES, CipherBase);
    function DES(opts) {
      CipherBase.call(this);
      var modeName = opts.mode.toLowerCase();
      var mode = modes[modeName];
      var type;
      if (opts.decrypt) {
        type = 'decrypt';
      } else {
        type = 'encrypt';
      }
      var key = opts.key;
      if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
        key = Buffer.concat([key, key.slice(0, 8)]);
      }
      var iv = opts.iv;
      this._des = mode.create({
        key: key,
        iv: iv,
        type: type
      });
    }
    DES.prototype._update = function(data) {
      return new Buffer(this._des.update(data));
    };
    DES.prototype._final = function() {
      return new Buffer(this._des.final());
    };
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("102", ["101"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("101");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("103", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  exports['des-ecb'] = {
    key: 8,
    iv: 0
  };
  exports['des-cbc'] = exports.des = {
    key: 8,
    iv: 8
  };
  exports['des-ede3-cbc'] = exports.des3 = {
    key: 24,
    iv: 8
  };
  exports['des-ede3'] = {
    key: 24,
    iv: 0
  };
  exports['des-ede-cbc'] = {
    key: 16,
    iv: 8
  };
  exports['des-ede'] = {
    key: 16,
    iv: 0
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("104", ["e6", "f7", "102", "103", "e8"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var ebtk = require("e6");
  var aes = require("f7");
  var DES = require("102");
  var desModes = require("103");
  var aesModes = require("e8");
  function createCipher(suite, password) {
    var keyLen,
        ivLen;
    suite = suite.toLowerCase();
    if (aesModes[suite]) {
      keyLen = aesModes[suite].key;
      ivLen = aesModes[suite].iv;
    } else if (desModes[suite]) {
      keyLen = desModes[suite].key * 8;
      ivLen = desModes[suite].iv;
    } else {
      throw new TypeError('invalid suite type');
    }
    var keys = ebtk(password, false, keyLen, ivLen);
    return createCipheriv(suite, keys.key, keys.iv);
  }
  function createDecipher(suite, password) {
    var keyLen,
        ivLen;
    suite = suite.toLowerCase();
    if (aesModes[suite]) {
      keyLen = aesModes[suite].key;
      ivLen = aesModes[suite].iv;
    } else if (desModes[suite]) {
      keyLen = desModes[suite].key * 8;
      ivLen = desModes[suite].iv;
    } else {
      throw new TypeError('invalid suite type');
    }
    var keys = ebtk(password, false, keyLen, ivLen);
    return createDecipheriv(suite, keys.key, keys.iv);
  }
  function createCipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if (aesModes[suite]) {
      return aes.createCipheriv(suite, key, iv);
    } else if (desModes[suite]) {
      return new DES({
        key: key,
        iv: iv,
        mode: suite
      });
    } else {
      throw new TypeError('invalid suite type');
    }
  }
  function createDecipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if (aesModes[suite]) {
      return aes.createDecipheriv(suite, key, iv);
    } else if (desModes[suite]) {
      return new DES({
        key: key,
        iv: iv,
        mode: suite,
        decrypt: true
      });
    } else {
      throw new TypeError('invalid suite type');
    }
  }
  exports.createCipher = exports.Cipher = createCipher;
  exports.createCipheriv = exports.Cipheriv = createCipheriv;
  exports.createDecipher = exports.Decipher = createDecipher;
  exports.createDecipheriv = exports.Decipheriv = createDecipheriv;
  function getCiphers() {
    return Object.keys(desModes).concat(aes.getCiphers());
  }
  exports.listCiphers = exports.getCiphers = getCiphers;
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("105", ["104"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("104");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("106", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(module, exports) {
    'use strict';
    function assert(val, msg) {
      if (!val)
        throw new Error(msg || 'Assertion failed');
    }
    function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function() {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
    function BN(number, base, endian) {
      if (number !== null && typeof number === 'object' && Array.isArray(number.words)) {
        return number;
      }
      this.sign = false;
      this.words = null;
      this.length = 0;
      this.red = null;
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }
      if (number !== null)
        this._init(number || 0, base || 10, endian || 'be');
    }
    if (typeof module === 'object')
      module.exports = BN;
    else
      exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    BN.prototype._init = function init(number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      } else if (typeof number === 'object') {
        return this._initArray(number, base, endian);
      }
      if (base === 'hex')
        base = 16;
      assert(base === (base | 0) && base >= 2 && base <= 36);
      number = number.toString().replace(/\s+/g, '');
      var start = 0;
      if (number[0] === '-')
        start++;
      if (base === 16)
        this._parseHex(number, start);
      else
        this._parseBase(number, base, start);
      if (number[0] === '-')
        this.sign = true;
      this.strip();
      if (endian !== 'le')
        return;
      this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
      if (number < 0) {
        this.sign = true;
        number = -number;
      }
      if (number < 0x4000000) {
        this.words = [number & 0x3ffffff];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [number & 0x3ffffff, (number / 0x4000000) & 0x3ffffff];
        this.length = 2;
      } else {
        assert(number < 0x20000000000000);
        this.words = [number & 0x3ffffff, (number / 0x4000000) & 0x3ffffff, 1];
        this.length = 3;
      }
      if (endian !== 'le')
        return;
      this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
      assert(typeof number.length === 'number');
      if (number.length <= 0) {
        this.words = [0];
        this.length = 1;
        return this;
      }
      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++)
        this.words[i] = 0;
      var off = 0;
      if (endian === 'be') {
        for (var i = number.length - 1,
            j = 0; i >= 0; i -= 3) {
          var w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (var i = 0,
            j = 0; i < number.length; i += 3) {
          var w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }
      return this.strip();
    };
    function parseHex(str, start, end) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;
        r <<= 4;
        if (c >= 49 && c <= 54)
          r |= c - 49 + 0xa;
        else if (c >= 17 && c <= 22)
          r |= c - 17 + 0xa;
        else
          r |= c & 0xf;
      }
      return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start) {
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++)
        this.words[i] = 0;
      var off = 0;
      for (var i = number.length - 6,
          j = 0; i >= start; i -= 6) {
        var w = parseHex(number, i, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
      if (i + 6 !== start) {
        var w = parseHex(number, start, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      }
      this.strip();
    };
    function parseBase(str, start, end, mul) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;
        r *= mul;
        if (c >= 49)
          r += c - 49 + 0xa;
        else if (c >= 17)
          r += c - 17 + 0xa;
        else
          r += c;
      }
      return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
      this.words = [0];
      this.length = 1;
      for (var limbLen = 0,
          limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)
        limbLen++;
      limbLen--;
      limbPow = (limbPow / base) | 0;
      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;
      var word = 0;
      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);
        this.imuln(limbPow);
        if (this.words[0] + word < 0x4000000)
          this.words[0] += word;
        else
          this._iaddn(word);
      }
      if (mod !== 0) {
        var pow = 1;
        var word = parseBase(number, i, number.length, base);
        for (var i = 0; i < mod; i++)
          pow *= base;
        this.imuln(pow);
        if (this.words[0] + word < 0x4000000)
          this.words[0] += word;
        else
          this._iaddn(word);
      }
    };
    BN.prototype.copy = function copy(dest) {
      dest.words = new Array(this.length);
      for (var i = 0; i < this.length; i++)
        dest.words[i] = this.words[i];
      dest.length = this.length;
      dest.sign = this.sign;
      dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
      var r = new BN(null);
      this.copy(r);
      return r;
    };
    BN.prototype.strip = function strip() {
      while (this.length > 1 && this.words[this.length - 1] === 0)
        this.length--;
      return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
      if (this.length === 1 && this.words[0] === 0)
        this.sign = false;
      return this;
    };
    BN.prototype.inspect = function inspect() {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
    var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
    var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
    BN.prototype.toString = function toString(base, padding) {
      base = base || 10;
      if (base === 16 || base === 'hex') {
        var out = '';
        var off = 0;
        var padding = padding | 0 || 1;
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = (((w << off) | carry) & 0xffffff).toString(16);
          carry = (w >>> (24 - off)) & 0xffffff;
          if (carry !== 0 || i !== this.length - 1)
            out = zeros[6 - word.length] + word + out;
          else
            out = word + out;
          off += 2;
          if (off >= 26) {
            off -= 26;
            i--;
          }
        }
        if (carry !== 0)
          out = carry.toString(16) + out;
        while (out.length % padding !== 0)
          out = '0' + out;
        if (this.sign)
          out = '-' + out;
        return out;
      } else if (base === (base | 0) && base >= 2 && base <= 36) {
        var groupSize = groupSizes[base];
        var groupBase = groupBases[base];
        var out = '';
        var c = this.clone();
        c.sign = false;
        while (c.cmpn(0) !== 0) {
          var r = c.modn(groupBase).toString(base);
          c = c.idivn(groupBase);
          if (c.cmpn(0) !== 0)
            out = zeros[groupSize - r.length] + r + out;
          else
            out = r + out;
        }
        if (this.cmpn(0) === 0)
          out = '0' + out;
        if (this.sign)
          out = '-' + out;
        return out;
      } else {
        assert(false, 'Base should be between 2 and 36');
      }
    };
    BN.prototype.toJSON = function toJSON() {
      return this.toString(16);
    };
    BN.prototype.toArray = function toArray(endian) {
      this.strip();
      var res = new Array(this.byteLength());
      res[0] = 0;
      var q = this.clone();
      if (endian !== 'le') {
        for (var i = 0; q.cmpn(0) !== 0; i++) {
          var b = q.andln(0xff);
          q.ishrn(8);
          res[res.length - i - 1] = b;
        }
      } else {
        for (var i = 0; q.cmpn(0) !== 0; i++) {
          var b = q.andln(0xff);
          q.ishrn(8);
          res[i] = b;
        }
      }
      return res;
    };
    if (Math.clz32) {
      BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
    }
    BN.prototype._zeroBits = function _zeroBits(w) {
      if (w === 0)
        return 26;
      var t = w;
      var r = 0;
      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }
      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }
      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }
      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }
      if ((t & 0x1) === 0)
        r++;
      return r;
    };
    BN.prototype.bitLength = function bitLength() {
      var hi = 0;
      var w = this.words[this.length - 1];
      var hi = this._countBits(w);
      return (this.length - 1) * 26 + hi;
    };
    BN.prototype.zeroBits = function zeroBits() {
      if (this.cmpn(0) === 0)
        return 0;
      var r = 0;
      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);
        r += b;
        if (b !== 26)
          break;
      }
      return r;
    };
    BN.prototype.byteLength = function byteLength() {
      return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.neg = function neg() {
      if (this.cmpn(0) === 0)
        return this.clone();
      var r = this.clone();
      r.sign = !this.sign;
      return r;
    };
    BN.prototype.ior = function ior(num) {
      this.sign = this.sign || num.sign;
      while (this.length < num.length)
        this.words[this.length++] = 0;
      for (var i = 0; i < num.length; i++)
        this.words[i] = this.words[i] | num.words[i];
      return this.strip();
    };
    BN.prototype.or = function or(num) {
      if (this.length > num.length)
        return this.clone().ior(num);
      else
        return num.clone().ior(this);
    };
    BN.prototype.iand = function iand(num) {
      this.sign = this.sign && num.sign;
      var b;
      if (this.length > num.length)
        b = num;
      else
        b = this;
      for (var i = 0; i < b.length; i++)
        this.words[i] = this.words[i] & num.words[i];
      this.length = b.length;
      return this.strip();
    };
    BN.prototype.and = function and(num) {
      if (this.length > num.length)
        return this.clone().iand(num);
      else
        return num.clone().iand(this);
    };
    BN.prototype.ixor = function ixor(num) {
      this.sign = this.sign || num.sign;
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }
      for (var i = 0; i < b.length; i++)
        this.words[i] = a.words[i] ^ b.words[i];
      if (this !== a)
        for (; i < a.length; i++)
          this.words[i] = a.words[i];
      this.length = a.length;
      return this.strip();
    };
    BN.prototype.xor = function xor(num) {
      if (this.length > num.length)
        return this.clone().ixor(num);
      else
        return num.clone().ixor(this);
    };
    BN.prototype.setn = function setn(bit, val) {
      assert(typeof bit === 'number' && bit >= 0);
      var off = (bit / 26) | 0;
      var wbit = bit % 26;
      while (this.length <= off)
        this.words[this.length++] = 0;
      if (val)
        this.words[off] = this.words[off] | (1 << wbit);
      else
        this.words[off] = this.words[off] & ~(1 << wbit);
      return this.strip();
    };
    BN.prototype.iadd = function iadd(num) {
      if (this.sign && !num.sign) {
        this.sign = false;
        var r = this.isub(num);
        this.sign = !this.sign;
        return this._normSign();
      } else if (!this.sign && num.sign) {
        num.sign = false;
        var r = this.isub(num);
        num.sign = true;
        return r._normSign();
      }
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }
      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        var r = a.words[i] + b.words[i] + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      for (; carry !== 0 && i < a.length; i++) {
        var r = a.words[i] + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      this.length = a.length;
      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
      } else if (a !== this) {
        for (; i < a.length; i++)
          this.words[i] = a.words[i];
      }
      return this;
    };
    BN.prototype.add = function add(num) {
      if (num.sign && !this.sign) {
        num.sign = false;
        var res = this.sub(num);
        num.sign = true;
        return res;
      } else if (!num.sign && this.sign) {
        this.sign = false;
        var res = num.sub(this);
        this.sign = true;
        return res;
      }
      if (this.length > num.length)
        return this.clone().iadd(num);
      else
        return num.clone().iadd(this);
    };
    BN.prototype.isub = function isub(num) {
      if (num.sign) {
        num.sign = false;
        var r = this.iadd(num);
        num.sign = true;
        return r._normSign();
      } else if (this.sign) {
        this.sign = false;
        this.iadd(num);
        this.sign = true;
        return this._normSign();
      }
      var cmp = this.cmp(num);
      if (cmp === 0) {
        this.sign = false;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }
      var a;
      var b;
      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }
      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        var r = a.words[i] - b.words[i] + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      for (; carry !== 0 && i < a.length; i++) {
        var r = a.words[i] + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      if (carry === 0 && i < a.length && a !== this)
        for (; i < a.length; i++)
          this.words[i] = a.words[i];
      this.length = Math.max(this.length, i);
      if (a !== this)
        this.sign = true;
      return this.strip();
    };
    BN.prototype.sub = function sub(num) {
      return this.clone().isub(num);
    };
    BN.prototype._smallMulTo = function _smallMulTo(num, out) {
      out.sign = num.sign !== this.sign;
      out.length = this.length + num.length;
      var carry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = this.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;
          var lo = r & 0x3ffffff;
          ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
          lo = (lo + rword) | 0;
          rword = lo & 0x3ffffff;
          ncarry = (ncarry + (lo >>> 26)) | 0;
        }
        out.words[k] = rword;
        carry = ncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }
      return out.strip();
    };
    BN.prototype._bigMulTo = function _bigMulTo(num, out) {
      out.sign = num.sign !== this.sign;
      out.length = this.length + num.length;
      var carry = 0;
      var hncarry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = this.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;
          var lo = r & 0x3ffffff;
          ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
          lo = (lo + rword) | 0;
          rword = lo & 0x3ffffff;
          ncarry = (ncarry + (lo >>> 26)) | 0;
          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }
        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }
      return out.strip();
    };
    BN.prototype.mulTo = function mulTo(num, out) {
      var res;
      if (this.length + num.length < 63)
        res = this._smallMulTo(num, out);
      else
        res = this._bigMulTo(num, out);
      return res;
    };
    BN.prototype.mul = function mul(num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };
    BN.prototype.imul = function imul(num) {
      if (this.cmpn(0) === 0 || num.cmpn(0) === 0) {
        this.words[0] = 0;
        this.length = 1;
        return this;
      }
      var tlen = this.length;
      var nlen = num.length;
      this.sign = num.sign !== this.sign;
      this.length = this.length + num.length;
      this.words[this.length - 1] = 0;
      for (var k = this.length - 2; k >= 0; k--) {
        var carry = 0;
        var rword = 0;
        var maxJ = Math.min(k, nlen - 1);
        for (var j = Math.max(0, k - tlen + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = this.words[i];
          var b = num.words[j];
          var r = a * b;
          var lo = r & 0x3ffffff;
          carry += (r / 0x4000000) | 0;
          lo += rword;
          rword = lo & 0x3ffffff;
          carry += lo >>> 26;
        }
        this.words[k] = rword;
        this.words[k + 1] += carry;
        carry = 0;
      }
      var carry = 0;
      for (var i = 1; i < this.length; i++) {
        var w = this.words[i] + carry;
        this.words[i] = w & 0x3ffffff;
        carry = w >>> 26;
      }
      return this.strip();
    };
    BN.prototype.imuln = function imuln(num) {
      assert(typeof num === 'number');
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i] * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += (w / 0x4000000) | 0;
        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };
    BN.prototype.muln = function muln(num) {
      return this.clone().imuln(num);
    };
    BN.prototype.sqr = function sqr() {
      return this.mul(this);
    };
    BN.prototype.isqr = function isqr() {
      return this.mul(this);
    };
    BN.prototype.ishln = function ishln(bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
      if (r !== 0) {
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = (this.words[i] - newCarry) << r;
          this.words[i] = c | carry;
          carry = newCarry >>> (26 - r);
        }
        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }
      if (s !== 0) {
        for (var i = this.length - 1; i >= 0; i--)
          this.words[i + s] = this.words[i];
        for (var i = 0; i < s; i++)
          this.words[i] = 0;
        this.length += s;
      }
      return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
      assert(typeof bits === 'number' && bits >= 0);
      var h;
      if (hint)
        h = (hint - (hint % 26)) / 26;
      else
        h = 0;
      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      var maskedWords = extended;
      h -= s;
      h = Math.max(0, h);
      if (maskedWords) {
        for (var i = 0; i < s; i++)
          maskedWords.words[i] = this.words[i];
        maskedWords.length = s;
      }
      if (s === 0) {} else if (this.length > s) {
        this.length -= s;
        for (var i = 0; i < this.length; i++)
          this.words[i] = this.words[i + s];
      } else {
        this.words[0] = 0;
        this.length = 1;
      }
      var carry = 0;
      for (var i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i];
        this.words[i] = (carry << (26 - r)) | (word >>> r);
        carry = word & mask;
      }
      if (maskedWords && carry !== 0)
        maskedWords.words[maskedWords.length++] = carry;
      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }
      this.strip();
      return this;
    };
    BN.prototype.shln = function shln(bits) {
      return this.clone().ishln(bits);
    };
    BN.prototype.shrn = function shrn(bits) {
      return this.clone().ishrn(bits);
    };
    BN.prototype.testn = function testn(bit) {
      assert(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;
      if (this.length <= s) {
        return false;
      }
      var w = this.words[s];
      return !!(w & q);
    };
    BN.prototype.imaskn = function imaskn(bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      assert(!this.sign, 'imaskn works only with positive numbers');
      if (r !== 0)
        s++;
      this.length = Math.min(s, this.length);
      if (r !== 0) {
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        this.words[this.length - 1] &= mask;
      }
      return this.strip();
    };
    BN.prototype.maskn = function maskn(bits) {
      return this.clone().imaskn(bits);
    };
    BN.prototype.iaddn = function iaddn(num) {
      assert(typeof num === 'number');
      if (num < 0)
        return this.isubn(-num);
      if (this.sign) {
        if (this.length === 1 && this.words[0] < num) {
          this.words[0] = num - this.words[0];
          this.sign = false;
          return this;
        }
        this.sign = false;
        this.isubn(num);
        this.sign = true;
        return this;
      }
      return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
      this.words[0] += num;
      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;
        if (i === this.length - 1)
          this.words[i + 1] = 1;
        else
          this.words[i + 1]++;
      }
      this.length = Math.max(this.length, i + 1);
      return this;
    };
    BN.prototype.isubn = function isubn(num) {
      assert(typeof num === 'number');
      if (num < 0)
        return this.iaddn(-num);
      if (this.sign) {
        this.sign = false;
        this.iaddn(num);
        this.sign = true;
        return this;
      }
      this.words[0] -= num;
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
      return this.strip();
    };
    BN.prototype.addn = function addn(num) {
      return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
      return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
      this.sign = false;
      return this;
    };
    BN.prototype.abs = function abs() {
      return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
      var len = num.length + shift;
      var i;
      if (this.words.length < len) {
        var t = new Array(len);
        for (var i = 0; i < this.length; i++)
          t[i] = this.words[i];
        this.words = t;
      } else {
        i = this.length;
      }
      this.length = Math.max(this.length, len);
      for (; i < this.length; i++)
        this.words[i] = 0;
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var w = this.words[i + shift] + carry;
        var right = num.words[i] * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - ((right / 0x4000000) | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }
      for (; i < this.length - shift; i++) {
        var w = this.words[i + shift] + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }
      if (carry === 0)
        return this.strip();
      assert(carry === -1);
      carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = -this.words[i] + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }
      this.sign = true;
      return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
      var shift = this.length - num.length;
      var a = this.clone();
      var b = num;
      var bhi = b.words[b.length - 1];
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b = b.shln(shift);
        a.ishln(shift);
        bhi = b.words[b.length - 1];
      }
      var m = a.length - b.length;
      var q;
      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);
        for (var i = 0; i < q.length; i++)
          q.words[i] = 0;
      }
      var diff = a.clone()._ishlnsubmul(b, 1, m);
      if (!diff.sign) {
        a = diff;
        if (q)
          q.words[m] = 1;
      }
      for (var j = m - 1; j >= 0; j--) {
        var qj = a.words[b.length + j] * 0x4000000 + a.words[b.length + j - 1];
        qj = Math.min((qj / bhi) | 0, 0x3ffffff);
        a._ishlnsubmul(b, qj, j);
        while (a.sign) {
          qj--;
          a.sign = false;
          a._ishlnsubmul(b, 1, j);
          if (a.cmpn(0) !== 0)
            a.sign = !a.sign;
        }
        if (q)
          q.words[j] = qj;
      }
      if (q)
        q.strip();
      a.strip();
      if (mode !== 'div' && shift !== 0)
        a.ishrn(shift);
      return {
        div: q ? q : null,
        mod: a
      };
    };
    BN.prototype.divmod = function divmod(num, mode) {
      assert(num.cmpn(0) !== 0);
      if (this.sign && !num.sign) {
        var res = this.neg().divmod(num, mode);
        var div;
        var mod;
        if (mode !== 'mod')
          div = res.div.neg();
        if (mode !== 'div')
          mod = res.mod.cmpn(0) === 0 ? res.mod : num.sub(res.mod);
        return {
          div: div,
          mod: mod
        };
      } else if (!this.sign && num.sign) {
        var res = this.divmod(num.neg(), mode);
        var div;
        if (mode !== 'mod')
          div = res.div.neg();
        return {
          div: div,
          mod: res.mod
        };
      } else if (this.sign && num.sign) {
        return this.neg().divmod(num.neg(), mode);
      }
      if (num.length > this.length || this.cmp(num) < 0)
        return {
          div: new BN(0),
          mod: this
        };
      if (num.length === 1) {
        if (mode === 'div')
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        else if (mode === 'mod')
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }
      return this._wordDiv(num, mode);
    };
    BN.prototype.div = function div(num) {
      return this.divmod(num, 'div').div;
    };
    BN.prototype.mod = function mod(num) {
      return this.divmod(num, 'mod').mod;
    };
    BN.prototype.divRound = function divRound(num) {
      var dm = this.divmod(num);
      if (dm.mod.cmpn(0) === 0)
        return dm.div;
      var mod = dm.div.sign ? dm.mod.isub(num) : dm.mod;
      var half = num.shrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half);
      if (cmp < 0 || r2 === 1 && cmp === 0)
        return dm.div;
      return dm.div.sign ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
      assert(num <= 0x3ffffff);
      var p = (1 << 26) % num;
      var acc = 0;
      for (var i = this.length - 1; i >= 0; i--)
        acc = (p * acc + this.words[i]) % num;
      return acc;
    };
    BN.prototype.idivn = function idivn(num) {
      assert(num <= 0x3ffffff);
      var carry = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var w = this.words[i] + carry * 0x4000000;
        this.words[i] = (w / num) | 0;
        carry = w % num;
      }
      return this.strip();
    };
    BN.prototype.divn = function divn(num) {
      return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
      assert(!p.sign);
      assert(p.cmpn(0) !== 0);
      var x = this;
      var y = p.clone();
      if (x.sign)
        x = x.mod(p);
      else
        x = x.clone();
      var A = new BN(1);
      var B = new BN(0);
      var C = new BN(0);
      var D = new BN(1);
      var g = 0;
      while (x.isEven() && y.isEven()) {
        x.ishrn(1);
        y.ishrn(1);
        ++g;
      }
      var yp = y.clone();
      var xp = x.clone();
      while (x.cmpn(0) !== 0) {
        while (x.isEven()) {
          x.ishrn(1);
          if (A.isEven() && B.isEven()) {
            A.ishrn(1);
            B.ishrn(1);
          } else {
            A.iadd(yp).ishrn(1);
            B.isub(xp).ishrn(1);
          }
        }
        while (y.isEven()) {
          y.ishrn(1);
          if (C.isEven() && D.isEven()) {
            C.ishrn(1);
            D.ishrn(1);
          } else {
            C.iadd(yp).ishrn(1);
            D.isub(xp).ishrn(1);
          }
        }
        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }
      return {
        a: C,
        b: D,
        gcd: y.ishln(g)
      };
    };
    BN.prototype._invmp = function _invmp(p) {
      assert(!p.sign);
      assert(p.cmpn(0) !== 0);
      var a = this;
      var b = p.clone();
      if (a.sign)
        a = a.mod(p);
      else
        a = a.clone();
      var x1 = new BN(1);
      var x2 = new BN(0);
      var delta = b.clone();
      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        while (a.isEven()) {
          a.ishrn(1);
          if (x1.isEven())
            x1.ishrn(1);
          else
            x1.iadd(delta).ishrn(1);
        }
        while (b.isEven()) {
          b.ishrn(1);
          if (x2.isEven())
            x2.ishrn(1);
          else
            x2.iadd(delta).ishrn(1);
        }
        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }
      if (a.cmpn(1) === 0)
        return x1;
      else
        return x2;
    };
    BN.prototype.gcd = function gcd(num) {
      if (this.cmpn(0) === 0)
        return num.clone();
      if (num.cmpn(0) === 0)
        return this.clone();
      var a = this.clone();
      var b = num.clone();
      a.sign = false;
      b.sign = false;
      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.ishrn(1);
        b.ishrn(1);
      }
      do {
        while (a.isEven())
          a.ishrn(1);
        while (b.isEven())
          b.ishrn(1);
        var r = a.cmp(b);
        if (r < 0) {
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }
        a.isub(b);
      } while (true);
      return b.ishln(shift);
    };
    BN.prototype.invm = function invm(num) {
      return this.egcd(num).a.mod(num);
    };
    BN.prototype.isEven = function isEven() {
      return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
      return (this.words[0] & 1) === 1;
    };
    BN.prototype.andln = function andln(num) {
      return this.words[0] & num;
    };
    BN.prototype.bincn = function bincn(bit) {
      assert(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;
      if (this.length <= s) {
        for (var i = this.length; i < s + 1; i++)
          this.words[i] = 0;
        this.words[s] |= q;
        this.length = s + 1;
        return this;
      }
      var carry = q;
      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i];
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };
    BN.prototype.cmpn = function cmpn(num) {
      var sign = num < 0;
      if (sign)
        num = -num;
      if (this.sign && !sign)
        return -1;
      else if (!this.sign && sign)
        return 1;
      num &= 0x3ffffff;
      this.strip();
      var res;
      if (this.length > 1) {
        res = 1;
      } else {
        var w = this.words[0];
        res = w === num ? 0 : w < num ? -1 : 1;
      }
      if (this.sign)
        res = -res;
      return res;
    };
    BN.prototype.cmp = function cmp(num) {
      if (this.sign && !num.sign)
        return -1;
      else if (!this.sign && num.sign)
        return 1;
      var res = this.ucmp(num);
      if (this.sign)
        return -res;
      else
        return res;
    };
    BN.prototype.ucmp = function ucmp(num) {
      if (this.length > num.length)
        return 1;
      else if (this.length < num.length)
        return -1;
      var res = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i];
        var b = num.words[i];
        if (a === b)
          continue;
        if (a < b)
          res = -1;
        else if (a > b)
          res = 1;
        break;
      }
      return res;
    };
    BN.red = function red(num) {
      return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
      assert(!this.red, 'Already a number in reduction context');
      assert(!this.sign, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
      assert(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
      this.red = ctx;
      return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
      assert(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
      assert(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
      assert(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
      assert(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
      assert(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
      assert(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
      assert(this.red, 'redSqr works only with red numbers');
      this.red._verify1(this);
      return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
      assert(this.red, 'redISqr works only with red numbers');
      this.red._verify1(this);
      return this.red.isqr(this);
    };
    BN.prototype.redSqrt = function redSqrt() {
      assert(this.red, 'redSqrt works only with red numbers');
      this.red._verify1(this);
      return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
      assert(this.red, 'redInvm works only with red numbers');
      this.red._verify1(this);
      return this.red.invm(this);
    };
    BN.prototype.redNeg = function redNeg() {
      assert(this.red, 'redNeg works only with red numbers');
      this.red._verify1(this);
      return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
      assert(this.red && !num.red, 'redPow(normalNum)');
      this.red._verify1(this);
      return this.red.pow(this, num);
    };
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
    function MPrime(name, p) {
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).ishln(this.n).isub(this.p);
      this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
      var r = num;
      var rlen;
      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);
      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        r.strip();
      }
      return r;
    };
    MPrime.prototype.split = function split(input, out) {
      input.ishrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
      return num.imul(this.k);
    };
    function K256() {
      MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
      var mask = 0x3fffff;
      var outLen = Math.min(input.length, 9);
      for (var i = 0; i < outLen; i++)
        output.words[i] = input.words[i];
      output.length = outLen;
      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;
      for (var i = 10; i < input.length; i++) {
        var next = input.words[i];
        input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
        prev = next;
      }
      input.words[i - 10] = prev >>> 22;
      input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;
      var hi;
      var lo = 0;
      for (var i = 0; i < num.length; i++) {
        var w = num.words[i];
        hi = w * 0x40;
        lo += w * 0x3d1;
        hi += (lo / 0x4000000) | 0;
        lo &= 0x3ffffff;
        num.words[i] = lo;
        lo = hi;
      }
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0)
          num.length--;
      }
      return num;
    };
    function P224() {
      MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
      MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
      MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var hi = num.words[i] * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;
        num.words[i] = lo;
        carry = hi;
      }
      if (carry !== 0)
        num.words[num.length++] = carry;
      return num;
    };
    BN._prime = function prime(name) {
      if (primes[name])
        return primes[name];
      var prime;
      if (name === 'k256')
        prime = new K256();
      else if (name === 'p224')
        prime = new P224();
      else if (name === 'p192')
        prime = new P192();
      else if (name === 'p25519')
        prime = new P25519();
      else
        throw new Error('Unknown prime ' + name);
      primes[name] = prime;
      return prime;
    };
    function Red(m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);
        this.m = prime.p;
        this.prime = prime;
      } else {
        this.m = m;
        this.prime = null;
      }
    }
    Red.prototype._verify1 = function _verify1(a) {
      assert(!a.sign, 'red works only with positives');
      assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
      assert(!a.sign && !b.sign, 'red works only with positives');
      assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
      if (this.prime)
        return this.prime.ireduce(a)._forceRed(this);
      return a.mod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
      var r = a.clone();
      r.sign = !r.sign;
      return r.iadd(this.m)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
      this._verify2(a, b);
      var res = a.add(b);
      if (res.cmp(this.m) >= 0)
        res.isub(this.m);
      return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
      this._verify2(a, b);
      var res = a.iadd(b);
      if (res.cmp(this.m) >= 0)
        res.isub(this.m);
      return res;
    };
    Red.prototype.sub = function sub(a, b) {
      this._verify2(a, b);
      var res = a.sub(b);
      if (res.cmpn(0) < 0)
        res.iadd(this.m);
      return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
      this._verify2(a, b);
      var res = a.isub(b);
      if (res.cmpn(0) < 0)
        res.iadd(this.m);
      return res;
    };
    Red.prototype.shl = function shl(a, num) {
      this._verify1(a);
      return this.imod(a.shln(num));
    };
    Red.prototype.imul = function imul(a, b) {
      this._verify2(a, b);
      return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
      this._verify2(a, b);
      return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
      return this.imul(a, a);
    };
    Red.prototype.sqr = function sqr(a) {
      return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
      if (a.cmpn(0) === 0)
        return a.clone();
      var mod3 = this.m.andln(3);
      assert(mod3 % 2 === 1);
      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).ishrn(2);
        var r = this.pow(a, pow);
        return r;
      }
      var q = this.m.subn(1);
      var s = 0;
      while (q.cmpn(0) !== 0 && q.andln(1) === 0) {
        s++;
        q.ishrn(1);
      }
      assert(q.cmpn(0) !== 0);
      var one = new BN(1).toRed(this);
      var nOne = one.redNeg();
      var lpow = this.m.subn(1).ishrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);
      while (this.pow(z, lpow).cmp(nOne) !== 0)
        z.redIAdd(nOne);
      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).ishrn(1));
      var t = this.pow(a, q);
      var m = s;
      while (t.cmp(one) !== 0) {
        var tmp = t;
        for (var i = 0; tmp.cmp(one) !== 0; i++)
          tmp = tmp.redSqr();
        assert(i < m);
        var b = this.pow(c, new BN(1).ishln(m - i - 1));
        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }
      return r;
    };
    Red.prototype.invm = function invm(a) {
      var inv = a._invmp(this.m);
      if (inv.sign) {
        inv.sign = false;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };
    Red.prototype.pow = function pow(a, num) {
      var w = [];
      if (num.cmpn(0) === 0)
        return new BN(1);
      var q = num.clone();
      while (q.cmpn(0) !== 0) {
        w.push(q.andln(1));
        q.ishrn(1);
      }
      var res = a;
      for (var i = 0; i < w.length; i++, res = this.sqr(res))
        if (w[i] !== 0)
          break;
      if (++i < w.length) {
        for (var q = this.sqr(res); i < w.length; i++, q = this.sqr(q)) {
          if (w[i] === 0)
            continue;
          res = this.mul(res, q);
        }
      }
      return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
      var r = num.mod(this.m);
      if (r === num)
        return r.clone();
      else
        return r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
      var res = num.clone();
      res.red = null;
      return res;
    };
    BN.mont = function mont(num) {
      return new Mont(num);
    };
    function Mont(m) {
      Red.call(this, m);
      this.shift = this.m.bitLength();
      if (this.shift % 26 !== 0)
        this.shift += 26 - (this.shift % 26);
      this.r = new BN(1).ishln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);
      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv.sign = true;
      this.minv = this.minv.mod(this.r);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
      return this.imod(num.shln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };
    Mont.prototype.imul = function imul(a, b) {
      if (a.cmpn(0) === 0 || b.cmpn(0) === 0) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }
      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).ishrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0)
        res = u.isub(this.m);
      else if (u.cmpn(0) < 0)
        res = u.iadd(this.m);
      return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
      if (a.cmpn(0) === 0 || b.cmpn(0) === 0)
        return new BN(0)._forceRed(this);
      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).ishrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0)
        res = u.isub(this.m);
      else if (u.cmpn(0) < 0)
        res = u.iadd(this.m);
      return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })(typeof module === 'undefined' || module, this);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("107", ["106"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("106");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("108", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var r;
  module.exports = function rand(len) {
    if (!r)
      r = new Rand(null);
    return r.generate(len);
  };
  function Rand(rand) {
    this.rand = rand;
  }
  module.exports.Rand = Rand;
  Rand.prototype.generate = function generate(len) {
    return this._rand(len);
  };
  if (typeof window === 'object') {
    if (window.crypto && window.crypto.getRandomValues) {
      Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        window.crypto.getRandomValues(arr);
        return arr;
      };
    } else if (window.msCrypto && window.msCrypto.getRandomValues) {
      Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        window.msCrypto.getRandomValues(arr);
        return arr;
      };
    } else {
      Rand.prototype._rand = function() {
        throw new Error('Not implemented yet');
      };
    }
  } else {
    try {
      var crypto = require('cry' + 'pto');
      Rand.prototype._rand = function _rand(n) {
        return crypto.randomBytes(n);
      };
    } catch (e) {
      Rand.prototype._rand = function _rand(n) {
        var res = new Uint8Array(n);
        for (var i = 0; i < res.length; i++)
          res[i] = this.rand.getByte();
        return res;
      };
    }
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("109", ["108"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("108");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("10a", ["107", "109"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var bn = require("107");
  var brorand = require("109");
  function MillerRabin(rand) {
    this.rand = rand || new brorand.Rand();
  }
  module.exports = MillerRabin;
  MillerRabin.create = function create(rand) {
    return new MillerRabin(rand);
  };
  MillerRabin.prototype._rand = function _rand(n) {
    var len = n.bitLength();
    var buf = this.rand.generate(Math.ceil(len / 8));
    buf[0] |= 3;
    var mask = len & 0x7;
    if (mask !== 0)
      buf[buf.length - 1] >>= 7 - mask;
    return new bn(buf);
  };
  MillerRabin.prototype.test = function test(n, k, cb) {
    var len = n.bitLength();
    var red = bn.mont(n);
    var rone = new bn(1).toRed(red);
    if (!k)
      k = Math.max(1, (len / 48) | 0);
    var n1 = n.subn(1);
    var n2 = n1.subn(1);
    for (var s = 0; !n1.testn(s); s++) {}
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    var prime = true;
    for (; k > 0; k--) {
      var a = this._rand(n2);
      if (cb)
        cb(a);
      var x = a.toRed(red).redPow(d);
      if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
        continue;
      for (var i = 1; i < s; i++) {
        x = x.redSqr();
        if (x.cmp(rone) === 0)
          return false;
        if (x.cmp(rn1) === 0)
          break;
      }
      if (i === s)
        return false;
    }
    return prime;
  };
  MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
    var len = n.bitLength();
    var red = bn.mont(n);
    var rone = new bn(1).toRed(red);
    if (!k)
      k = Math.max(1, (len / 48) | 0);
    var n1 = n.subn(1);
    var n2 = n1.subn(1);
    for (var s = 0; !n1.testn(s); s++) {}
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    for (; k > 0; k--) {
      var a = this._rand(n2);
      var g = n.gcd(a);
      if (g.cmpn(1) !== 0)
        return g;
      var x = a.toRed(red).redPow(d);
      if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
        continue;
      for (var i = 1; i < s; i++) {
        x = x.redSqr();
        if (x.cmp(rone) === 0)
          return x.fromRed().subn(1).gcd(n);
        if (x.cmp(rn1) === 0)
          break;
      }
      if (i === s) {
        x = x.redSqr();
        return x.fromRed().subn(1).gcd(n);
      }
    }
    return false;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("10b", ["10a"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("10a");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("10c", ["cc", "107", "10b"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var randomBytes = require("cc");
  module.exports = findPrime;
  findPrime.simpleSieve = simpleSieve;
  findPrime.fermatTest = fermatTest;
  var BN = require("107");
  var TWENTYFOUR = new BN(24);
  var MillerRabin = require("10b");
  var millerRabin = new MillerRabin();
  var ONE = new BN(1);
  var TWO = new BN(2);
  var FIVE = new BN(5);
  var SIXTEEN = new BN(16);
  var EIGHT = new BN(8);
  var TEN = new BN(10);
  var THREE = new BN(3);
  var SEVEN = new BN(7);
  var ELEVEN = new BN(11);
  var FOUR = new BN(4);
  var TWELVE = new BN(12);
  var primes = null;
  function _getPrimes() {
    if (primes !== null)
      return primes;
    var limit = 0x100000;
    var res = [];
    res[0] = 2;
    for (var i = 1,
        k = 3; k < limit; k += 2) {
      var sqrt = Math.ceil(Math.sqrt(k));
      for (var j = 0; j < i && res[j] <= sqrt; j++)
        if (k % res[j] === 0)
          break;
      if (i !== j && res[j] <= sqrt)
        continue;
      res[i++] = k;
    }
    primes = res;
    return res;
  }
  function simpleSieve(p) {
    var primes = _getPrimes();
    for (var i = 0; i < primes.length; i++)
      if (p.modn(primes[i]) === 0) {
        if (p.cmpn(primes[i]) === 0) {
          return true;
        } else {
          return false;
        }
      }
    return true;
  }
  function fermatTest(p) {
    var red = BN.mont(p);
    return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
  }
  function findPrime(bits, gen) {
    if (bits < 16) {
      if (gen === 2 || gen === 5) {
        return new BN([0x8c, 0x7b]);
      } else {
        return new BN([0x8c, 0x27]);
      }
    }
    gen = new BN(gen);
    var runs,
        comp;
    function generateRandom(bits) {
      runs = -1;
      var out = new BN(randomBytes(Math.ceil(bits / 8)));
      while (out.bitLength() > bits) {
        out.ishrn(1);
      }
      if (out.isEven()) {
        out.iadd(ONE);
      }
      if (!out.testn(1)) {
        out.iadd(TWO);
      }
      if (!gen.cmp(TWO)) {
        while (out.mod(TWENTYFOUR).cmp(ELEVEN)) {
          out.iadd(FOUR);
        }
        comp = {
          major: [TWENTYFOUR],
          minor: [TWELVE]
        };
      } else if (!gen.cmp(FIVE)) {
        rem = out.mod(TEN);
        while (rem.cmp(THREE)) {
          out.iadd(FOUR);
          rem = out.mod(TEN);
        }
        comp = {
          major: [FOUR, SIXTEEN],
          minor: [TWO, EIGHT]
        };
      } else {
        comp = {
          major: [FOUR],
          minor: [TWO]
        };
      }
      return out;
    }
    var num = generateRandom(bits);
    var n2 = num.shrn(1);
    while (true) {
      while (num.bitLength() > bits) {
        num = generateRandom(bits);
        n2 = num.shrn(1);
      }
      runs++;
      if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) {
        return num;
      }
      num.iadd(comp.major[runs % comp.major.length]);
      n2.iadd(comp.minor[runs % comp.minor.length]);
    }
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("10d", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "modp1": {
      "gen": "02",
      "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
      "gen": "02",
      "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
      "gen": "02",
      "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
      "gen": "02",
      "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
      "gen": "02",
      "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
      "gen": "02",
      "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
      "gen": "02",
      "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
      "gen": "02",
      "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("10e", ["107", "10b", "10c", "cc", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var BN = require("107");
    var MillerRabin = require("10b");
    var millerRabin = new MillerRabin();
    var TWENTYFOUR = new BN(24);
    var ELEVEN = new BN(11);
    var TEN = new BN(10);
    var THREE = new BN(3);
    var SEVEN = new BN(7);
    var primes = require("10c");
    var randomBytes = require("cc");
    module.exports = DH;
    function setPublicKey(pub, enc) {
      enc = enc || 'utf8';
      if (!Buffer.isBuffer(pub)) {
        pub = new Buffer(pub, enc);
      }
      this._pub = new BN(pub);
      return this;
    }
    function setPrivateKey(priv, enc) {
      enc = enc || 'utf8';
      if (!Buffer.isBuffer(priv)) {
        priv = new Buffer(priv, enc);
      }
      this._priv = new BN(priv);
      return this;
    }
    var primeCache = {};
    function checkPrime(prime, generator) {
      var gen = generator.toString('hex');
      var hex = [gen, prime.toString(16)].join('_');
      if (hex in primeCache) {
        return primeCache[hex];
      }
      var error = 0;
      if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {
        error += 1;
        if (gen === '02' || gen === '05') {
          error += 8;
        } else {
          error += 4;
        }
        primeCache[hex] = error;
        return error;
      }
      if (!millerRabin.test(prime.shrn(1))) {
        error += 2;
      }
      var rem;
      switch (gen) {
        case '02':
          if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
            error += 8;
          }
          break;
        case '05':
          rem = prime.mod(TEN);
          if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
            error += 8;
          }
          break;
        default:
          error += 4;
      }
      primeCache[hex] = error;
      return error;
    }
    function defineError(self, error) {
      try {
        Object.defineProperty(self, 'verifyError', {
          enumerable: true,
          value: error,
          writable: false
        });
      } catch (e) {
        self.verifyError = error;
      }
    }
    function DH(prime, generator, malleable) {
      this.setGenerator(generator);
      this.__prime = new BN(prime);
      this._prime = BN.mont(this.__prime);
      this._primeLen = prime.length;
      this._pub = void 0;
      this._priv = void 0;
      if (malleable) {
        this.setPublicKey = setPublicKey;
        this.setPrivateKey = setPrivateKey;
        defineError(this, checkPrime(this.__prime, generator));
      } else {
        defineError(this, 8);
      }
    }
    DH.prototype.generateKeys = function() {
      if (!this._priv) {
        this._priv = new BN(randomBytes(this._primeLen));
      }
      this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
      return this.getPublicKey();
    };
    DH.prototype.computeSecret = function(other) {
      other = new BN(other);
      other = other.toRed(this._prime);
      var secret = other.redPow(this._priv).fromRed();
      var out = new Buffer(secret.toArray());
      var prime = this.getPrime();
      if (out.length < prime.length) {
        var front = new Buffer(prime.length - out.length);
        front.fill(0);
        out = Buffer.concat([front, out]);
      }
      return out;
    };
    DH.prototype.getPublicKey = function getPublicKey(enc) {
      return formatReturnValue(this._pub, enc);
    };
    DH.prototype.getPrivateKey = function getPrivateKey(enc) {
      return formatReturnValue(this._priv, enc);
    };
    DH.prototype.getPrime = function(enc) {
      return formatReturnValue(this.__prime, enc);
    };
    DH.prototype.getGenerator = function(enc) {
      return formatReturnValue(this._gen, enc);
    };
    DH.prototype.setGenerator = function(gen, enc) {
      enc = enc || 'utf8';
      if (!Buffer.isBuffer(gen)) {
        gen = new Buffer(gen, enc);
      }
      this._gen = new BN(gen);
      return this;
    };
    function formatReturnValue(bn, enc) {
      var buf = new Buffer(bn.toArray());
      if (!enc) {
        return buf;
      } else {
        return buf.toString(enc);
      }
    }
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("10f", ["10c", "10d", "10e", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var generatePrime = require("10c");
    var primes = require("10d");
    var DH = require("10e");
    function getDiffieHellman(mod) {
      var prime = new Buffer(primes[mod].prime, 'hex');
      var gen = new Buffer(primes[mod].gen, 'hex');
      return new DH(prime, gen);
    }
    function createDiffieHellman(prime, enc, generator, genc) {
      if (Buffer.isBuffer(enc) || (typeof enc === 'string' && ['hex', 'binary', 'base64'].indexOf(enc) === -1)) {
        genc = generator;
        generator = enc;
        enc = undefined;
      }
      enc = enc || 'binary';
      genc = genc || 'binary';
      generator = generator || new Buffer([2]);
      if (!Buffer.isBuffer(generator)) {
        generator = new Buffer(generator, genc);
      }
      if (typeof prime === 'number') {
        return new DH(generatePrime(prime, generator), generator, true);
      }
      if (!Buffer.isBuffer(prime)) {
        prime = new Buffer(prime, enc);
      }
      return new DH(prime, generator, true);
    }
    exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
    exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("110", ["10f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("10f");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("111", ["107", "cc", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var bn = require("107");
    var randomBytes = require("cc");
    module.exports = crt;
    function blind(priv) {
      var r = getr(priv);
      var blinder = r.toRed(bn.mont(priv.modulus)).redPow(new bn(priv.publicExponent)).fromRed();
      return {
        blinder: blinder,
        unblinder: r.invm(priv.modulus)
      };
    }
    function crt(msg, priv) {
      var blinds = blind(priv);
      var len = priv.modulus.byteLength();
      var mod = bn.mont(priv.modulus);
      var blinded = new bn(msg).mul(blinds.blinder).mod(priv.modulus);
      var c1 = blinded.toRed(bn.mont(priv.prime1));
      var c2 = blinded.toRed(bn.mont(priv.prime2));
      var qinv = priv.coefficient;
      var p = priv.prime1;
      var q = priv.prime2;
      var m1 = c1.redPow(priv.exponent1);
      var m2 = c2.redPow(priv.exponent2);
      m1 = m1.fromRed();
      m2 = m2.fromRed();
      var h = m1.isub(m2).imul(qinv).mod(p);
      h.imul(q);
      m2.iadd(h);
      var out = new Buffer(m2.imul(blinds.unblinder).mod(priv.modulus).toArray());
      if (out.length < len) {
        var prefix = new Buffer(len - out.length);
        prefix.fill(0);
        out = Buffer.concat([prefix, out], len);
      }
      return out;
    }
    crt.getr = getr;
    function getr(priv) {
      var len = priv.modulus.byteLength();
      var r = new bn(randomBytes(len));
      while (r.cmp(priv.modulus) >= 0 || !r.mod(priv.prime1) || !r.mod(priv.prime2)) {
        r = new bn(randomBytes(len));
      }
      return r;
    }
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("112", ["111"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("111");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("113", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  exports['1.3.132.0.10'] = 'secp256k1';
  exports['1.3.132.0.33'] = 'p224';
  exports['1.2.840.10045.3.1.1'] = 'p192';
  exports['1.2.840.10045.3.1.7'] = 'p256';
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("114", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "name": "elliptic",
    "version": "3.1.0",
    "description": "EC cryptography",
    "main": "lib/elliptic.js",
    "scripts": {"test": "make lint && mocha --reporter=spec test/*-test.js"},
    "repository": {
      "type": "git",
      "url": "git@github.com:indutny/elliptic"
    },
    "keywords": ["EC", "Elliptic", "curve", "Cryptography"],
    "author": "Fedor Indutny <fedor@indutny.com>",
    "license": "MIT",
    "bugs": {"url": "https://github.com/indutny/elliptic/issues"},
    "homepage": "https://github.com/indutny/elliptic",
    "devDependencies": {
      "browserify": "^3.44.2",
      "jscs": "^1.11.3",
      "jshint": "^2.6.0",
      "mocha": "^2.1.0",
      "uglify-js": "^2.4.13"
    },
    "dependencies": {
      "bn.js": "^2.0.3",
      "brorand": "^1.0.1",
      "hash.js": "^1.0.0",
      "inherits": "^2.0.1"
    }
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("115", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  'use strict';
  var utils = exports;
  utils.assert = function assert(val, msg) {
    if (!val)
      throw new Error(msg || 'Assertion failed');
  };
  function toArray(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg !== 'string') {
      for (var i = 0; i < msg.length; i++)
        res[i] = msg[i] | 0;
      return res;
    }
    if (!enc) {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
    return res;
  }
  utils.toArray = toArray;
  function zero2(word) {
    if (word.length === 1)
      return '0' + word;
    else
      return word;
  }
  utils.zero2 = zero2;
  function toHex(msg) {
    var res = '';
    for (var i = 0; i < msg.length; i++)
      res += zero2(msg[i].toString(16));
    return res;
  }
  utils.toHex = toHex;
  utils.encode = function encode(arr, enc) {
    if (enc === 'hex')
      return toHex(arr);
    else
      return arr;
  };
  function getNAF(num, w) {
    var naf = [];
    var ws = 1 << (w + 1);
    var k = num.clone();
    while (k.cmpn(1) >= 0) {
      var z;
      if (k.isOdd()) {
        var mod = k.andln(ws - 1);
        if (mod > (ws >> 1) - 1)
          z = (ws >> 1) - mod;
        else
          z = mod;
        k.isubn(z);
      } else {
        z = 0;
      }
      naf.push(z);
      var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
      for (var i = 1; i < shift; i++)
        naf.push(0);
      k.ishrn(shift);
    }
    return naf;
  }
  utils.getNAF = getNAF;
  function getJSF(k1, k2) {
    var jsf = [[], []];
    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
      var m14 = (k1.andln(3) + d1) & 3;
      var m24 = (k2.andln(3) + d2) & 3;
      if (m14 === 3)
        m14 = -1;
      if (m24 === 3)
        m24 = -1;
      var u1;
      if ((m14 & 1) === 0) {
        u1 = 0;
      } else {
        var m8 = (k1.andln(7) + d1) & 7;
        if ((m8 === 3 || m8 === 5) && m24 === 2)
          u1 = -m14;
        else
          u1 = m14;
      }
      jsf[0].push(u1);
      var u2;
      if ((m24 & 1) === 0) {
        u2 = 0;
      } else {
        var m8 = (k2.andln(7) + d2) & 7;
        if ((m8 === 3 || m8 === 5) && m14 === 2)
          u2 = -m24;
        else
          u2 = m24;
      }
      jsf[1].push(u2);
      if (2 * d1 === u1 + 1)
        d1 = 1 - d1;
      if (2 * d2 === u2 + 1)
        d2 = 1 - d2;
      k1.ishrn(1);
      k2.ishrn(1);
    }
    return jsf;
  }
  utils.getJSF = getJSF;
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("116", ["76"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var utils = exports;
  var inherits = require("76");
  function toArray(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg === 'string') {
      if (!enc) {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 0xff;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      } else if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0)
          msg = '0' + msg;
        for (var i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      }
    } else {
      for (var i = 0; i < msg.length; i++)
        res[i] = msg[i] | 0;
    }
    return res;
  }
  utils.toArray = toArray;
  function toHex(msg) {
    var res = '';
    for (var i = 0; i < msg.length; i++)
      res += zero2(msg[i].toString(16));
    return res;
  }
  utils.toHex = toHex;
  function htonl(w) {
    var res = (w >>> 24) | ((w >>> 8) & 0xff00) | ((w << 8) & 0xff0000) | ((w & 0xff) << 24);
    return res >>> 0;
  }
  utils.htonl = htonl;
  function toHex32(msg, endian) {
    var res = '';
    for (var i = 0; i < msg.length; i++) {
      var w = msg[i];
      if (endian === 'little')
        w = htonl(w);
      res += zero8(w.toString(16));
    }
    return res;
  }
  utils.toHex32 = toHex32;
  function zero2(word) {
    if (word.length === 1)
      return '0' + word;
    else
      return word;
  }
  utils.zero2 = zero2;
  function zero8(word) {
    if (word.length === 7)
      return '0' + word;
    else if (word.length === 6)
      return '00' + word;
    else if (word.length === 5)
      return '000' + word;
    else if (word.length === 4)
      return '0000' + word;
    else if (word.length === 3)
      return '00000' + word;
    else if (word.length === 2)
      return '000000' + word;
    else if (word.length === 1)
      return '0000000' + word;
    else
      return word;
  }
  utils.zero8 = zero8;
  function join32(msg, start, end, endian) {
    var len = end - start;
    assert(len % 4 === 0);
    var res = new Array(len / 4);
    for (var i = 0,
        k = start; i < res.length; i++, k += 4) {
      var w;
      if (endian === 'big')
        w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
      else
        w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
      res[i] = w >>> 0;
    }
    return res;
  }
  utils.join32 = join32;
  function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for (var i = 0,
        k = 0; i < msg.length; i++, k += 4) {
      var m = msg[i];
      if (endian === 'big') {
        res[k] = m >>> 24;
        res[k + 1] = (m >>> 16) & 0xff;
        res[k + 2] = (m >>> 8) & 0xff;
        res[k + 3] = m & 0xff;
      } else {
        res[k + 3] = m >>> 24;
        res[k + 2] = (m >>> 16) & 0xff;
        res[k + 1] = (m >>> 8) & 0xff;
        res[k] = m & 0xff;
      }
    }
    return res;
  }
  utils.split32 = split32;
  function rotr32(w, b) {
    return (w >>> b) | (w << (32 - b));
  }
  utils.rotr32 = rotr32;
  function rotl32(w, b) {
    return (w << b) | (w >>> (32 - b));
  }
  utils.rotl32 = rotl32;
  function sum32(a, b) {
    return (a + b) >>> 0;
  }
  utils.sum32 = sum32;
  function sum32_3(a, b, c) {
    return (a + b + c) >>> 0;
  }
  utils.sum32_3 = sum32_3;
  function sum32_4(a, b, c, d) {
    return (a + b + c + d) >>> 0;
  }
  utils.sum32_4 = sum32_4;
  function sum32_5(a, b, c, d, e) {
    return (a + b + c + d + e) >>> 0;
  }
  utils.sum32_5 = sum32_5;
  function assert(cond, msg) {
    if (!cond)
      throw new Error(msg || 'Assertion failed');
  }
  utils.assert = assert;
  utils.inherits = inherits;
  function sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = (al + bl) >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
  }
  exports.sum64 = sum64;
  function sum64_hi(ah, al, bh, bl) {
    var lo = (al + bl) >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
  }
  ;
  exports.sum64_hi = sum64_hi;
  function sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
  }
  ;
  exports.sum64_lo = sum64_lo;
  function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = (lo + bl) >>> 0;
    carry += lo < al ? 1 : 0;
    lo = (lo + cl) >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = (lo + dl) >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
  }
  ;
  exports.sum64_4_hi = sum64_4_hi;
  function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
  }
  ;
  exports.sum64_4_lo = sum64_4_lo;
  function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = (lo + bl) >>> 0;
    carry += lo < al ? 1 : 0;
    lo = (lo + cl) >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = (lo + dl) >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = (lo + el) >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
  }
  ;
  exports.sum64_5_hi = sum64_5_hi;
  function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
  }
  ;
  exports.sum64_5_lo = sum64_5_lo;
  function rotr64_hi(ah, al, num) {
    var r = (al << (32 - num)) | (ah >>> num);
    return r >>> 0;
  }
  ;
  exports.rotr64_hi = rotr64_hi;
  function rotr64_lo(ah, al, num) {
    var r = (ah << (32 - num)) | (al >>> num);
    return r >>> 0;
  }
  ;
  exports.rotr64_lo = rotr64_lo;
  function shr64_hi(ah, al, num) {
    return ah >>> num;
  }
  ;
  exports.shr64_hi = shr64_hi;
  function shr64_lo(ah, al, num) {
    var r = (ah << (32 - num)) | (al >>> num);
    return r >>> 0;
  }
  ;
  exports.shr64_lo = shr64_lo;
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("117", ["118"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var hash = require("118");
  var utils = hash.utils;
  var assert = utils.assert;
  function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = 'big';
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
  }
  exports.BlockHash = BlockHash;
  BlockHash.prototype.update = function update(msg, enc) {
    msg = utils.toArray(msg, enc);
    if (!this.pending)
      this.pending = msg;
    else
      this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    if (this.pending.length >= this._delta8) {
      msg = this.pending;
      var r = msg.length % this._delta8;
      this.pending = msg.slice(msg.length - r, msg.length);
      if (this.pending.length === 0)
        this.pending = null;
      msg = utils.join32(msg, 0, msg.length - r, this.endian);
      for (var i = 0; i < msg.length; i += this._delta32)
        this._update(msg, i, i + this._delta32);
    }
    return this;
  };
  BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert(this.pending === null);
    return this._digest(enc);
  };
  BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - ((len + this.padLength) % bytes);
    var res = new Array(k + this.padLength);
    res[0] = 0x80;
    for (var i = 1; i < k; i++)
      res[i] = 0;
    len <<= 3;
    if (this.endian === 'big') {
      for (var t = 8; t < this.padLength; t++)
        res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = (len >>> 24) & 0xff;
      res[i++] = (len >>> 16) & 0xff;
      res[i++] = (len >>> 8) & 0xff;
      res[i++] = len & 0xff;
    } else {
      res[i++] = len & 0xff;
      res[i++] = (len >>> 8) & 0xff;
      res[i++] = (len >>> 16) & 0xff;
      res[i++] = (len >>> 24) & 0xff;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      for (var t = 8; t < this.padLength; t++)
        res[i++] = 0;
    }
    return res;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("119", ["118"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var hash = require("118");
  var utils = hash.utils;
  var assert = utils.assert;
  var rotr32 = utils.rotr32;
  var rotl32 = utils.rotl32;
  var sum32 = utils.sum32;
  var sum32_4 = utils.sum32_4;
  var sum32_5 = utils.sum32_5;
  var rotr64_hi = utils.rotr64_hi;
  var rotr64_lo = utils.rotr64_lo;
  var shr64_hi = utils.shr64_hi;
  var shr64_lo = utils.shr64_lo;
  var sum64 = utils.sum64;
  var sum64_hi = utils.sum64_hi;
  var sum64_lo = utils.sum64_lo;
  var sum64_4_hi = utils.sum64_4_hi;
  var sum64_4_lo = utils.sum64_4_lo;
  var sum64_5_hi = utils.sum64_5_hi;
  var sum64_5_lo = utils.sum64_5_lo;
  var BlockHash = hash.common.BlockHash;
  var sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];
  var sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];
  var sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];
  function SHA256() {
    if (!(this instanceof SHA256))
      return new SHA256();
    BlockHash.call(this);
    this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];
    this.k = sha256_K;
    this.W = new Array(64);
  }
  utils.inherits(SHA256, BlockHash);
  exports.sha256 = SHA256;
  SHA256.blockSize = 512;
  SHA256.outSize = 256;
  SHA256.hmacStrength = 192;
  SHA256.padLength = 64;
  SHA256.prototype._update = function _update(msg, start) {
    var W = this.W;
    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i++)
      W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    assert(this.k.length === W.length);
    for (var i = 0; i < W.length; i++) {
      var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
      var T2 = sum32(s0_256(a), maj32(a, b, c));
      h = g;
      g = f;
      f = e;
      e = sum32(d, T1);
      d = c;
      c = b;
      b = a;
      a = sum32(T1, T2);
    }
    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
    this.h[5] = sum32(this.h[5], f);
    this.h[6] = sum32(this.h[6], g);
    this.h[7] = sum32(this.h[7], h);
  };
  SHA256.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h, 'big');
    else
      return utils.split32(this.h, 'big');
  };
  function SHA224() {
    if (!(this instanceof SHA224))
      return new SHA224();
    SHA256.call(this);
    this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];
  }
  utils.inherits(SHA224, SHA256);
  exports.sha224 = SHA224;
  SHA224.blockSize = 512;
  SHA224.outSize = 224;
  SHA224.hmacStrength = 192;
  SHA224.padLength = 64;
  SHA224.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h.slice(0, 7), 'big');
    else
      return utils.split32(this.h.slice(0, 7), 'big');
  };
  function SHA512() {
    if (!(this instanceof SHA512))
      return new SHA512();
    BlockHash.call(this);
    this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];
    this.k = sha512_K;
    this.W = new Array(160);
  }
  utils.inherits(SHA512, BlockHash);
  exports.sha512 = SHA512;
  SHA512.blockSize = 1024;
  SHA512.outSize = 512;
  SHA512.hmacStrength = 192;
  SHA512.padLength = 128;
  SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;
    for (var i = 0; i < 32; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i += 2) {
      var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);
      var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
      var c1_hi = W[i - 14];
      var c1_lo = W[i - 13];
      var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);
      var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
      var c3_hi = W[i - 32];
      var c3_lo = W[i - 31];
      W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
      W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    }
  };
  SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);
    var W = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    assert(this.k.length === W.length);
    for (var i = 0; i < W.length; i += 2) {
      var c0_hi = hh;
      var c0_lo = hl;
      var c1_hi = s1_512_hi(eh, el);
      var c1_lo = s1_512_lo(eh, el);
      var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
      var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
      var c3_hi = this.k[i];
      var c3_lo = this.k[i + 1];
      var c4_hi = W[i];
      var c4_lo = W[i + 1];
      var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
      var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
      var c0_hi = s0_512_hi(ah, al);
      var c0_lo = s0_512_lo(ah, al);
      var c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
      var c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
      var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
      var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
      hh = gh;
      hl = gl;
      gh = fh;
      gl = fl;
      fh = eh;
      fl = el;
      eh = sum64_hi(dh, dl, T1_hi, T1_lo);
      el = sum64_lo(dl, dl, T1_hi, T1_lo);
      dh = ch;
      dl = cl;
      ch = bh;
      cl = bl;
      bh = ah;
      bl = al;
      ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
      al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    sum64(this.h, 0, ah, al);
    sum64(this.h, 2, bh, bl);
    sum64(this.h, 4, ch, cl);
    sum64(this.h, 6, dh, dl);
    sum64(this.h, 8, eh, el);
    sum64(this.h, 10, fh, fl);
    sum64(this.h, 12, gh, gl);
    sum64(this.h, 14, hh, hl);
  };
  SHA512.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h, 'big');
    else
      return utils.split32(this.h, 'big');
  };
  function SHA384() {
    if (!(this instanceof SHA384))
      return new SHA384();
    SHA512.call(this);
    this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];
  }
  utils.inherits(SHA384, SHA512);
  exports.sha384 = SHA384;
  SHA384.blockSize = 1024;
  SHA384.outSize = 384;
  SHA384.hmacStrength = 192;
  SHA384.padLength = 128;
  SHA384.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h.slice(0, 12), 'big');
    else
      return utils.split32(this.h.slice(0, 12), 'big');
  };
  function SHA1() {
    if (!(this instanceof SHA1))
      return new SHA1();
    BlockHash.call(this);
    this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
    this.W = new Array(80);
  }
  utils.inherits(SHA1, BlockHash);
  exports.sha1 = SHA1;
  SHA1.blockSize = 512;
  SHA1.outSize = 160;
  SHA1.hmacStrength = 80;
  SHA1.padLength = 64;
  SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;
    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i++)
      W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    for (var i = 0; i < W.length; i++) {
      var s = ~~(i / 20);
      var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
      e = d;
      d = c;
      c = rotl32(b, 30);
      b = a;
      a = t;
    }
    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
  };
  SHA1.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h, 'big');
    else
      return utils.split32(this.h, 'big');
  };
  function ch32(x, y, z) {
    return (x & y) ^ ((~x) & z);
  }
  function maj32(x, y, z) {
    return (x & y) ^ (x & z) ^ (y & z);
  }
  function p32(x, y, z) {
    return x ^ y ^ z;
  }
  function s0_256(x) {
    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
  }
  function s1_256(x) {
    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
  }
  function g0_256(x) {
    return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
  }
  function g1_256(x) {
    return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
  }
  function ft_1(s, x, y, z) {
    if (s === 0)
      return ch32(x, y, z);
    if (s === 1 || s === 3)
      return p32(x, y, z);
    if (s === 2)
      return maj32(x, y, z);
  }
  function ch64_hi(xh, xl, yh, yl, zh, zl) {
    var r = (xh & yh) ^ ((~xh) & zh);
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = (xl & yl) ^ ((~xl) & zl);
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  function maj64_hi(xh, xl, yh, yl, zh, zl) {
    var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 28);
    var c1_hi = rotr64_hi(xl, xh, 2);
    var c2_hi = rotr64_hi(xl, xh, 7);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 28);
    var c1_lo = rotr64_lo(xl, xh, 2);
    var c2_lo = rotr64_lo(xl, xh, 7);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 14);
    var c1_hi = rotr64_hi(xh, xl, 18);
    var c2_hi = rotr64_hi(xl, xh, 9);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 14);
    var c1_lo = rotr64_lo(xh, xl, 18);
    var c2_lo = rotr64_lo(xl, xh, 9);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 1);
    var c1_hi = rotr64_hi(xh, xl, 8);
    var c2_hi = shr64_hi(xh, xl, 7);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 1);
    var c1_lo = rotr64_lo(xh, xl, 8);
    var c2_lo = shr64_lo(xh, xl, 7);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 19);
    var c1_hi = rotr64_hi(xl, xh, 29);
    var c2_hi = shr64_hi(xh, xl, 6);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 19);
    var c1_lo = rotr64_lo(xl, xh, 29);
    var c2_lo = shr64_lo(xh, xl, 6);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("11a", ["118"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var hash = require("118");
  var utils = hash.utils;
  var rotl32 = utils.rotl32;
  var sum32 = utils.sum32;
  var sum32_3 = utils.sum32_3;
  var sum32_4 = utils.sum32_4;
  var BlockHash = hash.common.BlockHash;
  function RIPEMD160() {
    if (!(this instanceof RIPEMD160))
      return new RIPEMD160();
    BlockHash.call(this);
    this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
    this.endian = 'little';
  }
  utils.inherits(RIPEMD160, BlockHash);
  exports.ripemd160 = RIPEMD160;
  RIPEMD160.blockSize = 512;
  RIPEMD160.outSize = 160;
  RIPEMD160.hmacStrength = 192;
  RIPEMD160.padLength = 64;
  RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for (var j = 0; j < 80; j++) {
      var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
      A = E;
      E = D;
      D = rotl32(C, 10);
      C = B;
      B = T;
      T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
      Ah = Eh;
      Eh = Dh;
      Dh = rotl32(Ch, 10);
      Ch = Bh;
      Bh = T;
    }
    T = sum32_3(this.h[1], C, Dh);
    this.h[1] = sum32_3(this.h[2], D, Eh);
    this.h[2] = sum32_3(this.h[3], E, Ah);
    this.h[3] = sum32_3(this.h[4], A, Bh);
    this.h[4] = sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
  };
  RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h, 'little');
    else
      return utils.split32(this.h, 'little');
  };
  function f(j, x, y, z) {
    if (j <= 15)
      return x ^ y ^ z;
    else if (j <= 31)
      return (x & y) | ((~x) & z);
    else if (j <= 47)
      return (x | (~y)) ^ z;
    else if (j <= 63)
      return (x & z) | (y & (~z));
    else
      return x ^ (y | (~z));
  }
  function K(j) {
    if (j <= 15)
      return 0x00000000;
    else if (j <= 31)
      return 0x5a827999;
    else if (j <= 47)
      return 0x6ed9eba1;
    else if (j <= 63)
      return 0x8f1bbcdc;
    else
      return 0xa953fd4e;
  }
  function Kh(j) {
    if (j <= 15)
      return 0x50a28be6;
    else if (j <= 31)
      return 0x5c4dd124;
    else if (j <= 47)
      return 0x6d703ef3;
    else if (j <= 63)
      return 0x7a6d76e9;
    else
      return 0x00000000;
  }
  var r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
  var rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
  var s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
  var sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("11b", ["118"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var hmac = exports;
  var hash = require("118");
  var utils = hash.utils;
  var assert = utils.assert;
  function Hmac(hash, key, enc) {
    if (!(this instanceof Hmac))
      return new Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init(utils.toArray(key, enc));
  }
  module.exports = Hmac;
  Hmac.prototype._init = function init(key) {
    if (key.length > this.blockSize)
      key = new this.Hash().update(key).digest();
    assert(key.length <= this.blockSize);
    for (var i = key.length; i < this.blockSize; i++)
      key.push(0);
    for (var i = 0; i < key.length; i++)
      key[i] ^= 0x36;
    this.inner = new this.Hash().update(key);
    for (var i = 0; i < key.length; i++)
      key[i] ^= 0x6a;
    this.outer = new this.Hash().update(key);
  };
  Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
  };
  Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("118", ["116", "117", "119", "11a", "11b"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var hash = exports;
  hash.utils = require("116");
  hash.common = require("117");
  hash.sha = require("119");
  hash.ripemd = require("11a");
  hash.hmac = require("11b");
  hash.sha1 = hash.sha.sha1;
  hash.sha256 = hash.sha.sha256;
  hash.sha224 = hash.sha.sha224;
  hash.sha384 = hash.sha.sha384;
  hash.sha512 = hash.sha.sha512;
  hash.ripemd160 = hash.ripemd.ripemd160;
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("11c", ["118"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("118");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("11d", ["11c", "11e"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var hash = require("11c");
  var elliptic = require("11e");
  var utils = elliptic.utils;
  var assert = utils.assert;
  function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG))
      return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this.reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = utils.toArray(options.entropy, options.entropyEnc);
    var nonce = utils.toArray(options.nonce, options.nonceEnc);
    var pers = utils.toArray(options.pers, options.persEnc);
    assert(entropy.length >= (this.minEntropy / 8), 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._init(entropy, nonce, pers);
  }
  module.exports = HmacDRBG;
  HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for (var i = 0; i < this.V.length; i++) {
      this.K[i] = 0x00;
      this.V[i] = 0x01;
    }
    this._update(seed);
    this.reseed = 1;
    this.reseedInterval = 0x1000000000000;
  };
  HmacDRBG.prototype._hmac = function hmac() {
    return new hash.hmac(this.hash, this.K);
  };
  HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([0x00]);
    if (seed)
      kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed)
      return;
    this.K = this._hmac().update(this.V).update([0x01]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
  };
  HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    if (typeof entropyEnc !== 'string') {
      addEnc = add;
      add = entropyEnc;
      entropyEnc = null;
    }
    entropy = utils.toBuffer(entropy, entropyEnc);
    add = utils.toBuffer(add, addEnc);
    assert(entropy.length >= (this.minEntropy / 8), 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._update(entropy.concat(add || []));
    this.reseed = 1;
  };
  HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this.reseed > this.reseedInterval)
      throw new Error('Reseed is required');
    if (typeof enc !== 'string') {
      addEnc = add;
      add = enc;
      enc = null;
    }
    if (add) {
      add = utils.toArray(add, addEnc);
      this._update(add);
    }
    var temp = [];
    while (temp.length < len) {
      this.V = this._hmac().update(this.V).digest();
      temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len);
    this._update(add);
    this.reseed++;
    return utils.encode(res, enc);
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("11f", ["107", "11e"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var bn = require("107");
  var elliptic = require("11e");
  var getNAF = elliptic.utils.getNAF;
  var getJSF = elliptic.utils.getJSF;
  var assert = elliptic.utils.assert;
  function BaseCurve(type, conf) {
    this.type = type;
    this.p = new bn(conf.p, 16);
    this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);
    this.zero = new bn(0).toRed(this.red);
    this.one = new bn(1).toRed(this.red);
    this.two = new bn(2).toRed(this.red);
    this.n = conf.n && new bn(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
  }
  module.exports = BaseCurve;
  BaseCurve.prototype.point = function point() {
    throw new Error('Not implemented');
  };
  BaseCurve.prototype.validate = function validate() {
    throw new Error('Not implemented');
  };
  BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert(p.precomputed);
    var doubles = p._getDoubles();
    var naf = getNAF(k, 1);
    var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    var repr = [];
    for (var j = 0; j < naf.length; j += doubles.step) {
      var nafW = 0;
      for (var k = j + doubles.step - 1; k >= j; k--)
        nafW = (nafW << 1) + naf[k];
      repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for (var i = I; i > 0; i--) {
      for (var j = 0; j < repr.length; j++) {
        var nafW = repr[j];
        if (nafW === i)
          b = b.mixedAdd(doubles.points[j]);
        else if (nafW === -i)
          b = b.mixedAdd(doubles.points[j].neg());
      }
      a = a.add(b);
    }
    return a.toP();
  };
  BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    var naf = getNAF(k, w);
    var acc = this.jpoint(null, null, null);
    for (var i = naf.length - 1; i >= 0; i--) {
      for (var k = 0; i >= 0 && naf[i] === 0; i--)
        k++;
      if (i >= 0)
        k++;
      acc = acc.dblp(k);
      if (i < 0)
        break;
      var z = naf[i];
      assert(z !== 0);
      if (p.type === 'affine') {
        if (z > 0)
          acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
        else
          acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
      } else {
        if (z > 0)
          acc = acc.add(wnd[(z - 1) >> 1]);
        else
          acc = acc.add(wnd[(-z - 1) >> 1].neg());
      }
    }
    return p.type === 'affine' ? acc.toP() : acc;
  };
  BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    var max = 0;
    for (var i = 0; i < len; i++) {
      var p = points[i];
      var nafPoints = p._getNAFPoints(defW);
      wndWidth[i] = nafPoints.wnd;
      wnd[i] = nafPoints.points;
    }
    for (var i = len - 1; i >= 1; i -= 2) {
      var a = i - 1;
      var b = i;
      if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
        naf[a] = getNAF(coeffs[a], wndWidth[a]);
        naf[b] = getNAF(coeffs[b], wndWidth[b]);
        max = Math.max(naf[a].length, max);
        max = Math.max(naf[b].length, max);
        continue;
      }
      var comb = [points[a], null, null, points[b]];
      if (points[a].y.cmp(points[b].y) === 0) {
        comb[1] = points[a].add(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].add(points[b].neg());
      } else {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      }
      var index = [-3, -1, -5, -7, 0, 7, 5, 1, 3];
      var jsf = getJSF(coeffs[a], coeffs[b]);
      max = Math.max(jsf[0].length, max);
      naf[a] = new Array(max);
      naf[b] = new Array(max);
      for (var j = 0; j < max; j++) {
        var ja = jsf[0][j] | 0;
        var jb = jsf[1][j] | 0;
        naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
        naf[b][j] = 0;
        wnd[a] = comb;
      }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for (var i = max; i >= 0; i--) {
      var k = 0;
      while (i >= 0) {
        var zero = true;
        for (var j = 0; j < len; j++) {
          tmp[j] = naf[j][i] | 0;
          if (tmp[j] !== 0)
            zero = false;
        }
        if (!zero)
          break;
        k++;
        i--;
      }
      if (i >= 0)
        k++;
      acc = acc.dblp(k);
      if (i < 0)
        break;
      for (var j = 0; j < len; j++) {
        var z = tmp[j];
        var p;
        if (z === 0)
          continue;
        else if (z > 0)
          p = wnd[j][(z - 1) >> 1];
        else if (z < 0)
          p = wnd[j][(-z - 1) >> 1].neg();
        if (p.type === 'affine')
          acc = acc.mixedAdd(p);
        else
          acc = acc.add(p);
      }
    }
    for (var i = 0; i < len; i++)
      wnd[i] = null;
    return acc.toP();
  };
  function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
  }
  BaseCurve.BasePoint = BasePoint;
  BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
  };
  BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed)
      return this;
    var precomputed = {
      doubles: null,
      naf: null,
      beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
  };
  BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed)
      return false;
    var doubles = this.precomputed.doubles;
    if (!doubles)
      return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
  };
  BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles)
      return this.precomputed.doubles;
    var doubles = [this];
    var acc = this;
    for (var i = 0; i < power; i += step) {
      for (var j = 0; j < step; j++)
        acc = acc.dbl();
      doubles.push(acc);
    }
    return {
      step: step,
      points: doubles
    };
  };
  BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf)
      return this.precomputed.naf;
    var res = [this];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for (var i = 1; i < max; i++)
      res[i] = res[i - 1].add(dbl);
    return {
      wnd: wnd,
      points: res
    };
  };
  BasePoint.prototype._getBeta = function _getBeta() {
    return null;
  };
  BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for (var i = 0; i < k; i++)
      r = r.dbl();
    return r;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("120", ["121", "11e", "107", "76"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var curve = require("121");
  var elliptic = require("11e");
  var bn = require("107");
  var inherits = require("76");
  var Base = curve.base;
  var assert = elliptic.utils.assert;
  function ShortCurve(conf) {
    Base.call(this, 'short', conf);
    this.a = new bn(conf.a, 16).toRed(this.red);
    this.b = new bn(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
  }
  inherits(ShortCurve, Base);
  module.exports = ShortCurve;
  ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
      return;
    var beta;
    var lambda;
    if (conf.beta) {
      beta = new bn(conf.beta, 16).toRed(this.red);
    } else {
      var betas = this._getEndoRoots(this.p);
      beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
      beta = beta.toRed(this.red);
    }
    if (conf.lambda) {
      lambda = new bn(conf.lambda, 16);
    } else {
      var lambdas = this._getEndoRoots(this.n);
      if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
        lambda = lambdas[0];
      } else {
        lambda = lambdas[1];
        assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
      }
    }
    var basis;
    if (conf.basis) {
      basis = conf.basis.map(function(vec) {
        return {
          a: new bn(vec.a, 16),
          b: new bn(vec.b, 16)
        };
      });
    } else {
      basis = this._getEndoBasis(lambda);
    }
    return {
      beta: beta,
      lambda: lambda,
      basis: basis
    };
  };
  ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    var red = num === this.p ? this.red : bn.mont(num);
    var tinv = new bn(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [l1, l2];
  };
  ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    var aprxSqrt = this.n.shrn(Math.floor(this.n.bitLength() / 2));
    var u = lambda;
    var v = this.n.clone();
    var x1 = new bn(1);
    var y1 = new bn(0);
    var x2 = new bn(0);
    var y2 = new bn(1);
    var a0;
    var b0;
    var a1;
    var b1;
    var a2;
    var b2;
    var prevR;
    var i = 0;
    var r;
    var x;
    while (u.cmpn(0) !== 0) {
      var q = v.div(u);
      r = v.sub(q.mul(u));
      x = x2.sub(q.mul(x1));
      var y = y2.sub(q.mul(y1));
      if (!a1 && r.cmp(aprxSqrt) < 0) {
        a0 = prevR.neg();
        b0 = x1;
        a1 = r.neg();
        b1 = x;
      } else if (a1 && ++i === 2) {
        break;
      }
      prevR = r;
      v = u;
      u = r;
      x2 = x1;
      x1 = x;
      y2 = y1;
      y1 = y;
    }
    a2 = r.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
      a2 = a0;
      b2 = b0;
    }
    if (a1.sign) {
      a1 = a1.neg();
      b1 = b1.neg();
    }
    if (a2.sign) {
      a2 = a2.neg();
      b2 = b2.neg();
    }
    return [{
      a: a1,
      b: b1
    }, {
      a: a2,
      b: b2
    }];
  };
  ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return {
      k1: k1,
      k2: k2
    };
  };
  ShortCurve.prototype.pointFromX = function pointFromX(odd, x) {
    x = new bn(x, 16);
    if (!x.red)
      x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y = y.redNeg();
    return this.point(x, y);
  };
  ShortCurve.prototype.validate = function validate(point) {
    if (point.inf)
      return true;
    var x = point.x;
    var y = point.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
  };
  ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for (var i = 0; i < points.length; i++) {
      var split = this._endoSplit(coeffs[i]);
      var p = points[i];
      var beta = p._getBeta();
      if (split.k1.sign) {
        split.k1.sign = !split.k1.sign;
        p = p.neg(true);
      }
      if (split.k2.sign) {
        split.k2.sign = !split.k2.sign;
        beta = beta.neg(true);
      }
      npoints[i * 2] = p;
      npoints[i * 2 + 1] = beta;
      ncoeffs[i * 2] = split.k1;
      ncoeffs[i * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2);
    for (var j = 0; j < i * 2; j++) {
      npoints[j] = null;
      ncoeffs[j] = null;
    }
    return res;
  };
  function Point(curve, x, y, isRed) {
    Base.BasePoint.call(this, curve, 'affine');
    if (x === null && y === null) {
      this.x = null;
      this.y = null;
      this.inf = true;
    } else {
      this.x = new bn(x, 16);
      this.y = new bn(y, 16);
      if (isRed) {
        this.x.forceRed(this.curve.red);
        this.y.forceRed(this.curve.red);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      this.inf = false;
    }
  }
  inherits(Point, Base.BasePoint);
  ShortCurve.prototype.point = function point(x, y, isRed) {
    return new Point(this, x, y, isRed);
  };
  ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
  };
  Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo)
      return;
    var pre = this.precomputed;
    if (pre && pre.beta)
      return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
      var curve = this.curve;
      var endoMul = function(p) {
        return curve.point(p.x.redMul(curve.endo.beta), p.y);
      };
      pre.beta = beta;
      beta.precomputed = {
        beta: null,
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(endoMul)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(endoMul)
        }
      };
    }
    return beta;
  };
  Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed)
      return [this.x, this.y];
    return [this.x, this.y, this.precomputed && {
      doubles: this.precomputed.doubles && {
        step: this.precomputed.doubles.step,
        points: this.precomputed.doubles.points.slice(1)
      },
      naf: this.precomputed.naf && {
        wnd: this.precomputed.naf.wnd,
        points: this.precomputed.naf.points.slice(1)
      }
    }];
  };
  Point.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === 'string')
      obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2])
      return res;
    function obj2point(obj) {
      return curve.point(obj[0], obj[1], red);
    }
    var pre = obj[2];
    res.precomputed = {
      beta: null,
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: [res].concat(pre.doubles.points.map(obj2point))
      },
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: [res].concat(pre.naf.points.map(obj2point))
      }
    };
    return res;
  };
  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';
  };
  Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
  };
  Point.prototype.add = function add(p) {
    if (this.inf)
      return p;
    if (p.inf)
      return this;
    if (this.eq(p))
      return this.dbl();
    if (this.neg().eq(p))
      return this.curve.point(null, null);
    if (this.x.cmp(p.x) === 0)
      return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0)
      c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  Point.prototype.dbl = function dbl() {
    if (this.inf)
      return this;
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0)
      return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  Point.prototype.getX = function getX() {
    return this.x.fromRed();
  };
  Point.prototype.getY = function getY() {
    return this.y.fromRed();
  };
  Point.prototype.mul = function mul(k) {
    k = new bn(k, 16);
    if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo)
      return this.curve._endoWnafMulAdd([this], [k]);
    else
      return this.curve._wnafMul(this, k);
  };
  Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2);
  };
  Point.prototype.eq = function eq(p) {
    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
  };
  Point.prototype.neg = function neg(_precompute) {
    if (this.inf)
      return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
      var pre = this.precomputed;
      var negate = function(p) {
        return p.neg();
      };
      res.precomputed = {
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(negate)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(negate)
        }
      };
    }
    return res;
  };
  Point.prototype.toJ = function toJ() {
    if (this.inf)
      return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
  };
  function JPoint(curve, x, y, z) {
    Base.BasePoint.call(this, curve, 'jacobian');
    if (x === null && y === null && z === null) {
      this.x = this.curve.one;
      this.y = this.curve.one;
      this.z = new bn(0);
    } else {
      this.x = new bn(x, 16);
      this.y = new bn(y, 16);
      this.z = new bn(z, 16);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
  }
  inherits(JPoint, Base.BasePoint);
  ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
  };
  JPoint.prototype.toP = function toP() {
    if (this.isInfinity())
      return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
  };
  JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
  };
  JPoint.prototype.add = function add(p) {
    if (this.isInfinity())
      return p;
    if (p.isInfinity())
      return this;
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mixedAdd = function mixedAdd(p) {
    if (this.isInfinity())
      return p.toJ();
    if (p.isInfinity())
      return this;
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0)
      return this;
    if (this.isInfinity())
      return this;
    if (!pow)
      return this.dbl();
    if (this.curve.zeroA || this.curve.threeA) {
      var r = this;
      for (var i = 0; i < pow; i++)
        r = r.dbl();
      return r;
    }
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jyd = jy.redAdd(jy);
    for (var i = 0; i < pow; i++) {
      var jx2 = jx.redSqr();
      var jyd2 = jyd.redSqr();
      var jyd4 = jyd2.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
      var t1 = jx.redMul(jyd2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var dny = c.redMul(t2);
      dny = dny.redIAdd(dny).redISub(jyd4);
      var nz = jyd.redMul(jz);
      if (i + 1 < pow)
        jz4 = jz4.redMul(jyd4);
      jx = nx;
      jz = nz;
      jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
  };
  JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;
    if (this.curve.zeroA)
      return this._zeroDbl();
    else if (this.curve.threeA)
      return this._threeDbl();
    else
      return this._dbl();
  };
  JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s = s.redIAdd(s);
      var m = xx.redAdd(xx).redIAdd(xx);
      var t = m.redSqr().redISub(s).redISub(s);
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      nx = t;
      ny = m.redMul(s.redISub(t)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var a = this.x.redSqr();
      var b = this.y.redSqr();
      var c = b.redSqr();
      var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
      d = d.redIAdd(d);
      var e = a.redAdd(a).redIAdd(a);
      var f = e.redSqr();
      var c8 = c.redIAdd(c);
      c8 = c8.redIAdd(c8);
      c8 = c8.redIAdd(c8);
      nx = f.redISub(d).redISub(d);
      ny = e.redMul(d.redISub(nx)).redISub(c8);
      nz = this.y.redMul(this.z);
      nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s = s.redIAdd(s);
      var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
      var t = m.redSqr().redISub(s).redISub(s);
      nx = t;
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      ny = m.redMul(s.redISub(t)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var delta = this.z.redSqr();
      var gamma = this.y.redSqr();
      var beta = this.x.redMul(gamma);
      var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
      alpha = alpha.redAdd(alpha).redIAdd(alpha);
      var beta4 = beta.redIAdd(beta);
      beta4 = beta4.redIAdd(beta4);
      var beta8 = beta4.redAdd(beta4);
      nx = alpha.redSqr().redISub(beta8);
      nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
      var ggamma8 = gamma.redSqr();
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA)
      return this.dbl().add(this);
    var xx = this.x.redSqr();
    var yy = this.y.redSqr();
    var zz = this.z.redSqr();
    var yyyy = yy.redSqr();
    var m = xx.redAdd(xx).redIAdd(xx);
    var mm = m.redSqr();
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    var ee = e.redSqr();
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mul = function mul(k, kbase) {
    k = new bn(k, kbase);
    return this.curve._wnafMul(this, k);
  };
  JPoint.prototype.eq = function eq(p) {
    if (p.type === 'affine')
      return this.eq(p.toJ());
    if (this === p)
      return true;
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
      return false;
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
  };
  JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC JPoint Infinity>';
    return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';
  };
  JPoint.prototype.isInfinity = function isInfinity() {
    return this.z.cmpn(0) === 0;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("122", ["121", "107", "76"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var curve = require("121");
  var bn = require("107");
  var inherits = require("76");
  var Base = curve.base;
  function MontCurve(conf) {
    Base.call(this, 'mont', conf);
    this.a = new bn(conf.a, 16).toRed(this.red);
    this.b = new bn(conf.b, 16).toRed(this.red);
    this.i4 = new bn(4).toRed(this.red).redInvm();
    this.two = new bn(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
  }
  inherits(MontCurve, Base);
  module.exports = MontCurve;
  MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();
    return y.redSqr().cmp(rhs) === 0;
  };
  function Point(curve, x, z) {
    Base.BasePoint.call(this, curve, 'projective');
    if (x === null && z === null) {
      this.x = this.curve.one;
      this.z = this.curve.zero;
    } else {
      this.x = new bn(x, 16);
      this.z = new bn(z, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
    }
  }
  inherits(Point, Base.BasePoint);
  MontCurve.prototype.point = function point(x, z) {
    return new Point(this, x, z);
  };
  MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
  };
  Point.prototype.precompute = function precompute() {};
  Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1] || curve.one);
  };
  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
  };
  Point.prototype.isInfinity = function isInfinity() {
    return this.z.cmpn(0) === 0;
  };
  Point.prototype.dbl = function dbl() {
    var a = this.x.redAdd(this.z);
    var aa = a.redSqr();
    var b = this.x.redSub(this.z);
    var bb = b.redSqr();
    var c = aa.redSub(bb);
    var nx = aa.redMul(bb);
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
  };
  Point.prototype.add = function add() {
    throw new Error('Not supported on Montgomery curve');
  };
  Point.prototype.diffAdd = function diffAdd(p, diff) {
    var a = this.x.redAdd(this.z);
    var b = this.x.redSub(this.z);
    var c = p.x.redAdd(p.z);
    var d = p.x.redSub(p.z);
    var da = d.redMul(a);
    var cb = c.redMul(b);
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
  };
  Point.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this;
    var b = this.curve.point(null, null);
    var c = this;
    for (var bits = []; t.cmpn(0) !== 0; t.ishrn(1))
      bits.push(t.andln(1));
    for (var i = bits.length - 1; i >= 0; i--) {
      if (bits[i] === 0) {
        a = a.diffAdd(b, c);
        b = b.dbl();
      } else {
        b = a.diffAdd(b, c);
        a = a.dbl();
      }
    }
    return b;
  };
  Point.prototype.mulAdd = function mulAdd() {
    throw new Error('Not supported on Montgomery curve');
  };
  Point.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
  };
  Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("123", ["121", "11e", "107", "76"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var curve = require("121");
  var elliptic = require("11e");
  var bn = require("107");
  var inherits = require("76");
  var Base = curve.base;
  var assert = elliptic.utils.assert;
  function EdwardsCurve(conf) {
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
    Base.call(this, 'edwards', conf);
    this.a = new bn(conf.a, 16).mod(this.red.m).toRed(this.red);
    this.c = new bn(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new bn(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
    assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
  }
  inherits(EdwardsCurve, Base);
  module.exports = EdwardsCurve;
  EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA)
      return num.redNeg();
    else
      return this.a.redMul(num);
  };
  EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC)
      return num;
    else
      return this.c.redMul(num);
  };
  EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
  };
  EdwardsCurve.prototype.pointFromX = function pointFromX(odd, x) {
    x = new bn(x, 16);
    if (!x.red)
      x = x.toRed(this.red);
    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
    var y = rhs.redMul(lhs.redInvm()).redSqrt();
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y = y.redNeg();
    return this.point(x, y, curve.one);
  };
  EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity())
      return true;
    point.normalize();
    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    return lhs.cmp(rhs) === 0;
  };
  function Point(curve, x, y, z, t) {
    Base.BasePoint.call(this, curve, 'projective');
    if (x === null && y === null && z === null) {
      this.x = this.curve.zero;
      this.y = this.curve.one;
      this.z = this.curve.one;
      this.t = this.curve.zero;
      this.zOne = true;
    } else {
      this.x = new bn(x, 16);
      this.y = new bn(y, 16);
      this.z = z ? new bn(z, 16) : this.curve.one;
      this.t = t && new bn(t, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
      if (this.t && !this.t.red)
        this.t = this.t.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;
      if (this.curve.extended && !this.t) {
        this.t = this.x.redMul(this.y);
        if (!this.zOne)
          this.t = this.t.redMul(this.z.redInvm());
      }
    }
  }
  inherits(Point, Base.BasePoint);
  EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
  };
  EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new Point(this, x, y, z, t);
  };
  Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1], obj[2]);
  };
  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
  };
  Point.prototype.isInfinity = function isInfinity() {
    return this.x.cmpn(0) === 0 && this.y.cmp(this.z) === 0;
  };
  Point.prototype._extDbl = function _extDbl() {
    var a = this.x.redSqr();
    var b = this.y.redSqr();
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    var d = this.curve._mulA(a);
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    var g = d.redAdd(b);
    var f = g.redSub(c);
    var h = d.redSub(b);
    var nx = e.redMul(f);
    var ny = g.redMul(h);
    var nt = e.redMul(h);
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
  };
  Point.prototype._projDbl = function _projDbl() {
    var b = this.x.redAdd(this.y).redSqr();
    var c = this.x.redSqr();
    var d = this.y.redSqr();
    var nx;
    var ny;
    var nz;
    if (this.curve.twisted) {
      var e = this.curve._mulA(c);
      var f = e.redAdd(d);
      if (this.zOne) {
        nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
        ny = f.redMul(e.redSub(d));
        nz = f.redSqr().redSub(f).redSub(f);
      } else {
        var h = this.z.redSqr();
        var j = f.redSub(h).redISub(h);
        nx = b.redSub(c).redISub(d).redMul(j);
        ny = f.redMul(e.redSub(d));
        nz = f.redMul(j);
      }
    } else {
      var e = c.redAdd(d);
      var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
      var j = e.redSub(h).redSub(h);
      nx = this.curve._mulC(b.redISub(e)).redMul(j);
      ny = this.curve._mulC(e).redMul(c.redISub(d));
      nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
  };
  Point.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;
    if (this.curve.extended)
      return this._extDbl();
    else
      return this._projDbl();
  };
  Point.prototype._extAdd = function _extAdd(p) {
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    var d = this.z.redMul(p.z.redAdd(p.z));
    var e = b.redSub(a);
    var f = d.redSub(c);
    var g = d.redAdd(c);
    var h = b.redAdd(a);
    var nx = e.redMul(f);
    var ny = g.redMul(h);
    var nt = e.redMul(h);
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
  };
  Point.prototype._projAdd = function _projAdd(p) {
    var a = this.z.redMul(p.z);
    var b = a.redSqr();
    var c = this.x.redMul(p.x);
    var d = this.y.redMul(p.y);
    var e = this.curve.d.redMul(c).redMul(d);
    var f = b.redSub(e);
    var g = b.redAdd(e);
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
      ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
      nz = f.redMul(g);
    } else {
      ny = a.redMul(g).redMul(d.redSub(c));
      nz = this.curve._mulC(f).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
  };
  Point.prototype.add = function add(p) {
    if (this.isInfinity())
      return p;
    if (p.isInfinity())
      return this;
    if (this.curve.extended)
      return this._extAdd(p);
    else
      return this._projAdd(p);
  };
  Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);
    else
      return this.curve._wnafMul(this, k);
  };
  Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2);
  };
  Point.prototype.normalize = function normalize() {
    if (this.zOne)
      return this;
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t)
      this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
  };
  Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
  };
  Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
  };
  Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
  };
  Point.prototype.toP = Point.prototype.normalize;
  Point.prototype.mixedAdd = Point.prototype.add;
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("121", ["11f", "120", "122", "123"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var curve = exports;
  curve.base = require("11f");
  curve.short = require("120");
  curve.mont = require("122");
  curve.edwards = require("123");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("124", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    doubles: {
      step: 4,
      points: [['e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a', 'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'], ['8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508', '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'], ['175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739', 'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'], ['363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640', '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'], ['8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c', '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'], ['723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda', '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'], ['eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa', '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'], ['100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0', 'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'], ['e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d', '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'], ['feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d', 'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'], ['da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1', '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'], ['53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0', '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'], ['8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047', '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'], ['385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862', '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'], ['6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7', '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'], ['3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd', '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'], ['85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83', '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'], ['948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a', '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'], ['6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8', 'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'], ['e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d', '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'], ['e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725', '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'], ['213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754', '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'], ['4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c', '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'], ['fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6', '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'], ['76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39', 'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'], ['c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891', '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'], ['d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b', 'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'], ['b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03', '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'], ['e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d', 'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'], ['a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070', '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'], ['90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4', 'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'], ['8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da', '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'], ['e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11', '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'], ['8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e', 'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'], ['e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41', '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'], ['b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef', '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'], ['d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8', 'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'], ['324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d', '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'], ['4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96', '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'], ['9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd', 'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'], ['6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5', '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'], ['a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266', '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'], ['7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71', '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'], ['928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac', 'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'], ['85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751', '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'], ['ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e', '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'], ['827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241', 'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'], ['eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3', 'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'], ['e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f', '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'], ['1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19', 'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'], ['146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be', 'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'], ['fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9', '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'], ['da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2', '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'], ['a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13', '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'], ['174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c', 'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'], ['959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba', '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'], ['d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151', 'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'], ['64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073', 'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'], ['8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458', '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'], ['13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b', '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'], ['bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366', 'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'], ['8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa', '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'], ['8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0', '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'], ['dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787', '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'], ['f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e', 'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82']]
    },
    naf: {
      wnd: 7,
      points: [['f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9', '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'], ['2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4', 'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'], ['5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc', '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'], ['acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe', 'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'], ['774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb', 'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'], ['f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8', 'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'], ['d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e', '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'], ['defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34', '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'], ['2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c', '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'], ['352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5', '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'], ['2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f', '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'], ['9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714', '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'], ['daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729', 'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'], ['c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db', '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'], ['6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4', 'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'], ['1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5', 'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'], ['605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479', '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'], ['62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d', '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'], ['80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f', '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'], ['7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb', 'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'], ['d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9', 'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'], ['49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963', '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'], ['77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74', '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'], ['f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530', 'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'], ['463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b', '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'], ['f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247', 'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'], ['caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1', 'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'], ['2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120', '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'], ['7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435', '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'], ['754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18', '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'], ['e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8', '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'], ['186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb', '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'], ['df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f', '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'], ['5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143', 'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'], ['290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba', 'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'], ['af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45', 'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'], ['766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a', '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'], ['59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e', 'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'], ['f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8', 'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'], ['7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c', '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'], ['948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519', 'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'], ['7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab', '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'], ['3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca', 'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'], ['d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf', '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'], ['1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610', '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'], ['733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4', 'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'], ['15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c', 'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'], ['a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940', 'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'], ['e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980', 'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'], ['311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3', '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'], ['34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf', '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'], ['f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63', '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'], ['d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448', 'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'], ['32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf', '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'], ['7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5', '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'], ['ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6', '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'], ['16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5', '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'], ['eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99', 'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'], ['78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51', 'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'], ['494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5', '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'], ['a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5', '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'], ['c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997', '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'], ['841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881', '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'], ['5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5', '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'], ['36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66', 'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'], ['336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726', 'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'], ['8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede', '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'], ['1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94', '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'], ['85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31', '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'], ['29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51', 'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'], ['a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252', 'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'], ['4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5', 'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'], ['d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b', '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'], ['ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4', '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'], ['af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f', '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'], ['e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889', '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'], ['591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246', 'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'], ['11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984', '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'], ['3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a', 'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'], ['cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030', 'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'], ['c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197', '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'], ['c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593', 'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'], ['a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef', '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'], ['347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38', '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'], ['da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a', '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'], ['c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111', '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'], ['4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502', '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'], ['3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea', 'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'], ['cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26', '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'], ['b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986', '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'], ['d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e', '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'], ['48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4', '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'], ['dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda', 'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'], ['6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859', 'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'], ['e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f', 'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'], ['eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c', '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'], ['13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942', 'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'], ['ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a', '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'], ['b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80', '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'], ['ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d', '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'], ['8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1', 'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'], ['52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63', 'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'], ['e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352', '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'], ['7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193', 'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'], ['5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00', '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'], ['32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58', 'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'], ['e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7', 'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'], ['8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8', 'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'], ['4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e', '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'], ['3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d', 'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'], ['674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b', '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'], ['d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f', 'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'], ['30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6', '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'], ['be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297', '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'], ['93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a', '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'], ['b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c', 'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'], ['d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52', '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'], ['d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb', 'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'], ['463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065', 'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'], ['7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917', '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'], ['74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9', 'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'], ['30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3', '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'], ['9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57', '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'], ['176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66', 'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'], ['75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8', '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'], ['809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721', '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'], ['1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180', '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9']]
    }
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("125", ["11c", "11e", "124"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var curves = exports;
  var hash = require("11c");
  var elliptic = require("11e");
  var assert = elliptic.utils.assert;
  function PresetCurve(options) {
    if (options.type === 'short')
      this.curve = new elliptic.curve.short(options);
    else if (options.type === 'edwards')
      this.curve = new elliptic.curve.edwards(options);
    else
      this.curve = new elliptic.curve.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    assert(this.g.validate(), 'Invalid curve');
    assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
  }
  curves.PresetCurve = PresetCurve;
  function defineCurve(name, options) {
    Object.defineProperty(curves, name, {
      configurable: true,
      enumerable: true,
      get: function() {
        var curve = new PresetCurve(options);
        Object.defineProperty(curves, name, {
          configurable: true,
          enumerable: true,
          value: curve
        });
        return curve;
      }
    });
  }
  defineCurve('p192', {
    type: 'short',
    prime: 'p192',
    p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
    b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
    n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
    hash: hash.sha256,
    gRed: false,
    g: ['188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012', '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811']
  });
  defineCurve('p224', {
    type: 'short',
    prime: 'p224',
    p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
    b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
    n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
    hash: hash.sha256,
    gRed: false,
    g: ['b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21', 'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34']
  });
  defineCurve('p256', {
    type: 'short',
    prime: null,
    p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
    a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
    b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
    n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
    hash: hash.sha256,
    gRed: false,
    g: ['6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296', '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5']
  });
  defineCurve('curve25519', {
    type: 'mont',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '76d06',
    b: '0',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash.sha256,
    gRed: false,
    g: ['9']
  });
  defineCurve('ed25519', {
    type: 'edwards',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '-1',
    c: '1',
    d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash.sha256,
    gRed: false,
    g: ['216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a', '6666666666666666666666666666666666666666666666666666666666666658']
  });
  var pre;
  try {
    pre = require("124");
  } catch (e) {
    pre = undefined;
  }
  defineCurve('secp256k1', {
    type: 'short',
    prime: 'k256',
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
    a: '0',
    b: '7',
    n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
    h: '1',
    hash: hash.sha256,
    beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
    lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
    basis: [{
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    }, {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }],
    gRed: false,
    g: ['79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798', '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8', pre]
  });
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("126", ["107", "11e"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var bn = require("107");
  var elliptic = require("11e");
  var utils = elliptic.utils;
  function KeyPair(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;
    if (options.priv)
      this._importPrivate(options.priv, options.privEnc);
    if (options.pub)
      this._importPublic(options.pub, options.pubEnc);
  }
  module.exports = KeyPair;
  KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof KeyPair)
      return pub;
    return new KeyPair(ec, {
      pub: pub,
      pubEnc: enc
    });
  };
  KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof KeyPair)
      return priv;
    return new KeyPair(ec, {
      priv: priv,
      privEnc: enc
    });
  };
  KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity())
      return {
        result: false,
        reason: 'Invalid public key'
      };
    if (!pub.validate())
      return {
        result: false,
        reason: 'Public key is not a point'
      };
    if (!pub.mul(this.ec.curve.n).isInfinity())
      return {
        result: false,
        reason: 'Public key * N != O'
      };
    return {
      result: true,
      reason: null
    };
  };
  KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    if (!this.pub)
      this.pub = this.ec.g.mul(this.priv);
    if (typeof compact === 'string') {
      enc = compact;
      compact = null;
    }
    if (!enc)
      return this.pub;
    var len = this.ec.curve.p.byteLength();
    var x = this.pub.getX().toArray();
    for (var i = x.length; i < len; i++)
      x.unshift(0);
    var res;
    if (this.ec.curve.type !== 'mont') {
      if (compact) {
        res = [this.pub.getY().isEven() ? 0x02 : 0x03].concat(x);
      } else {
        var y = this.pub.getY().toArray();
        for (var i = y.length; i < len; i++)
          y.unshift(0);
        var res = [0x04].concat(x, y);
      }
    } else {
      res = x;
    }
    return utils.encode(res, enc);
  };
  KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === 'hex')
      return this.priv.toString(16, 2);
    else
      return this.priv;
  };
  KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new bn(key, enc || 16);
    this.priv = this.priv.mod(this.ec.curve.n);
  };
  KeyPair.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
      this.pub = this.ec.curve.point(key.x, key.y);
      return;
    }
    key = utils.toArray(key, enc);
    if (this.ec.curve.type !== 'mont')
      return this._importPublicShort(key);
    else
      return this._importPublicMont(key);
  };
  KeyPair.prototype._importPublicShort = function _importPublicShort(key) {
    var len = this.ec.curve.p.byteLength();
    if (key[0] === 0x04 && key.length - 1 === 2 * len) {
      this.pub = this.ec.curve.point(key.slice(1, 1 + len), key.slice(1 + len, 1 + 2 * len));
    } else if ((key[0] === 0x02 || key[0] === 0x03) && key.length - 1 === len) {
      this.pub = this.ec.curve.pointFromX(key[0] === 0x03, key.slice(1, 1 + len));
    }
  };
  KeyPair.prototype._importPublicMont = function _importPublicMont(key) {
    this.pub = this.ec.curve.point(key, 1);
  };
  KeyPair.prototype.derive = function derive(pub) {
    return pub.mul(this.priv).getX();
  };
  KeyPair.prototype.sign = function sign(msg) {
    return this.ec.sign(msg, this);
  };
  KeyPair.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
  };
  KeyPair.prototype.inspect = function inspect() {
    return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("127", ["107", "11e"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var bn = require("107");
  var elliptic = require("11e");
  var utils = elliptic.utils;
  var assert = utils.assert;
  function Signature(options, enc) {
    if (options instanceof Signature)
      return options;
    if (this._importDER(options, enc))
      return;
    assert(options.r && options.s, 'Signature without r or s');
    this.r = new bn(options.r, 16);
    this.s = new bn(options.s, 16);
    if (options.recoveryParam !== null)
      this.recoveryParam = options.recoveryParam;
    else
      this.recoveryParam = null;
  }
  module.exports = Signature;
  Signature.prototype._importDER = function _importDER(data, enc) {
    data = utils.toArray(data, enc);
    if (data.length < 6 || data[0] !== 0x30 || data[2] !== 0x02)
      return false;
    var total = data[1];
    if (1 + total > data.length)
      return false;
    var rlen = data[3];
    if (rlen >= 0x80)
      return false;
    if (4 + rlen + 2 >= data.length)
      return false;
    if (data[4 + rlen] !== 0x02)
      return false;
    var slen = data[5 + rlen];
    if (slen >= 0x80)
      return false;
    if (4 + rlen + 2 + slen > data.length)
      return false;
    this.r = new bn(data.slice(4, 4 + rlen));
    this.s = new bn(data.slice(4 + rlen + 2, 4 + rlen + 2 + slen));
    this.recoveryParam = null;
    return true;
  };
  Signature.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();
    if (r[0] & 0x80)
      r = [0].concat(r);
    if (s[0] & 0x80)
      s = [0].concat(s);
    var total = r.length + s.length + 4;
    var res = [0x30, total, 0x02, r.length];
    res = res.concat(r, [0x02, s.length], s);
    return utils.encode(res, enc);
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("128", ["107", "11e", "126", "127"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var bn = require("107");
  var elliptic = require("11e");
  var utils = elliptic.utils;
  var assert = utils.assert;
  var KeyPair = require("126");
  var Signature = require("127");
  function EC(options) {
    if (!(this instanceof EC))
      return new EC(options);
    if (typeof options === 'string') {
      assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);
      options = elliptic.curves[options];
    }
    if (options instanceof elliptic.curves.PresetCurve)
      options = {curve: options};
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.shrn(1);
    this.g = this.curve.g;
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    this.hash = options.hash || options.curve.hash;
  }
  module.exports = EC;
  EC.prototype.keyPair = function keyPair(options) {
    return new KeyPair(this, options);
  };
  EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return KeyPair.fromPrivate(this, priv, enc);
  };
  EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return KeyPair.fromPublic(this, pub, enc);
  };
  EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options)
      options = {};
    var drbg = new elliptic.hmacDRBG({
      hash: this.hash,
      pers: options.pers,
      entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
      nonce: this.n.toArray()
    });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new bn(2));
    do {
      var priv = new bn(drbg.generate(bytes));
      if (priv.cmp(ns2) > 0)
        continue;
      priv.iaddn(1);
      return this.keyFromPrivate(priv);
    } while (true);
  };
  EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0)
      msg = msg.shrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0)
      return msg.sub(this.n);
    else
      return msg;
  };
  EC.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === 'object') {
      options = enc;
      enc = null;
    }
    if (!options)
      options = {};
    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new bn(msg, 16));
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray();
    for (var i = bkey.length; i < 21; i++)
      bkey.unshift(0);
    var nonce = msg.toArray();
    for (var i = nonce.length; i < bytes; i++)
      nonce.unshift(0);
    var drbg = new elliptic.hmacDRBG({
      hash: this.hash,
      entropy: bkey,
      nonce: nonce
    });
    var ns1 = this.n.sub(new bn(1));
    do {
      var k = new bn(drbg.generate(this.n.byteLength()));
      k = this._truncateToN(k, true);
      if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
        continue;
      var kp = this.g.mul(k);
      if (kp.isInfinity())
        continue;
      var kpX = kp.getX();
      var r = kpX.mod(this.n);
      if (r.cmpn(0) === 0)
        continue;
      var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg)).mod(this.n);
      if (s.cmpn(0) === 0)
        continue;
      if (options.canonical && s.cmp(this.nh) > 0)
        s = this.n.sub(s);
      var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
      return new Signature({
        r: r,
        s: s,
        recoveryParam: recoveryParam
      });
    } while (true);
  };
  EC.prototype.verify = function verify(msg, signature, key, enc) {
    msg = this._truncateToN(new bn(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature = new Signature(signature, 'hex');
    var r = signature.r;
    var s = signature.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
      return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
      return false;
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).mod(this.n);
    var u2 = sinv.mul(r).mod(this.n);
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;
    return p.getX().mod(this.n).cmp(r) === 0;
  };
  EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
    assert((3 & j) === j, 'The recovery param is more than two bits');
    signature = new Signature(signature, enc);
    var n = this.n;
    var e = new bn(msg);
    var r = signature.r;
    var s = signature.s;
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.mod(this.curve.n)) >= 0 && isSecondKey)
      throw new Error('Unable to find sencond key candinate');
    r = this.curve.pointFromX(isYOdd, r);
    var eNeg = e.neg().mod(n);
    var rInv = signature.r.invm(n);
    return r.mul(s).add(this.g.mul(eNeg)).mul(rInv);
  };
  EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
    signature = new Signature(signature, enc);
    if (signature.recoveryParam !== null)
      return signature.recoveryParam;
    for (var i = 0; i < 4; i++) {
      var Qprime = this.recoverPubKey(e, signature, i);
      if (Qprime.eq(Q))
        return i;
    }
    throw new Error('Unable to find valid recovery factor');
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("11e", ["114", "115", "109", "11d", "121", "125", "128"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var elliptic = exports;
  elliptic.version = require("114").version;
  elliptic.utils = require("115");
  elliptic.rand = require("109");
  elliptic.hmacDRBG = require("11d");
  elliptic.curve = require("121");
  elliptic.curves = require("125");
  elliptic.ec = require("128");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("129", ["11e"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("11e");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("12a", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var indexOf = [].indexOf;
  module.exports = function(arr, obj) {
    if (indexOf)
      return arr.indexOf(obj);
    for (var i = 0; i < arr.length; ++i) {
      if (arr[i] === obj)
        return i;
    }
    return -1;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("12b", ["12a"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("12a");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("12c", ["12b"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var indexOf = require("12b");
  var Object_keys = function(obj) {
    if (Object.keys)
      return Object.keys(obj);
    else {
      var res = [];
      for (var key in obj)
        res.push(key);
      return res;
    }
  };
  var forEach = function(xs, fn) {
    if (xs.forEach)
      return xs.forEach(fn);
    else
      for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
      }
  };
  var defineProp = (function() {
    try {
      Object.defineProperty({}, '_', {});
      return function(obj, name, value) {
        Object.defineProperty(obj, name, {
          writable: true,
          enumerable: false,
          configurable: true,
          value: value
        });
      };
    } catch (e) {
      return function(obj, name, value) {
        obj[name] = value;
      };
    }
  }());
  var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function', 'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError', 'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError', 'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape', 'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];
  function Context() {}
  Context.prototype = {};
  var Script = exports.Script = function NodeScript(code) {
    if (!(this instanceof Script))
      return new Script(code);
    this.code = code;
  };
  Script.prototype.runInContext = function(context) {
    if (!(context instanceof Context)) {
      throw new TypeError("needs a 'context' argument.");
    }
    var iframe = document.createElement('iframe');
    if (!iframe.style)
      iframe.style = {};
    iframe.style.display = 'none';
    document.body.appendChild(iframe);
    var win = iframe.contentWindow;
    var wEval = win.eval,
        wExecScript = win.execScript;
    if (!wEval && wExecScript) {
      wExecScript.call(win, 'null');
      wEval = win.eval;
    }
    forEach(Object_keys(context), function(key) {
      win[key] = context[key];
    });
    forEach(globals, function(key) {
      if (context[key]) {
        win[key] = context[key];
      }
    });
    var winKeys = Object_keys(win);
    var res = wEval.call(win, this.code);
    forEach(Object_keys(win), function(key) {
      if (key in context || indexOf(winKeys, key) === -1) {
        context[key] = win[key];
      }
    });
    forEach(globals, function(key) {
      if (!(key in context)) {
        defineProp(context, key, win[key]);
      }
    });
    document.body.removeChild(iframe);
    return res;
  };
  Script.prototype.runInThisContext = function() {
    return eval(this.code);
  };
  Script.prototype.runInNewContext = function(context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);
    forEach(Object_keys(ctx), function(key) {
      context[key] = ctx[key];
    });
    return res;
  };
  forEach(Object_keys(Script.prototype), function(name) {
    exports[name] = Script[name] = function(code) {
      var s = Script(code);
      return s[name].apply(s, [].slice.call(arguments, 1));
    };
  });
  exports.createScript = function(code) {
    return exports.Script(code);
  };
  exports.createContext = Script.createContext = function(context) {
    var copy = new Context();
    if (typeof context === 'object') {
      forEach(Object_keys(context), function(key) {
        copy[key] = context[key];
      });
    }
    return copy;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("12d", ["12c"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("12c");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("12e", ["12d"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = $__System._nodeRequire ? $__System._nodeRequire('vm') : require("12d");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("12f", ["12e"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("12e");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("130", ["131", "76", "12f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var asn1 = require("131");
  var inherits = require("76");
  var api = exports;
  api.define = function define(name, body) {
    return new Entity(name, body);
  };
  function Entity(name, body) {
    this.name = name;
    this.body = body;
    this.decoders = {};
    this.encoders = {};
  }
  ;
  Entity.prototype._createNamed = function createNamed(base) {
    var named;
    try {
      named = require("12f").runInThisContext('(function ' + this.name + '(entity) {\n' + '  this._initNamed(entity);\n' + '})');
    } catch (e) {
      named = function(entity) {
        this._initNamed(entity);
      };
    }
    inherits(named, base);
    named.prototype._initNamed = function initnamed(entity) {
      base.call(this, entity);
    };
    return new named(this);
  };
  Entity.prototype._getDecoder = function _getDecoder(enc) {
    if (!this.decoders.hasOwnProperty(enc))
      this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
    return this.decoders[enc];
  };
  Entity.prototype.decode = function decode(data, enc, options) {
    return this._getDecoder(enc).decode(data, options);
  };
  Entity.prototype._getEncoder = function _getEncoder(enc) {
    if (!this.encoders.hasOwnProperty(enc))
      this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
    return this.encoders[enc];
  };
  Entity.prototype.encode = function encode(data, enc, reporter) {
    return this._getEncoder(enc).encode(data, reporter);
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("132", ["76"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var inherits = require("76");
  function Reporter(options) {
    this._reporterState = {
      obj: null,
      path: [],
      options: options || {},
      errors: []
    };
  }
  exports.Reporter = Reporter;
  Reporter.prototype.isError = function isError(obj) {
    return obj instanceof ReporterError;
  };
  Reporter.prototype.save = function save() {
    var state = this._reporterState;
    return {
      obj: state.obj,
      pathLen: state.path.length
    };
  };
  Reporter.prototype.restore = function restore(data) {
    var state = this._reporterState;
    state.obj = data.obj;
    state.path = state.path.slice(0, data.pathLen);
  };
  Reporter.prototype.enterKey = function enterKey(key) {
    return this._reporterState.path.push(key);
  };
  Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
    var state = this._reporterState;
    state.path = state.path.slice(0, index - 1);
    if (state.obj !== null)
      state.obj[key] = value;
  };
  Reporter.prototype.enterObject = function enterObject() {
    var state = this._reporterState;
    var prev = state.obj;
    state.obj = {};
    return prev;
  };
  Reporter.prototype.leaveObject = function leaveObject(prev) {
    var state = this._reporterState;
    var now = state.obj;
    state.obj = prev;
    return now;
  };
  Reporter.prototype.error = function error(msg) {
    var err;
    var state = this._reporterState;
    var inherited = msg instanceof ReporterError;
    if (inherited) {
      err = msg;
    } else {
      err = new ReporterError(state.path.map(function(elem) {
        return '[' + JSON.stringify(elem) + ']';
      }).join(''), msg.message || msg, msg.stack);
    }
    if (!state.options.partial)
      throw err;
    if (!inherited)
      state.errors.push(err);
    return err;
  };
  Reporter.prototype.wrapResult = function wrapResult(result) {
    var state = this._reporterState;
    if (!state.options.partial)
      return result;
    return {
      result: this.isError(result) ? null : result,
      errors: state.errors
    };
  };
  function ReporterError(path, msg) {
    this.path = path;
    this.rethrow(msg);
  }
  ;
  inherits(ReporterError, Error);
  ReporterError.prototype.rethrow = function rethrow(msg) {
    this.message = msg + ' at: ' + (this.path || '(shallow)');
    Error.captureStackTrace(this, ReporterError);
    return this;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("133", ["76", "134", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var inherits = require("76");
    var Reporter = require("134").Reporter;
    var Buffer = require("72").Buffer;
    function DecoderBuffer(base, options) {
      Reporter.call(this, options);
      if (!Buffer.isBuffer(base)) {
        this.error('Input not Buffer');
        return;
      }
      this.base = base;
      this.offset = 0;
      this.length = base.length;
    }
    inherits(DecoderBuffer, Reporter);
    exports.DecoderBuffer = DecoderBuffer;
    DecoderBuffer.prototype.save = function save() {
      return {
        offset: this.offset,
        reporter: Reporter.prototype.save.call(this)
      };
    };
    DecoderBuffer.prototype.restore = function restore(save) {
      var res = new DecoderBuffer(this.base);
      res.offset = save.offset;
      res.length = this.offset;
      this.offset = save.offset;
      Reporter.prototype.restore.call(this, save.reporter);
      return res;
    };
    DecoderBuffer.prototype.isEmpty = function isEmpty() {
      return this.offset === this.length;
    };
    DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
      if (this.offset + 1 <= this.length)
        return this.base.readUInt8(this.offset++, true);
      else
        return this.error(fail || 'DecoderBuffer overrun');
    };
    DecoderBuffer.prototype.skip = function skip(bytes, fail) {
      if (!(this.offset + bytes <= this.length))
        return this.error(fail || 'DecoderBuffer overrun');
      var res = new DecoderBuffer(this.base);
      res._reporterState = this._reporterState;
      res.offset = this.offset;
      res.length = this.offset + bytes;
      this.offset += bytes;
      return res;
    };
    DecoderBuffer.prototype.raw = function raw(save) {
      return this.base.slice(save ? save.offset : this.offset, this.length);
    };
    function EncoderBuffer(value, reporter) {
      if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function(item) {
          if (!(item instanceof EncoderBuffer))
            item = new EncoderBuffer(item, reporter);
          this.length += item.length;
          return item;
        }, this);
      } else if (typeof value === 'number') {
        if (!(0 <= value && value <= 0xff))
          return reporter.error('non-byte EncoderBuffer value');
        this.value = value;
        this.length = 1;
      } else if (typeof value === 'string') {
        this.value = value;
        this.length = Buffer.byteLength(value);
      } else if (Buffer.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
      } else {
        return reporter.error('Unsupported type: ' + typeof value);
      }
    }
    exports.EncoderBuffer = EncoderBuffer;
    EncoderBuffer.prototype.join = function join(out, offset) {
      if (!out)
        out = new Buffer(this.length);
      if (!offset)
        offset = 0;
      if (this.length === 0)
        return out;
      if (Array.isArray(this.value)) {
        this.value.forEach(function(item) {
          item.join(out, offset);
          offset += item.length;
        });
      } else {
        if (typeof this.value === 'number')
          out[offset] = this.value;
        else if (typeof this.value === 'string')
          out.write(this.value, offset);
        else if (Buffer.isBuffer(this.value))
          this.value.copy(out, offset);
        offset += this.length;
      }
      return out;
    };
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("135", ["134", "fa"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var Reporter = require("134").Reporter;
  var EncoderBuffer = require("134").EncoderBuffer;
  var assert = require("fa");
  var tags = ['seq', 'seqof', 'set', 'setof', 'octstr', 'bitstr', 'objid', 'bool', 'gentime', 'utctime', 'null_', 'enum', 'int', 'ia5str', 'utf8str'];
  var methods = ['key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice', 'any'].concat(tags);
  var overrided = ['_peekTag', '_decodeTag', '_use', '_decodeStr', '_decodeObjid', '_decodeTime', '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList', '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime', '_encodeNull', '_encodeInt', '_encodeBool'];
  function Node(enc, parent) {
    var state = {};
    this._baseState = state;
    state.enc = enc;
    state.parent = parent || null;
    state.children = null;
    state.tag = null;
    state.args = null;
    state.reverseArgs = null;
    state.choice = null;
    state.optional = false;
    state.any = false;
    state.obj = false;
    state.use = null;
    state.useDecoder = null;
    state.key = null;
    state['default'] = null;
    state.explicit = null;
    state.implicit = null;
    if (!state.parent) {
      state.children = [];
      this._wrap();
    }
  }
  module.exports = Node;
  var stateProps = ['enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice', 'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit', 'implicit'];
  Node.prototype.clone = function clone() {
    var state = this._baseState;
    var cstate = {};
    stateProps.forEach(function(prop) {
      cstate[prop] = state[prop];
    });
    var res = new this.constructor(cstate.parent);
    res._baseState = cstate;
    return res;
  };
  Node.prototype._wrap = function wrap() {
    var state = this._baseState;
    methods.forEach(function(method) {
      this[method] = function _wrappedMethod() {
        var clone = new this.constructor(this);
        state.children.push(clone);
        return clone[method].apply(clone, arguments);
      };
    }, this);
  };
  Node.prototype._init = function init(body) {
    var state = this._baseState;
    assert(state.parent === null);
    body.call(this);
    state.children = state.children.filter(function(child) {
      return child._baseState.parent === this;
    }, this);
    assert.equal(state.children.length, 1, 'Root node can have only one child');
  };
  Node.prototype._useArgs = function useArgs(args) {
    var state = this._baseState;
    var children = args.filter(function(arg) {
      return arg instanceof this.constructor;
    }, this);
    args = args.filter(function(arg) {
      return !(arg instanceof this.constructor);
    }, this);
    if (children.length !== 0) {
      assert(state.children === null);
      state.children = children;
      children.forEach(function(child) {
        child._baseState.parent = this;
      }, this);
    }
    if (args.length !== 0) {
      assert(state.args === null);
      state.args = args;
      state.reverseArgs = args.map(function(arg) {
        if (typeof arg !== 'object' || arg.constructor !== Object)
          return arg;
        var res = {};
        Object.keys(arg).forEach(function(key) {
          if (key == (key | 0))
            key |= 0;
          var value = arg[key];
          res[value] = key;
        });
        return res;
      });
    }
  };
  overrided.forEach(function(method) {
    Node.prototype[method] = function _overrided() {
      var state = this._baseState;
      throw new Error(method + ' not implemented for encoding: ' + state.enc);
    };
  });
  tags.forEach(function(tag) {
    Node.prototype[tag] = function _tagMethod() {
      var state = this._baseState;
      var args = Array.prototype.slice.call(arguments);
      assert(state.tag === null);
      state.tag = tag;
      this._useArgs(args);
      return this;
    };
  });
  Node.prototype.use = function use(item) {
    var state = this._baseState;
    assert(state.use === null);
    state.use = item;
    return this;
  };
  Node.prototype.optional = function optional() {
    var state = this._baseState;
    state.optional = true;
    return this;
  };
  Node.prototype.def = function def(val) {
    var state = this._baseState;
    assert(state['default'] === null);
    state['default'] = val;
    state.optional = true;
    return this;
  };
  Node.prototype.explicit = function explicit(num) {
    var state = this._baseState;
    assert(state.explicit === null && state.implicit === null);
    state.explicit = num;
    return this;
  };
  Node.prototype.implicit = function implicit(num) {
    var state = this._baseState;
    assert(state.explicit === null && state.implicit === null);
    state.implicit = num;
    return this;
  };
  Node.prototype.obj = function obj() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);
    state.obj = true;
    if (args.length !== 0)
      this._useArgs(args);
    return this;
  };
  Node.prototype.key = function key(newKey) {
    var state = this._baseState;
    assert(state.key === null);
    state.key = newKey;
    return this;
  };
  Node.prototype.any = function any() {
    var state = this._baseState;
    state.any = true;
    return this;
  };
  Node.prototype.choice = function choice(obj) {
    var state = this._baseState;
    assert(state.choice === null);
    state.choice = obj;
    this._useArgs(Object.keys(obj).map(function(key) {
      return obj[key];
    }));
    return this;
  };
  Node.prototype._decode = function decode(input) {
    var state = this._baseState;
    if (state.parent === null)
      return input.wrapResult(state.children[0]._decode(input));
    var result = state['default'];
    var present = true;
    var prevKey;
    if (state.key !== null)
      prevKey = input.enterKey(state.key);
    if (state.optional) {
      var tag = null;
      if (state.explicit !== null)
        tag = state.explicit;
      else if (state.implicit !== null)
        tag = state.implicit;
      else if (state.tag !== null)
        tag = state.tag;
      if (tag === null && !state.any) {
        var save = input.save();
        try {
          if (state.choice === null)
            this._decodeGeneric(state.tag, input);
          else
            this._decodeChoice(input);
          present = true;
        } catch (e) {
          present = false;
        }
        input.restore(save);
      } else {
        present = this._peekTag(input, tag, state.any);
        if (input.isError(present))
          return present;
      }
    }
    var prevObj;
    if (state.obj && present)
      prevObj = input.enterObject();
    if (present) {
      if (state.explicit !== null) {
        var explicit = this._decodeTag(input, state.explicit);
        if (input.isError(explicit))
          return explicit;
        input = explicit;
      }
      if (state.use === null && state.choice === null) {
        if (state.any)
          var save = input.save();
        var body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);
        if (input.isError(body))
          return body;
        if (state.any)
          result = input.raw(save);
        else
          input = body;
      }
      if (state.any)
        result = result;
      else if (state.choice === null)
        result = this._decodeGeneric(state.tag, input);
      else
        result = this._decodeChoice(input);
      if (input.isError(result))
        return result;
      if (!state.any && state.choice === null && state.children !== null) {
        var fail = state.children.some(function decodeChildren(child) {
          child._decode(input);
        });
        if (fail)
          return err;
      }
    }
    if (state.obj && present)
      result = input.leaveObject(prevObj);
    if (state.key !== null && (result !== null || present === true))
      input.leaveKey(prevKey, state.key, result);
    return result;
  };
  Node.prototype._decodeGeneric = function decodeGeneric(tag, input) {
    var state = this._baseState;
    if (tag === 'seq' || tag === 'set')
      return null;
    if (tag === 'seqof' || tag === 'setof')
      return this._decodeList(input, tag, state.args[0]);
    else if (tag === 'octstr' || tag === 'bitstr')
      return this._decodeStr(input, tag);
    else if (tag === 'ia5str' || tag === 'utf8str')
      return this._decodeStr(input, tag);
    else if (tag === 'objid' && state.args)
      return this._decodeObjid(input, state.args[0], state.args[1]);
    else if (tag === 'objid')
      return this._decodeObjid(input, null, null);
    else if (tag === 'gentime' || tag === 'utctime')
      return this._decodeTime(input, tag);
    else if (tag === 'null_')
      return this._decodeNull(input);
    else if (tag === 'bool')
      return this._decodeBool(input);
    else if (tag === 'int' || tag === 'enum')
      return this._decodeInt(input, state.args && state.args[0]);
    else if (state.use !== null)
      return this._getUse(state.use, input._reporterState.obj)._decode(input);
    else
      return input.error('unknown tag: ' + tag);
    return null;
  };
  Node.prototype._getUse = function _getUse(entity, obj) {
    var state = this._baseState;
    state.useDecoder = this._use(entity, obj);
    assert(state.useDecoder._baseState.parent === null);
    state.useDecoder = state.useDecoder._baseState.children[0];
    if (state.implicit !== state.useDecoder._baseState.implicit) {
      state.useDecoder = state.useDecoder.clone();
      state.useDecoder._baseState.implicit = state.implicit;
    }
    return state.useDecoder;
  };
  Node.prototype._decodeChoice = function decodeChoice(input) {
    var state = this._baseState;
    var result = null;
    var match = false;
    Object.keys(state.choice).some(function(key) {
      var save = input.save();
      var node = state.choice[key];
      try {
        var value = node._decode(input);
        if (input.isError(value))
          return false;
        result = {
          type: key,
          value: value
        };
        match = true;
      } catch (e) {
        input.restore(save);
        return false;
      }
      return true;
    }, this);
    if (!match)
      return input.error('Choice not matched');
    return result;
  };
  Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
    return new EncoderBuffer(data, this.reporter);
  };
  Node.prototype._encode = function encode(data, reporter, parent) {
    var state = this._baseState;
    if (state['default'] !== null && state['default'] === data)
      return;
    var result = this._encodeValue(data, reporter, parent);
    if (result === undefined)
      return;
    if (this._skipDefault(result, reporter, parent))
      return;
    return result;
  };
  Node.prototype._encodeValue = function encode(data, reporter, parent) {
    var state = this._baseState;
    if (state.parent === null)
      return state.children[0]._encode(data, reporter || new Reporter());
    var result = null;
    var present = true;
    this.reporter = reporter;
    if (state.optional && data === undefined) {
      if (state['default'] !== null)
        data = state['default'];
      else
        return;
    }
    var prevKey;
    var content = null;
    var primitive = false;
    if (state.any) {
      result = this._createEncoderBuffer(data);
    } else if (state.choice) {
      result = this._encodeChoice(data, reporter);
    } else if (state.children) {
      content = state.children.map(function(child) {
        if (child._baseState.tag === 'null_')
          return child._encode(null, reporter, data);
        if (child._baseState.key === null)
          return reporter.error('Child should have a key');
        var prevKey = reporter.enterKey(child._baseState.key);
        if (typeof data !== 'object')
          return reporter.error('Child expected, but input is not object');
        var res = child._encode(data[child._baseState.key], reporter, data);
        reporter.leaveKey(prevKey);
        return res;
      }, this).filter(function(child) {
        return child;
      });
      content = this._createEncoderBuffer(content);
    } else {
      if (state.tag === 'seqof' || state.tag === 'setof') {
        if (!(state.args && state.args.length === 1))
          return reporter.error('Too many args for : ' + state.tag);
        if (!Array.isArray(data))
          return reporter.error('seqof/setof, but data is not Array');
        var child = this.clone();
        child._baseState.implicit = null;
        content = this._createEncoderBuffer(data.map(function(item) {
          var state = this._baseState;
          return this._getUse(state.args[0], data)._encode(item, reporter);
        }, child));
      } else if (state.use !== null) {
        result = this._getUse(state.use, parent)._encode(data, reporter);
      } else {
        content = this._encodePrimitive(state.tag, data);
        primitive = true;
      }
    }
    var result;
    if (!state.any && state.choice === null) {
      var tag = state.implicit !== null ? state.implicit : state.tag;
      var cls = state.implicit === null ? 'universal' : 'context';
      if (tag === null) {
        if (state.use === null)
          reporter.error('Tag could be ommited only for .use()');
      } else {
        if (state.use === null)
          result = this._encodeComposite(tag, primitive, cls, content);
      }
    }
    if (state.explicit !== null)
      result = this._encodeComposite(state.explicit, false, 'context', result);
    return result;
  };
  Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
    var state = this._baseState;
    var node = state.choice[data.type];
    if (!node) {
      assert(false, data.type + ' not found in ' + JSON.stringify(Object.keys(state.choice)));
    }
    return node._encode(data.value, reporter);
  };
  Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
    var state = this._baseState;
    if (tag === 'octstr' || tag === 'bitstr' || tag === 'ia5str')
      return this._encodeStr(data, tag);
    else if (tag === 'utf8str')
      return this._encodeStr(data, tag);
    else if (tag === 'objid' && state.args)
      return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
    else if (tag === 'objid')
      return this._encodeObjid(data, null, null);
    else if (tag === 'gentime' || tag === 'utctime')
      return this._encodeTime(data, tag);
    else if (tag === 'null_')
      return this._encodeNull();
    else if (tag === 'int' || tag === 'enum')
      return this._encodeInt(data, state.args && state.reverseArgs[0]);
    else if (tag === 'bool')
      return this._encodeBool(data);
    else
      throw new Error('Unsupported tag: ' + tag);
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("134", ["132", "133", "135"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var base = exports;
  base.Reporter = require("132").Reporter;
  base.DecoderBuffer = require("133").DecoderBuffer;
  base.EncoderBuffer = require("133").EncoderBuffer;
  base.Node = require("135");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("136", ["137"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var constants = require("137");
  exports.tagClass = {
    0: 'universal',
    1: 'application',
    2: 'context',
    3: 'private'
  };
  exports.tagClassByName = constants._reverse(exports.tagClass);
  exports.tag = {
    0x00: 'end',
    0x01: 'bool',
    0x02: 'int',
    0x03: 'bitstr',
    0x04: 'octstr',
    0x05: 'null_',
    0x06: 'objid',
    0x07: 'objDesc',
    0x08: 'external',
    0x09: 'real',
    0x0a: 'enum',
    0x0b: 'embed',
    0x0c: 'utf8str',
    0x0d: 'relativeOid',
    0x10: 'seq',
    0x11: 'set',
    0x12: 'numstr',
    0x13: 'printstr',
    0x14: 't61str',
    0x15: 'videostr',
    0x16: 'ia5str',
    0x17: 'utctime',
    0x18: 'gentime',
    0x19: 'graphstr',
    0x1a: 'iso646str',
    0x1b: 'genstr',
    0x1c: 'unistr',
    0x1d: 'charstr',
    0x1e: 'bmpstr'
  };
  exports.tagByName = constants._reverse(exports.tag);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("137", ["136"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var constants = exports;
  constants._reverse = function reverse(map) {
    var res = {};
    Object.keys(map).forEach(function(key) {
      if ((key | 0) == key)
        key = key | 0;
      var value = map[key];
      res[value] = key;
    });
    return res;
  };
  constants.der = require("136");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("138", ["76", "131"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var inherits = require("76");
  var asn1 = require("131");
  var base = asn1.base;
  var bignum = asn1.bignum;
  var der = asn1.constants.der;
  function DERDecoder(entity) {
    this.enc = 'der';
    this.name = entity.name;
    this.entity = entity;
    this.tree = new DERNode();
    this.tree._init(entity.body);
  }
  ;
  module.exports = DERDecoder;
  DERDecoder.prototype.decode = function decode(data, options) {
    if (!(data instanceof base.DecoderBuffer))
      data = new base.DecoderBuffer(data, options);
    return this.tree._decode(data, options);
  };
  function DERNode(parent) {
    base.Node.call(this, 'der', parent);
  }
  inherits(DERNode, base.Node);
  DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
    if (buffer.isEmpty())
      return false;
    var state = buffer.save();
    var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
    if (buffer.isError(decodedTag))
      return decodedTag;
    buffer.restore(state);
    return decodedTag.tag === tag || decodedTag.tagStr === tag || any;
  };
  DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
    var decodedTag = derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
    if (buffer.isError(decodedTag))
      return decodedTag;
    var len = derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"');
    if (buffer.isError(len))
      return len;
    if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + 'of' !== tag) {
      return buffer.error('Failed to match tag: "' + tag + '"');
    }
    if (decodedTag.primitive || len !== null)
      return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    var state = buffer.save();
    var res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');
    if (buffer.isError(res))
      return res;
    len = buffer.offset - state.offset;
    buffer.restore(state);
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
  };
  DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
    while (true) {
      var tag = derDecodeTag(buffer, fail);
      if (buffer.isError(tag))
        return tag;
      var len = derDecodeLen(buffer, tag.primitive, fail);
      if (buffer.isError(len))
        return len;
      var res;
      if (tag.primitive || len !== null)
        res = buffer.skip(len);
      else
        res = this._skipUntilEnd(buffer, fail);
      if (buffer.isError(res))
        return res;
      if (tag.tagStr === 'end')
        break;
    }
  };
  DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder) {
    var result = [];
    while (!buffer.isEmpty()) {
      var possibleEnd = this._peekTag(buffer, 'end');
      if (buffer.isError(possibleEnd))
        return possibleEnd;
      var res = decoder.decode(buffer, 'der');
      if (buffer.isError(res) && possibleEnd)
        break;
      result.push(res);
    }
    return result;
  };
  DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
    if (tag === 'octstr') {
      return buffer.raw();
    } else if (tag === 'bitstr') {
      var unused = buffer.readUInt8();
      if (buffer.isError(unused))
        return unused;
      return {
        unused: unused,
        data: buffer.raw()
      };
    } else if (tag === 'ia5str' || tag === 'utf8str') {
      return buffer.raw().toString();
    } else {
      return this.error('Decoding of string type: ' + tag + ' unsupported');
    }
  };
  DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
    var identifiers = [];
    var ident = 0;
    while (!buffer.isEmpty()) {
      var subident = buffer.readUInt8();
      ident <<= 7;
      ident |= subident & 0x7f;
      if ((subident & 0x80) === 0) {
        identifiers.push(ident);
        ident = 0;
      }
    }
    if (subident & 0x80)
      identifiers.push(ident);
    var first = (identifiers[0] / 40) | 0;
    var second = identifiers[0] % 40;
    if (relative)
      result = identifiers;
    else
      result = [first, second].concat(identifiers.slice(1));
    if (values)
      result = values[result.join(' ')];
    return result;
  };
  DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
    var str = buffer.raw().toString();
    if (tag === 'gentime') {
      var year = str.slice(0, 4) | 0;
      var mon = str.slice(4, 6) | 0;
      var day = str.slice(6, 8) | 0;
      var hour = str.slice(8, 10) | 0;
      var min = str.slice(10, 12) | 0;
      var sec = str.slice(12, 14) | 0;
    } else if (tag === 'utctime') {
      var year = str.slice(0, 2) | 0;
      var mon = str.slice(2, 4) | 0;
      var day = str.slice(4, 6) | 0;
      var hour = str.slice(6, 8) | 0;
      var min = str.slice(8, 10) | 0;
      var sec = str.slice(10, 12) | 0;
      if (year < 70)
        year = 2000 + year;
      else
        year = 1900 + year;
    } else {
      return this.error('Decoding ' + tag + ' time is not supported yet');
    }
    return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
  };
  DERNode.prototype._decodeNull = function decodeNull(buffer) {
    return null;
  };
  DERNode.prototype._decodeBool = function decodeBool(buffer) {
    var res = buffer.readUInt8();
    if (buffer.isError(res))
      return res;
    else
      return res !== 0;
  };
  DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
    var raw = buffer.raw();
    var res = new bignum(raw);
    if (values)
      res = values[res.toString(10)] || res;
    return res;
  };
  DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === 'function')
      entity = entity(obj);
    return entity._getDecoder('der').tree;
  };
  function derDecodeTag(buf, fail) {
    var tag = buf.readUInt8(fail);
    if (buf.isError(tag))
      return tag;
    var cls = der.tagClass[tag >> 6];
    var primitive = (tag & 0x20) === 0;
    if ((tag & 0x1f) === 0x1f) {
      var oct = tag;
      tag = 0;
      while ((oct & 0x80) === 0x80) {
        oct = buf.readUInt8(fail);
        if (buf.isError(oct))
          return oct;
        tag <<= 7;
        tag |= oct & 0x7f;
      }
    } else {
      tag &= 0x1f;
    }
    var tagStr = der.tag[tag];
    return {
      cls: cls,
      primitive: primitive,
      tag: tag,
      tagStr: tagStr
    };
  }
  function derDecodeLen(buf, primitive, fail) {
    var len = buf.readUInt8(fail);
    if (buf.isError(len))
      return len;
    if (!primitive && len === 0x80)
      return null;
    if ((len & 0x80) === 0) {
      return len;
    }
    var num = len & 0x7f;
    if (num >= 4)
      return buf.error('length octect is too long');
    len = 0;
    for (var i = 0; i < num; i++) {
      len <<= 8;
      var j = buf.readUInt8(fail);
      if (buf.isError(j))
        return j;
      len |= j;
    }
    return len;
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("139", ["76", "72", "131", "138"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var inherits = require("76");
    var Buffer = require("72").Buffer;
    var asn1 = require("131");
    var DERDecoder = require("138");
    function PEMDecoder(entity) {
      DERDecoder.call(this, entity);
      this.enc = 'pem';
    }
    ;
    inherits(PEMDecoder, DERDecoder);
    module.exports = PEMDecoder;
    PEMDecoder.prototype.decode = function decode(data, options) {
      var lines = data.toString().split(/[\r\n]+/g);
      var label = options.label.toUpperCase();
      var re = /^-----(BEGIN|END) ([^-]+)-----$/;
      var start = -1;
      var end = -1;
      for (var i = 0; i < lines.length; i++) {
        var match = lines[i].match(re);
        if (match === null)
          continue;
        if (match[2] !== label)
          continue;
        if (start === -1) {
          if (match[1] !== 'BEGIN')
            break;
          start = i;
        } else {
          if (match[1] !== 'END')
            break;
          end = i;
          break;
        }
      }
      if (start === -1 || end === -1)
        throw new Error('PEM section not found for: ' + label);
      var base64 = lines.slice(start + 1, end).join('');
      base64.replace(/[^a-z0-9\+\/=]+/gi, '');
      var input = new Buffer(base64, 'base64');
      return DERDecoder.prototype.decode.call(this, input, options);
    };
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("13a", ["138", "139"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var decoders = exports;
  decoders.der = require("138");
  decoders.pem = require("139");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("13b", ["76", "72", "131"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var inherits = require("76");
    var Buffer = require("72").Buffer;
    var asn1 = require("131");
    var base = asn1.base;
    var bignum = asn1.bignum;
    var der = asn1.constants.der;
    function DEREncoder(entity) {
      this.enc = 'der';
      this.name = entity.name;
      this.entity = entity;
      this.tree = new DERNode();
      this.tree._init(entity.body);
    }
    ;
    module.exports = DEREncoder;
    DEREncoder.prototype.encode = function encode(data, reporter) {
      return this.tree._encode(data, reporter).join();
    };
    function DERNode(parent) {
      base.Node.call(this, 'der', parent);
    }
    inherits(DERNode, base.Node);
    DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
      var encodedTag = encodeTag(tag, primitive, cls, this.reporter);
      if (content.length < 0x80) {
        var header = new Buffer(2);
        header[0] = encodedTag;
        header[1] = content.length;
        return this._createEncoderBuffer([header, content]);
      }
      var lenOctets = 1;
      for (var i = content.length; i >= 0x100; i >>= 8)
        lenOctets++;
      var header = new Buffer(1 + 1 + lenOctets);
      header[0] = encodedTag;
      header[1] = 0x80 | lenOctets;
      for (var i = 1 + lenOctets,
          j = content.length; j > 0; i--, j >>= 8)
        header[i] = j & 0xff;
      return this._createEncoderBuffer([header, content]);
    };
    DERNode.prototype._encodeStr = function encodeStr(str, tag) {
      if (tag === 'octstr')
        return this._createEncoderBuffer(str);
      else if (tag === 'bitstr')
        return this._createEncoderBuffer([str.unused | 0, str.data]);
      else if (tag === 'ia5str' || tag === 'utf8str')
        return this._createEncoderBuffer(str);
      return this.reporter.error('Encoding of string type: ' + tag + ' unsupported');
    };
    DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
      if (typeof id === 'string') {
        if (!values)
          return this.reporter.error('string objid given, but no values map found');
        if (!values.hasOwnProperty(id))
          return this.reporter.error('objid not found in values map');
        id = values[id].split(/[\s\.]+/g);
        for (var i = 0; i < id.length; i++)
          id[i] |= 0;
      } else if (Array.isArray(id)) {
        id = id.slice();
        for (var i = 0; i < id.length; i++)
          id[i] |= 0;
      }
      if (!Array.isArray(id)) {
        return this.reporter.error('objid() should be either array or string, ' + 'got: ' + JSON.stringify(id));
      }
      if (!relative) {
        if (id[1] >= 40)
          return this.reporter.error('Second objid identifier OOB');
        id.splice(0, 2, id[0] * 40 + id[1]);
      }
      var size = 0;
      for (var i = 0; i < id.length; i++) {
        var ident = id[i];
        for (size++; ident >= 0x80; ident >>= 7)
          size++;
      }
      var objid = new Buffer(size);
      var offset = objid.length - 1;
      for (var i = id.length - 1; i >= 0; i--) {
        var ident = id[i];
        objid[offset--] = ident & 0x7f;
        while ((ident >>= 7) > 0)
          objid[offset--] = 0x80 | (ident & 0x7f);
      }
      return this._createEncoderBuffer(objid);
    };
    function two(num) {
      if (num < 10)
        return '0' + num;
      else
        return num;
    }
    DERNode.prototype._encodeTime = function encodeTime(time, tag) {
      var str;
      var date = new Date(time);
      if (tag === 'gentime') {
        str = [two(date.getFullYear()), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), 'Z'].join('');
      } else if (tag === 'utctime') {
        str = [two(date.getFullYear() % 100), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), 'Z'].join('');
      } else {
        this.reporter.error('Encoding ' + tag + ' time is not supported yet');
      }
      return this._encodeStr(str, 'octstr');
    };
    DERNode.prototype._encodeNull = function encodeNull() {
      return this._createEncoderBuffer('');
    };
    DERNode.prototype._encodeInt = function encodeInt(num, values) {
      if (typeof num === 'string') {
        if (!values)
          return this.reporter.error('String int or enum given, but no values map');
        if (!values.hasOwnProperty(num)) {
          return this.reporter.error('Values map doesn\'t contain: ' + JSON.stringify(num));
        }
        num = values[num];
      }
      if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
        var numArray = num.toArray();
        if (num.sign === false && numArray[0] & 0x80) {
          numArray.unshift(0);
        }
        num = new Buffer(numArray);
      }
      if (Buffer.isBuffer(num)) {
        var size = num.length;
        if (num.length === 0)
          size++;
        var out = new Buffer(size);
        num.copy(out);
        if (num.length === 0)
          out[0] = 0;
        return this._createEncoderBuffer(out);
      }
      if (num < 0x80)
        return this._createEncoderBuffer(num);
      if (num < 0x100)
        return this._createEncoderBuffer([0, num]);
      var size = 1;
      for (var i = num; i >= 0x100; i >>= 8)
        size++;
      var out = new Array(size);
      for (var i = out.length - 1; i >= 0; i--) {
        out[i] = num & 0xff;
        num >>= 8;
      }
      if (out[0] & 0x80) {
        out.unshift(0);
      }
      return this._createEncoderBuffer(new Buffer(out));
    };
    DERNode.prototype._encodeBool = function encodeBool(value) {
      return this._createEncoderBuffer(value ? 0xff : 0);
    };
    DERNode.prototype._use = function use(entity, obj) {
      if (typeof entity === 'function')
        entity = entity(obj);
      return entity._getEncoder('der').tree;
    };
    DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
      var state = this._baseState;
      var i;
      if (state['default'] === null)
        return false;
      var data = dataBuffer.join();
      if (state.defaultBuffer === undefined)
        state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();
      if (data.length !== state.defaultBuffer.length)
        return false;
      for (i = 0; i < data.length; i++)
        if (data[i] !== state.defaultBuffer[i])
          return false;
      return true;
    };
    function encodeTag(tag, primitive, cls, reporter) {
      var res;
      if (tag === 'seqof')
        tag = 'seq';
      else if (tag === 'setof')
        tag = 'set';
      if (der.tagByName.hasOwnProperty(tag))
        res = der.tagByName[tag];
      else if (typeof tag === 'number' && (tag | 0) === tag)
        res = tag;
      else
        return reporter.error('Unknown tag: ' + tag);
      if (res >= 0x1f)
        return reporter.error('Multi-octet tag encoding unsupported');
      if (!primitive)
        res |= 0x20;
      res |= (der.tagClassByName[cls || 'universal'] << 6);
      return res;
    }
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("13c", ["76", "72", "131", "13b"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var inherits = require("76");
    var Buffer = require("72").Buffer;
    var asn1 = require("131");
    var DEREncoder = require("13b");
    function PEMEncoder(entity) {
      DEREncoder.call(this, entity);
      this.enc = 'pem';
    }
    ;
    inherits(PEMEncoder, DEREncoder);
    module.exports = PEMEncoder;
    PEMEncoder.prototype.encode = function encode(data, options) {
      var buf = DEREncoder.prototype.encode.call(this, data);
      var p = buf.toString('base64');
      var out = ['-----BEGIN ' + options.label + '-----'];
      for (var i = 0; i < p.length; i += 64)
        out.push(p.slice(i, i + 64));
      out.push('-----END ' + options.label + '-----');
      return out.join('\n');
    };
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("13d", ["13b", "13c"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var encoders = exports;
  encoders.der = require("13b");
  encoders.pem = require("13c");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("131", ["107", "130", "134", "137", "13a", "13d"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var asn1 = exports;
  asn1.bignum = require("107");
  asn1.define = require("130").define;
  asn1.base = require("134");
  asn1.constants = require("137");
  asn1.decoders = require("13a");
  asn1.encoders = require("13d");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("13e", ["131"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("131");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("13f", ["13e"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var asn1 = require("13e");
  var RSAPrivateKey = asn1.define('RSAPrivateKey', function() {
    this.seq().obj(this.key('version').int(), this.key('modulus').int(), this.key('publicExponent').int(), this.key('privateExponent').int(), this.key('prime1').int(), this.key('prime2').int(), this.key('exponent1').int(), this.key('exponent2').int(), this.key('coefficient').int());
  });
  exports.RSAPrivateKey = RSAPrivateKey;
  var RSAPublicKey = asn1.define('RSAPublicKey', function() {
    this.seq().obj(this.key('modulus').int(), this.key('publicExponent').int());
  });
  exports.RSAPublicKey = RSAPublicKey;
  var PublicKey = asn1.define('SubjectPublicKeyInfo', function() {
    this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
  });
  exports.PublicKey = PublicKey;
  var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function() {
    this.seq().obj(this.key('algorithm').objid(), this.key('none').null_().optional(), this.key('curve').objid().optional(), this.key('params').seq().obj(this.key('p').int(), this.key('q').int(), this.key('g').int()).optional());
  });
  var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function() {
    this.seq().obj(this.key('version').int(), this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPrivateKey').octstr());
  });
  exports.PrivateKey = PrivateKeyInfo;
  var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function() {
    this.seq().obj(this.key('algorithm').seq().obj(this.key('id').objid(), this.key('decrypt').seq().obj(this.key('kde').seq().obj(this.key('id').objid(), this.key('kdeparams').seq().obj(this.key('salt').octstr(), this.key('iters').int())), this.key('cipher').seq().obj(this.key('algo').objid(), this.key('iv').octstr()))), this.key('subjectPrivateKey').octstr());
  });
  exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;
  var DSAPrivateKey = asn1.define('DSAPrivateKey', function() {
    this.seq().obj(this.key('version').int(), this.key('p').int(), this.key('q').int(), this.key('g').int(), this.key('pub_key').int(), this.key('priv_key').int());
  });
  exports.DSAPrivateKey = DSAPrivateKey;
  exports.DSAparam = asn1.define('DSAparam', function() {
    this.int();
  });
  var ECPrivateKey = asn1.define('ECPrivateKey', function() {
    this.seq().obj(this.key('version').int(), this.key('privateKey').octstr(), this.key('parameters').optional().explicit(0).use(ECParameters), this.key('publicKey').optional().explicit(1).bitstr());
  });
  exports.ECPrivateKey = ECPrivateKey;
  var ECParameters = asn1.define('ECParameters', function() {
    this.choice({namedCurve: this.objid()});
  });
  exports.signature = asn1.define('signature', function() {
    this.seq().obj(this.key('r').int(), this.key('s').int());
  });
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("140", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "2.16.840.1.101.3.4.1.1": "aes-128-ecb",
    "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
    "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
    "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
    "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
    "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
    "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
    "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
    "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
    "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
    "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
    "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("141", ["f7"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("f7");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("142", ["e6", "141", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var findProc = /Proc-Type: 4,ENCRYPTED\r?\nDEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\r?\n\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n/m;
    var startRegex = /^-----BEGIN (.*) KEY-----\r?\n/m;
    var fullRegex = /^-----BEGIN (.*) KEY-----\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n-----END \1 KEY-----$/m;
    var evp = require("e6");
    var ciphers = require("141");
    module.exports = function(okey, password) {
      var key = okey.toString();
      var match = key.match(findProc);
      var decrypted;
      if (!match) {
        var match2 = key.match(fullRegex);
        decrypted = new Buffer(match2[2].replace(/\r?\n/g, ''), 'base64');
      } else {
        var suite = 'aes' + match[1];
        var iv = new Buffer(match[2], 'hex');
        var cipherText = new Buffer(match[3].replace(/\r?\n/g, ''), 'base64');
        var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
        var out = [];
        var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
        out.push(cipher.update(cipherText));
        out.push(cipher.final());
        decrypted = Buffer.concat(out);
      }
      var tag = key.match(startRegex)[1] + ' KEY';
      return {
        tag: tag,
        data: decrypted
      };
    };
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("143", ["13f", "140", "142", "141", "e4", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var asn1 = require("13f");
    var aesid = require("140");
    var fixProc = require("142");
    var ciphers = require("141");
    var compat = require("e4");
    module.exports = parseKeys;
    function parseKeys(buffer) {
      var password;
      if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
        password = buffer.passphrase;
        buffer = buffer.key;
      }
      if (typeof buffer === 'string') {
        buffer = new Buffer(buffer);
      }
      var stripped = fixProc(buffer, password);
      var type = stripped.tag;
      var data = stripped.data;
      var subtype,
          ndata;
      switch (type) {
        case 'PUBLIC KEY':
          ndata = asn1.PublicKey.decode(data, 'der');
          subtype = ndata.algorithm.algorithm.join('.');
          switch (subtype) {
            case '1.2.840.113549.1.1.1':
              return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');
            case '1.2.840.10045.2.1':
              ndata.subjectPrivateKey = ndata.subjectPublicKey;
              return {
                type: 'ec',
                data: ndata
              };
            case '1.2.840.10040.4.1':
              ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
              return {
                type: 'dsa',
                data: ndata.algorithm.params
              };
            default:
              throw new Error('unknown key id ' + subtype);
          }
          throw new Error('unknown key type ' + type);
        case 'ENCRYPTED PRIVATE KEY':
          data = asn1.EncryptedPrivateKey.decode(data, 'der');
          data = decrypt(data, password);
        case 'PRIVATE KEY':
          ndata = asn1.PrivateKey.decode(data, 'der');
          subtype = ndata.algorithm.algorithm.join('.');
          switch (subtype) {
            case '1.2.840.113549.1.1.1':
              return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');
            case '1.2.840.10045.2.1':
              return {
                curve: ndata.algorithm.curve,
                privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
              };
            case '1.2.840.10040.4.1':
              ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');
              return {
                type: 'dsa',
                params: ndata.algorithm.params
              };
            default:
              throw new Error('unknown key id ' + subtype);
          }
          throw new Error('unknown key type ' + type);
        case 'RSA PUBLIC KEY':
          return asn1.RSAPublicKey.decode(data, 'der');
        case 'RSA PRIVATE KEY':
          return asn1.RSAPrivateKey.decode(data, 'der');
        case 'DSA PRIVATE KEY':
          return {
            type: 'dsa',
            params: asn1.DSAPrivateKey.decode(data, 'der')
          };
        case 'EC PRIVATE KEY':
          data = asn1.ECPrivateKey.decode(data, 'der');
          return {
            curve: data.parameters.value,
            privateKey: data.privateKey
          };
        default:
          throw new Error('unknown key type ' + type);
      }
    }
    parseKeys.signature = asn1.signature;
    function decrypt(data, password) {
      var salt = data.algorithm.decrypt.kde.kdeparams.salt;
      var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
      var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];
      var iv = data.algorithm.decrypt.cipher.iv;
      var cipherText = data.subjectPrivateKey;
      var keylen = parseInt(algo.split('-')[1], 10) / 8;
      var key = compat.pbkdf2Sync(password, salt, iters, keylen);
      var cipher = ciphers.createDecipheriv(algo, key, iv);
      var out = [];
      out.push(cipher.update(cipherText));
      out.push(cipher.final());
      return Buffer.concat(out);
    }
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("144", ["143"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("143");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("145", ["e1", "112", "113", "129", "144", "107", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var createHmac = require("e1");
    var crt = require("112");
    var curves = require("113");
    var elliptic = require("129");
    var parseKeys = require("144");
    var BN = require("107");
    var EC = elliptic.ec;
    function sign(hash, key, hashType, signType) {
      var priv = parseKeys(key);
      if (priv.curve) {
        if (signType !== 'ecdsa')
          throw new Error('wrong private key type');
        return ecSign(hash, priv);
      } else if (priv.type === 'dsa') {
        if (signType !== 'dsa') {
          throw new Error('wrong private key type');
        }
        return dsaSign(hash, priv, hashType);
      } else {
        if (signType !== 'rsa')
          throw new Error('wrong private key type');
      }
      var len = priv.modulus.byteLength();
      var pad = [0, 1];
      while (hash.length + pad.length + 1 < len) {
        pad.push(0xff);
      }
      pad.push(0x00);
      var i = -1;
      while (++i < hash.length) {
        pad.push(hash[i]);
      }
      var out = crt(pad, priv);
      return out;
    }
    function ecSign(hash, priv) {
      var curveId = curves[priv.curve.join('.')];
      if (!curveId)
        throw new Error('unknown curve ' + priv.curve.join('.'));
      var curve = new EC(curveId);
      var key = curve.genKeyPair();
      key._importPrivate(priv.privateKey);
      var out = key.sign(hash);
      return new Buffer(out.toDER());
    }
    function dsaSign(hash, priv, algo) {
      var x = priv.params.priv_key;
      var p = priv.params.p;
      var q = priv.params.q;
      var g = priv.params.g;
      var r = new BN(0);
      var k;
      var H = bits2int(hash, q).mod(q);
      var s = false;
      var kv = getKey(x, q, hash, algo);
      while (s === false) {
        k = makeKey(q, kv, algo);
        r = makeR(g, k, p, q);
        s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
        if (!s.cmpn(0)) {
          s = false;
          r = new BN(0);
        }
      }
      return toDER(r, s);
    }
    function toDER(r, s) {
      r = r.toArray();
      s = s.toArray();
      if (r[0] & 0x80) {
        r = [0].concat(r);
      }
      if (s[0] & 0x80) {
        s = [0].concat(s);
      }
      var total = r.length + s.length + 4;
      var res = [0x30, total, 0x02, r.length];
      res = res.concat(r, [0x02, s.length], s);
      return new Buffer(res);
    }
    function getKey(x, q, hash, algo) {
      x = new Buffer(x.toArray());
      if (x.length < q.byteLength()) {
        var zeros = new Buffer(q.byteLength() - x.length);
        zeros.fill(0);
        x = Buffer.concat([zeros, x]);
      }
      var hlen = hash.length;
      var hbits = bits2octets(hash, q);
      var v = new Buffer(hlen);
      v.fill(1);
      var k = new Buffer(hlen);
      k.fill(0);
      k = createHmac(algo, k).update(v).update(new Buffer([0])).update(x).update(hbits).digest();
      v = createHmac(algo, k).update(v).digest();
      k = createHmac(algo, k).update(v).update(new Buffer([1])).update(x).update(hbits).digest();
      v = createHmac(algo, k).update(v).digest();
      return {
        k: k,
        v: v
      };
    }
    function bits2int(obits, q) {
      var bits = new BN(obits);
      var shift = (obits.length << 3) - q.bitLength();
      if (shift > 0) {
        bits.ishrn(shift);
      }
      return bits;
    }
    function bits2octets(bits, q) {
      bits = bits2int(bits, q);
      bits = bits.mod(q);
      var out = new Buffer(bits.toArray());
      if (out.length < q.byteLength()) {
        var zeros = new Buffer(q.byteLength() - out.length);
        zeros.fill(0);
        out = Buffer.concat([zeros, out]);
      }
      return out;
    }
    function makeKey(q, kv, algo) {
      var t,
          k;
      do {
        t = new Buffer('');
        while (t.length * 8 < q.bitLength()) {
          kv.v = createHmac(algo, kv.k).update(kv.v).digest();
          t = Buffer.concat([t, kv.v]);
        }
        k = bits2int(t, q);
        kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([0])).digest();
        kv.v = createHmac(algo, kv.k).update(kv.v).digest();
      } while (k.cmp(q) !== -1);
      return k;
    }
    function makeR(g, k, p, q) {
      return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);
    }
    module.exports = sign;
    module.exports.getKey = getKey;
    module.exports.makeKey = makeKey;
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("146", ["113", "129", "144", "107", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var curves = require("113");
    var elliptic = require("129");
    var parseKeys = require("144");
    var BN = require("107");
    var EC = elliptic.ec;
    function verify(sig, hash, key, signType) {
      var pub = parseKeys(key);
      if (pub.type === 'ec') {
        if (signType !== 'ecdsa') {
          throw new Error('wrong public key type');
        }
        return ecVerify(sig, hash, pub);
      } else if (pub.type === 'dsa') {
        if (signType !== 'dsa') {
          throw new Error('wrong public key type');
        }
        return dsaVerify(sig, hash, pub);
      } else {
        if (signType !== 'rsa') {
          throw new Error('wrong public key type');
        }
      }
      var len = pub.modulus.byteLength();
      var pad = [1];
      var padNum = 0;
      while (hash.length + pad.length + 2 < len) {
        pad.push(0xff);
        padNum++;
      }
      pad.push(0x00);
      var i = -1;
      while (++i < hash.length) {
        pad.push(hash[i]);
      }
      pad = new Buffer(pad);
      var red = BN.mont(pub.modulus);
      sig = new BN(sig).toRed(red);
      sig = sig.redPow(new BN(pub.publicExponent));
      sig = new Buffer(sig.fromRed().toArray());
      var out = 0;
      if (padNum < 8) {
        out = 1;
      }
      len = Math.min(sig.length, pad.length);
      if (sig.length !== pad.length) {
        out = 1;
      }
      i = -1;
      while (++i < len) {
        out |= (sig[i] ^ pad[i]);
      }
      return out === 0;
    }
    function ecVerify(sig, hash, pub) {
      var curveId = curves[pub.data.algorithm.curve.join('.')];
      if (!curveId)
        throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'));
      var curve = new EC(curveId);
      var pubkey = pub.data.subjectPrivateKey.data;
      return curve.verify(hash, sig, pubkey);
    }
    function dsaVerify(sig, hash, pub) {
      var p = pub.data.p;
      var q = pub.data.q;
      var g = pub.data.g;
      var y = pub.data.pub_key;
      var unpacked = parseKeys.signature.decode(sig, 'der');
      var s = unpacked.s;
      var r = unpacked.r;
      checkValue(s, q);
      checkValue(r, q);
      var montp = BN.mont(p);
      var w = s.invm(q);
      var v = g.toRed(montp).redPow(new BN(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);
      return !v.cmp(r);
    }
    function checkValue(b, q) {
      if (b.cmpn(0) <= 0) {
        throw new Error('invalid sig');
      }
      if (b.cmp(q) >= q) {
        throw new Error('invalid sig');
      }
    }
    module.exports = verify;
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("147", ["e2", "df", "76", "145", "8a", "146", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var _algos = require("e2");
    var createHash = require("df");
    var inherits = require("76");
    var sign = require("145");
    var stream = require("8a");
    var verify = require("146");
    var algos = {};
    Object.keys(_algos).forEach(function(key) {
      algos[key] = algos[key.toLowerCase()] = _algos[key];
    });
    function Sign(algorithm) {
      stream.Writable.call(this);
      var data = algos[algorithm];
      if (!data) {
        throw new Error('Unknown message digest');
      }
      this._hashType = data.hash;
      this._hash = createHash(data.hash);
      this._tag = data.id;
      this._signType = data.sign;
    }
    inherits(Sign, stream.Writable);
    Sign.prototype._write = function _write(data, _, done) {
      this._hash.update(data);
      done();
    };
    Sign.prototype.update = function update(data, enc) {
      if (typeof data === 'string') {
        data = new Buffer(data, enc);
      }
      this._hash.update(data);
      return this;
    };
    Sign.prototype.sign = function signMethod(key, enc) {
      this.end();
      var hash = this._hash.digest();
      var sig = sign(Buffer.concat([this._tag, hash]), key, this._hashType, this._signType);
      return enc ? sig.toString(enc) : sig;
    };
    function Verify(algorithm) {
      stream.Writable.call(this);
      var data = algos[algorithm];
      if (!data) {
        throw new Error('Unknown message digest');
      }
      this._hash = createHash(data.hash);
      this._tag = data.id;
      this._signType = data.sign;
    }
    inherits(Verify, stream.Writable);
    Verify.prototype._write = function _write(data, _, done) {
      this._hash.update(data);
      done();
    };
    Verify.prototype.update = function update(data, enc) {
      if (typeof data === 'string') {
        data = new Buffer(data, enc);
      }
      this._hash.update(data);
      return this;
    };
    Verify.prototype.verify = function verifyMethod(key, sig, enc) {
      if (typeof sig === 'string') {
        sig = new Buffer(sig, enc);
      }
      this.end();
      var hash = this._hash.digest();
      return verify(sig, Buffer.concat([this._tag, hash]), key, this._signType);
    };
    function createSign(algorithm) {
      return new Sign(algorithm);
    }
    function createVerify(algorithm) {
      return new Verify(algorithm);
    }
    module.exports = {
      Sign: createSign,
      Verify: createVerify,
      createSign: createSign,
      createVerify: createVerify
    };
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("148", ["147"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("147");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("149", ["129", "107", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var elliptic = require("129");
    var BN = require("107");
    module.exports = function createECDH(curve) {
      return new ECDH(curve);
    };
    var aliases = {
      secp256k1: {
        name: 'secp256k1',
        byteLength: 32
      },
      secp224r1: {
        name: 'p224',
        byteLength: 28
      },
      prime256v1: {
        name: 'p256',
        byteLength: 32
      },
      prime192v1: {
        name: 'p192',
        byteLength: 24
      },
      ed25519: {
        name: 'ed25519',
        byteLength: 32
      }
    };
    aliases.p224 = aliases.secp224r1;
    aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
    aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
    function ECDH(curve) {
      this.curveType = aliases[curve];
      if (!this.curveType) {
        this.curveType = {name: curve};
      }
      this.curve = new elliptic.ec(this.curveType.name);
      this.keys = void 0;
    }
    ECDH.prototype.generateKeys = function(enc, format) {
      this.keys = this.curve.genKeyPair();
      return this.getPublicKey(enc, format);
    };
    ECDH.prototype.computeSecret = function(other, inenc, enc) {
      inenc = inenc || 'utf8';
      if (!Buffer.isBuffer(other)) {
        other = new Buffer(other, inenc);
      }
      var otherPub = this.curve.keyFromPublic(other).getPublic();
      var out = otherPub.mul(this.keys.getPrivate()).getX();
      return formatReturnValue(out, enc, this.curveType.byteLength);
    };
    ECDH.prototype.getPublicKey = function(enc, format) {
      var key = this.keys.getPublic(format === 'compressed', true);
      if (format === 'hybrid') {
        if (key[key.length - 1] % 2) {
          key[0] = 7;
        } else {
          key[0] = 6;
        }
      }
      return formatReturnValue(key, enc);
    };
    ECDH.prototype.getPrivateKey = function(enc) {
      return formatReturnValue(this.keys.getPrivate(), enc);
    };
    ECDH.prototype.setPublicKey = function(pub, enc) {
      enc = enc || 'utf8';
      if (!Buffer.isBuffer(pub)) {
        pub = new Buffer(pub, enc);
      }
      this.keys._importPublic(pub);
      return this;
    };
    ECDH.prototype.setPrivateKey = function(priv, enc) {
      enc = enc || 'utf8';
      if (!Buffer.isBuffer(priv)) {
        priv = new Buffer(priv, enc);
      }
      var _priv = new BN(priv);
      _priv = _priv.toString(16);
      this.keys._importPrivate(_priv);
      return this;
    };
    function formatReturnValue(bn, enc, len) {
      if (!Array.isArray(bn)) {
        bn = bn.toArray();
      }
      var buf = new Buffer(bn);
      if (len && buf.length < len) {
        var zeros = new Buffer(len - buf.length);
        zeros.fill(0);
        buf = Buffer.concat([zeros, buf]);
      }
      if (!enc) {
        return buf;
      } else {
        return buf.toString(enc);
      }
    }
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("14a", ["14b", "149"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var createECDH = require("14b").createECDH;
  module.exports = createECDH || require("149");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("14c", ["14a"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("14a");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("14d", ["df", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var createHash = require("df");
    module.exports = function(seed, len) {
      var t = new Buffer('');
      var i = 0,
          c;
      while (t.length < len) {
        c = i2ops(i++);
        t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
      }
      return t.slice(0, len);
    };
    function i2ops(c) {
      var out = new Buffer(4);
      out.writeUInt32BE(c, 0);
      return out;
    }
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("14e", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = function xor(a, b) {
    var len = a.length;
    var i = -1;
    while (++i < len) {
      a[i] ^= b[i];
    }
    return a;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("14f", ["107", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var bn = require("107");
    function withPublic(paddedMsg, key) {
      return new Buffer(paddedMsg.toRed(bn.mont(key.modulus)).redPow(new bn(key.publicExponent)).fromRed().toArray());
    }
    module.exports = withPublic;
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("150", ["144", "cc", "df", "14d", "14e", "107", "14f", "112", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var parseKeys = require("144");
    var randomBytes = require("cc");
    var createHash = require("df");
    var mgf = require("14d");
    var xor = require("14e");
    var bn = require("107");
    var withPublic = require("14f");
    var crt = require("112");
    var constants = {
      RSA_PKCS1_OAEP_PADDING: 4,
      RSA_PKCS1_PADDIN: 1,
      RSA_NO_PADDING: 3
    };
    module.exports = function publicEncrypt(public_key, msg, reverse) {
      var padding;
      if (public_key.padding) {
        padding = public_key.padding;
      } else if (reverse) {
        padding = 1;
      } else {
        padding = 4;
      }
      var key = parseKeys(public_key);
      var paddedMsg;
      if (padding === 4) {
        paddedMsg = oaep(key, msg);
      } else if (padding === 1) {
        paddedMsg = pkcs1(key, msg, reverse);
      } else if (padding === 3) {
        paddedMsg = new bn(msg);
        if (paddedMsg.cmp(key.modulus) >= 0) {
          throw new Error('data too long for modulus');
        }
      } else {
        throw new Error('unknown padding');
      }
      if (reverse) {
        return crt(paddedMsg, key);
      } else {
        return withPublic(paddedMsg, key);
      }
    };
    function oaep(key, msg) {
      var k = key.modulus.byteLength();
      var mLen = msg.length;
      var iHash = createHash('sha1').update(new Buffer('')).digest();
      var hLen = iHash.length;
      var hLen2 = 2 * hLen;
      if (mLen > k - hLen2 - 2) {
        throw new Error('message too long');
      }
      var ps = new Buffer(k - mLen - hLen2 - 2);
      ps.fill(0);
      var dblen = k - hLen - 1;
      var seed = randomBytes(hLen);
      var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
      var maskedSeed = xor(seed, mgf(maskedDb, hLen));
      return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
    }
    function pkcs1(key, msg, reverse) {
      var mLen = msg.length;
      var k = key.modulus.byteLength();
      if (mLen > k - 11) {
        throw new Error('message too long');
      }
      var ps;
      if (reverse) {
        ps = new Buffer(k - mLen - 3);
        ps.fill(0xff);
      } else {
        ps = nonZero(k - mLen - 3);
      }
      return new bn(Buffer.concat([new Buffer([0, reverse ? 1 : 2]), ps, new Buffer([0]), msg], k));
    }
    function nonZero(len, crypto) {
      var out = new Buffer(len);
      var i = 0;
      var cache = randomBytes(len * 2);
      var cur = 0;
      var num;
      while (i < len) {
        if (cur === cache.length) {
          cache = randomBytes(len * 2);
          cur = 0;
        }
        num = cache[cur++];
        if (num) {
          out[i++] = num;
        }
      }
      return out;
    }
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("151", ["144", "14d", "14e", "107", "112", "df", "14f", "72"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer) {
    var parseKeys = require("144");
    var mgf = require("14d");
    var xor = require("14e");
    var bn = require("107");
    var crt = require("112");
    var createHash = require("df");
    var withPublic = require("14f");
    module.exports = function privateDecrypt(private_key, enc, reverse) {
      var padding;
      if (private_key.padding) {
        padding = private_key.padding;
      } else if (reverse) {
        padding = 1;
      } else {
        padding = 4;
      }
      var key = parseKeys(private_key);
      var k = key.modulus.byteLength();
      if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
        throw new Error('decryption error');
      }
      var msg;
      if (reverse) {
        msg = withPublic(new bn(enc), key);
      } else {
        msg = crt(enc, key);
      }
      var zBuffer = new Buffer(k - msg.length);
      zBuffer.fill(0);
      msg = Buffer.concat([zBuffer, msg], k);
      if (padding === 4) {
        return oaep(key, msg);
      } else if (padding === 1) {
        return pkcs1(key, msg, reverse);
      } else if (padding === 3) {
        return msg;
      } else {
        throw new Error('unknown padding');
      }
    };
    function oaep(key, msg) {
      var n = key.modulus;
      var k = key.modulus.byteLength();
      var mLen = msg.length;
      var iHash = createHash('sha1').update(new Buffer('')).digest();
      var hLen = iHash.length;
      var hLen2 = 2 * hLen;
      if (msg[0] !== 0) {
        throw new Error('decryption error');
      }
      var maskedSeed = msg.slice(1, hLen + 1);
      var maskedDb = msg.slice(hLen + 1);
      var seed = xor(maskedSeed, mgf(maskedDb, hLen));
      var db = xor(maskedDb, mgf(seed, k - hLen - 1));
      if (compare(iHash, db.slice(0, hLen))) {
        throw new Error('decryption error');
      }
      var i = hLen;
      while (db[i] === 0) {
        i++;
      }
      if (db[i++] !== 1) {
        throw new Error('decryption error');
      }
      return db.slice(i);
    }
    function pkcs1(key, msg, reverse) {
      var p1 = msg.slice(0, 2);
      var i = 2;
      var status = 0;
      while (msg[i++] !== 0) {
        if (i >= msg.length) {
          status++;
          break;
        }
      }
      var ps = msg.slice(2, i - 1);
      var p2 = msg.slice(i - 1, i);
      if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
        status++;
      }
      if (ps.length < 8) {
        status++;
      }
      if (status) {
        throw new Error('decryption error');
      }
      return msg.slice(i);
    }
    function compare(a, b) {
      a = new Buffer(a);
      b = new Buffer(b);
      var dif = 0;
      var len = a.length;
      if (a.length !== b.length) {
        dif++;
        len = Math.min(a.length, b.length);
      }
      var i = -1;
      while (++i < len) {
        dif += (a[i] ^ b[i]);
      }
      return dif;
    }
  })(require("72").Buffer);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("152", ["150", "151"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  exports.publicEncrypt = require("150");
  exports.privateDecrypt = require("151");
  exports.privateEncrypt = function privateEncrypt(key, buf) {
    return exports.publicEncrypt(key, buf, true);
  };
  exports.publicDecrypt = function publicDecrypt(key, buf) {
    return exports.privateDecrypt(key, buf, true);
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("153", ["152"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("152");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("154", ["cc", "df", "e1", "e2", "e4", "105", "110", "148", "14c", "153"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require("cc");
  exports.createHash = exports.Hash = require("df");
  exports.createHmac = exports.Hmac = require("e1");
  var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(Object.keys(require("e2")));
  exports.getHashes = function() {
    return hashes;
  };
  var p = require("e4");
  exports.pbkdf2 = p.pbkdf2;
  exports.pbkdf2Sync = p.pbkdf2Sync;
  var aes = require("105");
  ;
  ['Cipher', 'createCipher', 'Cipheriv', 'createCipheriv', 'Decipher', 'createDecipher', 'Decipheriv', 'createDecipheriv', 'getCiphers', 'listCiphers'].forEach(function(key) {
    exports[key] = aes[key];
  });
  var dh = require("110");
  ;
  ['DiffieHellmanGroup', 'createDiffieHellmanGroup', 'getDiffieHellman', 'createDiffieHellman', 'DiffieHellman'].forEach(function(key) {
    exports[key] = dh[key];
  });
  var sign = require("148");
  ;
  ['createSign', 'Sign', 'createVerify', 'Verify'].forEach(function(key) {
    exports[key] = sign[key];
  });
  exports.createECDH = require("14c");
  var publicEncrypt = require("153");
  ;
  ['publicEncrypt', 'privateEncrypt', 'publicDecrypt', 'privateDecrypt'].forEach(function(key) {
    exports[key] = publicEncrypt[key];
  });
  ;
  ['createCredentials'].forEach(function(name) {
    exports[name] = function() {
      throw new Error(['sorry, ' + name + ' is not implemented yet', 'we accept pull requests', 'https://github.com/crypto-browserify/crypto-browserify'].join('\n'));
    };
  });
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("155", ["154"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("154");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("156", ["155"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = $__System._nodeRequire ? $__System._nodeRequire('crypto') : require("155");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("14b", ["156"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("156");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("157", ["14b", "@empty"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var crypto = require("14b");
  function Keygrip(keys, algorithm, encoding) {
    if (!algorithm)
      algorithm = "sha1";
    if (!encoding)
      encoding = "base64";
    if (!(this instanceof Keygrip))
      return new Keygrip(keys, algorithm, encoding);
    if (!keys || !(0 in keys)) {
      throw new Error("Keys must be provided.");
    }
    function sign(data, key) {
      return crypto.createHmac(algorithm, key).update(data).digest(encoding).replace(/\/|\+|=/g, function(x) {
        return ({
          "/": "_",
          "+": "-",
          "=": ""
        })[x];
      });
    }
    this.sign = function(data) {
      return sign(data, keys[0]);
    };
    this.verify = function(data, digest) {
      return this.index(data, digest) > -1;
    };
    this.index = function(data, digest) {
      for (var i = 0,
          l = keys.length; i < l; i++) {
        if (constantTimeCompare(digest, sign(data, keys[i])))
          return i;
      }
      return -1;
    };
  }
  Keygrip.sign = Keygrip.verify = Keygrip.index = function() {
    throw new Error("Usage: require('@empty')(<array-of-keys>)");
  };
  var constantTimeCompare = function(val1, val2) {
    if (val1 == null && val2 != null) {
      return false;
    } else if (val2 == null && val1 != null) {
      return false;
    } else if (val1 == null && val2 == null) {
      return true;
    }
    if (val1.length !== val2.length) {
      return false;
    }
    var matches = 1;
    for (var i = 0; i < val1.length; i++) {
      matches &= (val1.charAt(i) === val2.charAt(i) ? 1 : 0);
    }
    return matches === 1;
  };
  module.exports = Keygrip;
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("158", ["157"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("157");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("159", ["a3"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = $__System._nodeRequire ? $__System._nodeRequire('util') : require("a3");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("15a", ["159"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("159");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("15b", ["8a", "15a"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var Stream = require("8a");
  var util = require("15a");
  var Response = module.exports = function(res) {
    this.offset = 0;
    this.readable = true;
  };
  util.inherits(Response, Stream);
  var capable = {
    streaming: true,
    status2: true
  };
  function parseHeaders(res) {
    var lines = res.getAllResponseHeaders().split(/\r?\n/);
    var headers = {};
    for (var i = 0; i < lines.length; i++) {
      var line = lines[i];
      if (line === '')
        continue;
      var m = line.match(/^([^:]+):\s*(.*)/);
      if (m) {
        var key = m[1].toLowerCase(),
            value = m[2];
        if (headers[key] !== undefined) {
          if (isArray(headers[key])) {
            headers[key].push(value);
          } else {
            headers[key] = [headers[key], value];
          }
        } else {
          headers[key] = value;
        }
      } else {
        headers[line] = true;
      }
    }
    return headers;
  }
  Response.prototype.getResponse = function(xhr) {
    var respType = String(xhr.responseType).toLowerCase();
    if (respType === 'blob')
      return xhr.responseBlob || xhr.response;
    if (respType === 'arraybuffer')
      return xhr.response;
    return xhr.responseText;
  };
  Response.prototype.getHeader = function(key) {
    return this.headers[key.toLowerCase()];
  };
  Response.prototype.handle = function(res) {
    if (res.readyState === 2 && capable.status2) {
      try {
        this.statusCode = res.status;
        this.headers = parseHeaders(res);
      } catch (err) {
        capable.status2 = false;
      }
      if (capable.status2) {
        this.emit('ready');
      }
    } else if (capable.streaming && res.readyState === 3) {
      try {
        if (!this.statusCode) {
          this.statusCode = res.status;
          this.headers = parseHeaders(res);
          this.emit('ready');
        }
      } catch (err) {}
      try {
        this._emitData(res);
      } catch (err) {
        capable.streaming = false;
      }
    } else if (res.readyState === 4) {
      if (!this.statusCode) {
        this.statusCode = res.status;
        this.emit('ready');
      }
      this._emitData(res);
      if (res.error) {
        this.emit('error', this.getResponse(res));
      } else
        this.emit('end');
      this.emit('close');
    }
  };
  Response.prototype._emitData = function(res) {
    var respBody = this.getResponse(res);
    if (respBody.toString().match(/ArrayBuffer/)) {
      this.emit('data', new Uint8Array(respBody, this.offset));
      this.offset = respBody.byteLength;
      return;
    }
    if (respBody.length > this.offset) {
      this.emit('data', respBody.slice(this.offset));
      this.offset = respBody.length;
    }
  };
  var isArray = Array.isArray || function(xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("15c", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  ;
  (function() {
    var object = typeof exports != 'undefined' ? exports : this;
    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
    function InvalidCharacterError(message) {
      this.message = message;
    }
    InvalidCharacterError.prototype = new Error;
    InvalidCharacterError.prototype.name = 'InvalidCharacterError';
    object.btoa || (object.btoa = function(input) {
      for (var block,
          charCode,
          idx = 0,
          map = chars,
          output = ''; input.charAt(idx | 0) || (map = '=', idx % 1); output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
        charCode = input.charCodeAt(idx += 3 / 4);
        if (charCode > 0xFF) {
          throw new InvalidCharacterError("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
        }
        block = block << 8 | charCode;
      }
      return output;
    });
    object.atob || (object.atob = function(input) {
      input = input.replace(/=+$/, '');
      if (input.length % 4 == 1) {
        throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
      }
      for (var bc = 0,
          bs,
          buffer,
          idx = 0,
          output = ''; buffer = input.charAt(idx++); ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
        buffer = chars.indexOf(buffer);
      }
      return output;
    });
  }());
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("15d", ["15c"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("15c");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("15e", ["8a", "15b", "15d", "76"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var Stream = require("8a");
  var Response = require("15b");
  var Base64 = require("15d");
  var inherits = require("76");
  var Request = module.exports = function(xhr, params) {
    var self = this;
    self.writable = true;
    self.xhr = xhr;
    self.body = [];
    self.uri = (params.protocol || 'http:') + '//' + params.host + (params.port ? ':' + params.port : '') + (params.path || '/');
    ;
    if (typeof params.withCredentials === 'undefined') {
      params.withCredentials = true;
    }
    try {
      xhr.withCredentials = params.withCredentials;
    } catch (e) {}
    if (params.responseType)
      try {
        xhr.responseType = params.responseType;
      } catch (e) {}
    xhr.open(params.method || 'GET', self.uri, true);
    xhr.onerror = function(event) {
      self.emit('error', new Error('Network error'));
    };
    self._headers = {};
    if (params.headers) {
      var keys = objectKeys(params.headers);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (!self.isSafeRequestHeader(key))
          continue;
        var value = params.headers[key];
        self.setHeader(key, value);
      }
    }
    if (params.auth) {
      this.setHeader('Authorization', 'Basic ' + Base64.btoa(params.auth));
    }
    var res = new Response;
    res.on('close', function() {
      self.emit('close');
    });
    res.on('ready', function() {
      self.emit('response', res);
    });
    res.on('error', function(err) {
      self.emit('error', err);
    });
    xhr.onreadystatechange = function() {
      if (xhr.__aborted)
        return;
      res.handle(xhr);
    };
  };
  inherits(Request, Stream);
  Request.prototype.setHeader = function(key, value) {
    this._headers[key.toLowerCase()] = value;
  };
  Request.prototype.getHeader = function(key) {
    return this._headers[key.toLowerCase()];
  };
  Request.prototype.removeHeader = function(key) {
    delete this._headers[key.toLowerCase()];
  };
  Request.prototype.write = function(s) {
    this.body.push(s);
  };
  Request.prototype.destroy = function(s) {
    this.xhr.__aborted = true;
    this.xhr.abort();
    this.emit('close');
  };
  Request.prototype.end = function(s) {
    if (s !== undefined)
      this.body.push(s);
    var keys = objectKeys(this._headers);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var value = this._headers[key];
      if (isArray(value)) {
        for (var j = 0; j < value.length; j++) {
          this.xhr.setRequestHeader(key, value[j]);
        }
      } else
        this.xhr.setRequestHeader(key, value);
    }
    if (this.body.length === 0) {
      this.xhr.send('');
    } else if (typeof this.body[0] === 'string') {
      this.xhr.send(this.body.join(''));
    } else if (isArray(this.body[0])) {
      var body = [];
      for (var i = 0; i < this.body.length; i++) {
        body.push.apply(body, this.body[i]);
      }
      this.xhr.send(body);
    } else if (/Array/.test(Object.prototype.toString.call(this.body[0]))) {
      var len = 0;
      for (var i = 0; i < this.body.length; i++) {
        len += this.body[i].length;
      }
      var body = new (this.body[0].constructor)(len);
      var k = 0;
      for (var i = 0; i < this.body.length; i++) {
        var b = this.body[i];
        for (var j = 0; j < b.length; j++) {
          body[k++] = b[j];
        }
      }
      this.xhr.send(body);
    } else if (isXHR2Compatible(this.body[0])) {
      this.xhr.send(this.body[0]);
    } else {
      var body = '';
      for (var i = 0; i < this.body.length; i++) {
        body += this.body[i].toString();
      }
      this.xhr.send(body);
    }
  };
  Request.unsafeHeaders = ["accept-charset", "accept-encoding", "access-control-request-headers", "access-control-request-method", "connection", "content-length", "cookie", "cookie2", "content-transfer-encoding", "date", "expect", "host", "keep-alive", "origin", "referer", "te", "trailer", "transfer-encoding", "upgrade", "user-agent", "via"];
  Request.prototype.isSafeRequestHeader = function(headerName) {
    if (!headerName)
      return false;
    return indexOf(Request.unsafeHeaders, headerName.toLowerCase()) === -1;
  };
  var objectKeys = Object.keys || function(obj) {
    var keys = [];
    for (var key in obj)
      keys.push(key);
    return keys;
  };
  var isArray = Array.isArray || function(xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
  };
  var indexOf = function(xs, x) {
    if (xs.indexOf)
      return xs.indexOf(x);
    for (var i = 0; i < xs.length; i++) {
      if (xs[i] === x)
        return i;
    }
    return -1;
  };
  var isXHR2Compatible = function(obj) {
    if (typeof Blob !== 'undefined' && obj instanceof Blob)
      return true;
    if (typeof ArrayBuffer !== 'undefined' && obj instanceof ArrayBuffer)
      return true;
    if (typeof FormData !== 'undefined' && obj instanceof FormData)
      return true;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("15f", ["57", "15e", "c3"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  if ($__System._nodeRequire) {
    module.exports = $__System._nodeRequire('http');
  } else {
    var http = module.exports;
    var EventEmitter = require("57").EventEmitter;
    var Request = require("15e");
    var url = require("c3");
    http.request = function(params, cb) {
      if (typeof params === 'string') {
        params = url.parse(params);
      }
      if (!params)
        params = {};
      if (!params.host && !params.port) {
        params.port = parseInt(window.location.port, 10);
      }
      if (!params.host && params.hostname) {
        params.host = params.hostname;
      }
      if (!params.protocol) {
        if (params.scheme) {
          params.protocol = params.scheme + ':';
        } else {
          params.protocol = window.location.protocol;
        }
      }
      if (!params.host) {
        params.host = window.location.hostname || window.location.host;
      }
      if (/:/.test(params.host)) {
        if (!params.port) {
          params.port = params.host.split(':')[1];
        }
        params.host = params.host.split(':')[0];
      }
      if (!params.port)
        params.port = params.protocol == 'https:' ? 443 : 80;
      var req = new Request(new xhrHttp, params);
      if (cb)
        req.on('response', cb);
      return req;
    };
    http.get = function(params, cb) {
      params.method = 'GET';
      var req = http.request(params, cb);
      req.end();
      return req;
    };
    http.Agent = function() {};
    http.Agent.defaultMaxSockets = 4;
    var xhrHttp = (function() {
      if (typeof window === 'undefined') {
        throw new Error('no window object present');
      } else if (window.XMLHttpRequest) {
        return window.XMLHttpRequest;
      } else if (window.ActiveXObject) {
        var axs = ['Msxml2.XMLHTTP.6.0', 'Msxml2.XMLHTTP.3.0', 'Microsoft.XMLHTTP'];
        for (var i = 0; i < axs.length; i++) {
          try {
            var ax = new (window.ActiveXObject)(axs[i]);
            return function() {
              if (ax) {
                var ax_ = ax;
                ax = null;
                return ax_;
              } else {
                return new (window.ActiveXObject)(axs[i]);
              }
            };
          } catch (e) {}
        }
        throw new Error('ajax not supported in this browser');
      } else {
        throw new Error('ajax not supported in this browser');
      }
    })();
    http.STATUS_CODES = {
      100: 'Continue',
      101: 'Switching Protocols',
      102: 'Processing',
      200: 'OK',
      201: 'Created',
      202: 'Accepted',
      203: 'Non-Authoritative Information',
      204: 'No Content',
      205: 'Reset Content',
      206: 'Partial Content',
      207: 'Multi-Status',
      300: 'Multiple Choices',
      301: 'Moved Permanently',
      302: 'Moved Temporarily',
      303: 'See Other',
      304: 'Not Modified',
      305: 'Use Proxy',
      307: 'Temporary Redirect',
      400: 'Bad Request',
      401: 'Unauthorized',
      402: 'Payment Required',
      403: 'Forbidden',
      404: 'Not Found',
      405: 'Method Not Allowed',
      406: 'Not Acceptable',
      407: 'Proxy Authentication Required',
      408: 'Request Time-out',
      409: 'Conflict',
      410: 'Gone',
      411: 'Length Required',
      412: 'Precondition Failed',
      413: 'Request Entity Too Large',
      414: 'Request-URI Too Large',
      415: 'Unsupported Media Type',
      416: 'Requested Range Not Satisfiable',
      417: 'Expectation Failed',
      418: 'I\'m a teapot',
      422: 'Unprocessable Entity',
      423: 'Locked',
      424: 'Failed Dependency',
      425: 'Unordered Collection',
      426: 'Upgrade Required',
      428: 'Precondition Required',
      429: 'Too Many Requests',
      431: 'Request Header Fields Too Large',
      500: 'Internal Server Error',
      501: 'Not Implemented',
      502: 'Bad Gateway',
      503: 'Service Unavailable',
      504: 'Gateway Time-out',
      505: 'HTTP Version Not Supported',
      506: 'Variant Also Negotiates',
      507: 'Insufficient Storage',
      509: 'Bandwidth Limit Exceeded',
      510: 'Not Extended',
      511: 'Network Authentication Required'
    };
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("160", ["15f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("15f");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("161", ["158", "160"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var Keygrip = require("158");
  var http = require("160");
  var cache = {};
  var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
  function Cookies(request, response, keys) {
    if (!(this instanceof Cookies))
      return new Cookies(request, response, keys);
    this.request = request;
    this.response = response;
    if (keys) {
      if (Array.isArray(keys))
        this.keys = new Keygrip(keys);
      else if (keys.constructor && keys.constructor.name === 'Keygrip')
        this.keys = keys;
    }
  }
  Cookies.prototype = {
    get: function(name, opts) {
      var sigName = name + ".sig",
          header,
          match,
          value,
          remote,
          data,
          index,
          signed = opts && opts.signed !== undefined ? opts.signed : !!this.keys;
      header = this.request.headers["cookie"];
      if (!header)
        return;
      match = header.match(getPattern(name));
      if (!match)
        return;
      value = match[1];
      if (!opts || !signed)
        return value;
      remote = this.get(sigName);
      if (!remote)
        return;
      data = name + "=" + value;
      if (!this.keys)
        throw new Error('.keys required for signed cookies');
      index = this.keys.index(data, remote);
      if (index < 0) {
        this.set(sigName, null, {
          path: "/",
          signed: false
        });
      } else {
        index && this.set(sigName, this.keys.sign(data), {signed: false});
        return value;
      }
    },
    set: function(name, value, opts) {
      var res = this.response,
          req = this.request,
          headers = res.getHeader("Set-Cookie") || [],
          secure = req.protocol === 'https' || req.connection.encrypted,
          cookie = new Cookie(name, value, opts),
          signed = opts && opts.signed !== undefined ? opts.signed : !!this.keys;
      if (typeof headers == "string")
        headers = [headers];
      if (!secure && opts && opts.secure) {
        throw new Error('Cannot send secure cookie over unencrypted connection');
      }
      cookie.secure = secure;
      if (opts && "secure" in opts)
        cookie.secure = opts.secure;
      if (opts && "secureProxy" in opts)
        cookie.secure = opts.secureProxy;
      headers = pushCookie(headers, cookie);
      if (opts && signed) {
        if (!this.keys)
          throw new Error('.keys required for signed cookies');
        cookie.value = this.keys.sign(cookie.toString());
        cookie.name += ".sig";
        headers = pushCookie(headers, cookie);
      }
      var setHeader = res.set ? http.OutgoingMessage.prototype.setHeader : res.setHeader;
      setHeader.call(res, 'Set-Cookie', headers);
      return this;
    }
  };
  function Cookie(name, value, attrs) {
    if (!fieldContentRegExp.test(name)) {
      throw new TypeError('argument name is invalid');
    }
    if (value && !fieldContentRegExp.test(value)) {
      throw new TypeError('argument value is invalid');
    }
    value || (this.expires = new Date(0));
    this.name = name;
    this.value = value || "";
    for (var name in attrs) {
      this[name] = attrs[name];
    }
    if (this.path && !fieldContentRegExp.test(this.path)) {
      throw new TypeError('option path is invalid');
    }
    if (this.domain && !fieldContentRegExp.test(this.domain)) {
      throw new TypeError('option domain is invalid');
    }
  }
  Cookie.prototype = {
    path: "/",
    expires: undefined,
    domain: undefined,
    httpOnly: true,
    secure: false,
    overwrite: false,
    toString: function() {
      return this.name + "=" + this.value;
    },
    toHeader: function() {
      var header = this.toString();
      if (this.maxAge)
        this.expires = new Date(Date.now() + this.maxAge);
      if (this.path)
        header += "; path=" + this.path;
      if (this.expires)
        header += "; expires=" + this.expires.toUTCString();
      if (this.domain)
        header += "; domain=" + this.domain;
      if (this.secure)
        header += "; secure";
      if (this.httpOnly)
        header += "; httponly";
      return header;
    }
  };
  Object.defineProperty(Cookie.prototype, 'maxage', {
    configurable: true,
    enumerable: true,
    get: function() {
      return this.maxAge;
    },
    set: function(val) {
      return this.maxAge = val;
    }
  });
  function getPattern(name) {
    if (cache[name])
      return cache[name];
    return cache[name] = new RegExp("(?:^|;) *" + name.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&") + "=([^;]*)");
  }
  function pushCookie(cookies, cookie) {
    if (cookie.overwrite) {
      cookies = cookies.filter(function(c) {
        return c.indexOf(cookie.name + '=') !== 0;
      });
    }
    cookies.push(cookie.toHeader());
    return cookies;
  }
  Cookies.connect = Cookies.express = function(keys) {
    return function(req, res, next) {
      req.cookies = res.cookies = new Cookies(req, res, keys);
      next();
    };
  };
  Cookies.Cookie = Cookie;
  module.exports = Cookies;
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("162", ["161"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("161");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("163", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = preferredCharsets;
  preferredCharsets.preferredCharsets = preferredCharsets;
  function parseAcceptCharset(accept) {
    var accepts = accept.split(',');
    for (var i = 0,
        j = 0; i < accepts.length; i++) {
      var charset = parseCharset(accepts[i].trim(), i);
      if (charset) {
        accepts[j++] = charset;
      }
    }
    accepts.length = j;
    return accepts;
  }
  function parseCharset(s, i) {
    var match = s.match(/^\s*(\S+?)\s*(?:;(.*))?$/);
    if (!match)
      return null;
    var charset = match[1];
    var q = 1;
    if (match[2]) {
      var params = match[2].split(';');
      for (var i = 0; i < params.length; i++) {
        var p = params[i].trim().split('=');
        if (p[0] === 'q') {
          q = parseFloat(p[1]);
          break;
        }
      }
    }
    return {
      charset: charset,
      q: q,
      i: i
    };
  }
  function getCharsetPriority(charset, accepted, index) {
    var priority = {
      o: -1,
      q: 0,
      s: 0
    };
    for (var i = 0; i < accepted.length; i++) {
      var spec = specify(charset, accepted[i], index);
      if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
        priority = spec;
      }
    }
    return priority;
  }
  function specify(charset, spec, index) {
    var s = 0;
    if (spec.charset.toLowerCase() === charset.toLowerCase()) {
      s |= 1;
    } else if (spec.charset !== '*') {
      return null;
    }
    return {
      i: index,
      o: spec.i,
      q: spec.q,
      s: s
    };
  }
  function preferredCharsets(accept, provided) {
    var accepts = parseAcceptCharset(accept === undefined ? '*' : accept || '');
    if (!provided) {
      return accepts.filter(isQuality).sort(compareSpecs).map(function getCharset(spec) {
        return spec.charset;
      });
    }
    var priorities = provided.map(function getPriority(type, index) {
      return getCharsetPriority(type, accepts, index);
    });
    return priorities.filter(isQuality).sort(compareSpecs).map(function getCharset(priority) {
      return provided[priorities.indexOf(priority)];
    });
  }
  function compareSpecs(a, b) {
    return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
  }
  function isQuality(spec) {
    return spec.q > 0;
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("164", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = preferredEncodings;
  preferredEncodings.preferredEncodings = preferredEncodings;
  function parseAcceptEncoding(accept) {
    var accepts = accept.split(',');
    var hasIdentity = false;
    var minQuality = 1;
    for (var i = 0,
        j = 0; i < accepts.length; i++) {
      var encoding = parseEncoding(accepts[i].trim(), i);
      if (encoding) {
        accepts[j++] = encoding;
        hasIdentity = hasIdentity || specify('identity', encoding);
        minQuality = Math.min(minQuality, encoding.q || 1);
      }
    }
    if (!hasIdentity) {
      accepts[j++] = {
        encoding: 'identity',
        q: minQuality,
        i: i
      };
    }
    accepts.length = j;
    return accepts;
  }
  function parseEncoding(s, i) {
    var match = s.match(/^\s*(\S+?)\s*(?:;(.*))?$/);
    if (!match)
      return null;
    var encoding = match[1];
    var q = 1;
    if (match[2]) {
      var params = match[2].split(';');
      for (var i = 0; i < params.length; i++) {
        var p = params[i].trim().split('=');
        if (p[0] === 'q') {
          q = parseFloat(p[1]);
          break;
        }
      }
    }
    return {
      encoding: encoding,
      q: q,
      i: i
    };
  }
  function getEncodingPriority(encoding, accepted, index) {
    var priority = {
      o: -1,
      q: 0,
      s: 0
    };
    for (var i = 0; i < accepted.length; i++) {
      var spec = specify(encoding, accepted[i], index);
      if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
        priority = spec;
      }
    }
    return priority;
  }
  function specify(encoding, spec, index) {
    var s = 0;
    if (spec.encoding.toLowerCase() === encoding.toLowerCase()) {
      s |= 1;
    } else if (spec.encoding !== '*') {
      return null;
    }
    return {
      i: index,
      o: spec.i,
      q: spec.q,
      s: s
    };
  }
  ;
  function preferredEncodings(accept, provided) {
    var accepts = parseAcceptEncoding(accept || '');
    if (!provided) {
      return accepts.filter(isQuality).sort(compareSpecs).map(function getEncoding(spec) {
        return spec.encoding;
      });
    }
    var priorities = provided.map(function getPriority(type, index) {
      return getEncodingPriority(type, accepts, index);
    });
    return priorities.filter(isQuality).sort(compareSpecs).map(function getEncoding(priority) {
      return provided[priorities.indexOf(priority)];
    });
  }
  function compareSpecs(a, b) {
    return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
  }
  function isQuality(spec) {
    return spec.q > 0;
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("165", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = preferredLanguages;
  preferredLanguages.preferredLanguages = preferredLanguages;
  function parseAcceptLanguage(accept) {
    var accepts = accept.split(',');
    for (var i = 0,
        j = 0; i < accepts.length; i++) {
      var langauge = parseLanguage(accepts[i].trim(), i);
      if (langauge) {
        accepts[j++] = langauge;
      }
    }
    accepts.length = j;
    return accepts;
  }
  function parseLanguage(s, i) {
    var match = s.match(/^\s*(\S+?)(?:-(\S+?))?\s*(?:;(.*))?$/);
    if (!match)
      return null;
    var prefix = match[1],
        suffix = match[2],
        full = prefix;
    if (suffix)
      full += "-" + suffix;
    var q = 1;
    if (match[3]) {
      var params = match[3].split(';');
      for (var i = 0; i < params.length; i++) {
        var p = params[i].split('=');
        if (p[0] === 'q')
          q = parseFloat(p[1]);
      }
    }
    return {
      prefix: prefix,
      suffix: suffix,
      q: q,
      i: i,
      full: full
    };
  }
  function getLanguagePriority(language, accepted, index) {
    var priority = {
      o: -1,
      q: 0,
      s: 0
    };
    for (var i = 0; i < accepted.length; i++) {
      var spec = specify(language, accepted[i], index);
      if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
        priority = spec;
      }
    }
    return priority;
  }
  function specify(language, spec, index) {
    var p = parseLanguage(language);
    if (!p)
      return null;
    var s = 0;
    if (spec.full.toLowerCase() === p.full.toLowerCase()) {
      s |= 4;
    } else if (spec.prefix.toLowerCase() === p.full.toLowerCase()) {
      s |= 2;
    } else if (spec.full.toLowerCase() === p.prefix.toLowerCase()) {
      s |= 1;
    } else if (spec.full !== '*') {
      return null;
    }
    return {
      i: index,
      o: spec.i,
      q: spec.q,
      s: s
    };
  }
  ;
  function preferredLanguages(accept, provided) {
    var accepts = parseAcceptLanguage(accept === undefined ? '*' : accept || '');
    if (!provided) {
      return accepts.filter(isQuality).sort(compareSpecs).map(function getLanguage(spec) {
        return spec.full;
      });
    }
    var priorities = provided.map(function getPriority(type, index) {
      return getLanguagePriority(type, accepts, index);
    });
    return priorities.filter(isQuality).sort(compareSpecs).map(function getLanguage(priority) {
      return provided[priorities.indexOf(priority)];
    });
  }
  function compareSpecs(a, b) {
    return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
  }
  function isQuality(spec) {
    return spec.q > 0;
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("166", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = preferredMediaTypes;
  preferredMediaTypes.preferredMediaTypes = preferredMediaTypes;
  function parseAccept(accept) {
    var accepts = splitMediaTypes(accept);
    for (var i = 0,
        j = 0; i < accepts.length; i++) {
      var mediaType = parseMediaType(accepts[i].trim(), i);
      if (mediaType) {
        accepts[j++] = mediaType;
      }
    }
    accepts.length = j;
    return accepts;
  }
  ;
  function parseMediaType(s, i) {
    var match = s.match(/\s*(\S+?)\/([^;\s]+)\s*(?:;(.*))?/);
    if (!match)
      return null;
    var type = match[1],
        subtype = match[2],
        full = "" + type + "/" + subtype,
        params = {},
        q = 1;
    if (match[3]) {
      params = match[3].split(';').map(function(s) {
        return s.trim().split('=');
      }).reduce(function(set, p) {
        var name = p[0].toLowerCase();
        var value = p[1];
        set[name] = value && value[0] === '"' && value[value.length - 1] === '"' ? value.substr(1, value.length - 2) : value;
        return set;
      }, params);
      if (params.q != null) {
        q = parseFloat(params.q);
        delete params.q;
      }
    }
    return {
      type: type,
      subtype: subtype,
      params: params,
      q: q,
      i: i,
      full: full
    };
  }
  function getMediaTypePriority(type, accepted, index) {
    var priority = {
      o: -1,
      q: 0,
      s: 0
    };
    for (var i = 0; i < accepted.length; i++) {
      var spec = specify(type, accepted[i], index);
      if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
        priority = spec;
      }
    }
    return priority;
  }
  function specify(type, spec, index) {
    var p = parseMediaType(type);
    var s = 0;
    if (!p) {
      return null;
    }
    if (spec.type.toLowerCase() == p.type.toLowerCase()) {
      s |= 4;
    } else if (spec.type != '*') {
      return null;
    }
    if (spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {
      s |= 2;
    } else if (spec.subtype != '*') {
      return null;
    }
    var keys = Object.keys(spec.params);
    if (keys.length > 0) {
      if (keys.every(function(k) {
        return spec.params[k] == '*' || (spec.params[k] || '').toLowerCase() == (p.params[k] || '').toLowerCase();
      })) {
        s |= 1;
      } else {
        return null;
      }
    }
    return {
      i: index,
      o: spec.i,
      q: spec.q,
      s: s
    };
  }
  function preferredMediaTypes(accept, provided) {
    var accepts = parseAccept(accept === undefined ? '*/*' : accept || '');
    if (!provided) {
      return accepts.filter(isQuality).sort(compareSpecs).map(function getType(spec) {
        return spec.full;
      });
    }
    var priorities = provided.map(function getPriority(type, index) {
      return getMediaTypePriority(type, accepts, index);
    });
    return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) {
      return provided[priorities.indexOf(priority)];
    });
  }
  function compareSpecs(a, b) {
    return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
  }
  function isQuality(spec) {
    return spec.q > 0;
  }
  function quoteCount(string) {
    var count = 0;
    var index = 0;
    while ((index = string.indexOf('"', index)) !== -1) {
      count++;
      index++;
    }
    return count;
  }
  function splitMediaTypes(accept) {
    var accepts = accept.split(',');
    for (var i = 1,
        j = 0; i < accepts.length; i++) {
      if (quoteCount(accepts[j]) % 2 == 0) {
        accepts[++j] = accepts[i];
      } else {
        accepts[j] += ',' + accepts[i];
      }
    }
    accepts.length = j + 1;
    return accepts;
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("167", ["163", "164", "165", "166"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var preferredCharsets = require("163");
  var preferredEncodings = require("164");
  var preferredLanguages = require("165");
  var preferredMediaTypes = require("166");
  module.exports = Negotiator;
  Negotiator.Negotiator = Negotiator;
  function Negotiator(request) {
    if (!(this instanceof Negotiator)) {
      return new Negotiator(request);
    }
    this.request = request;
  }
  Negotiator.prototype.charset = function charset(available) {
    var set = this.charsets(available);
    return set && set[0];
  };
  Negotiator.prototype.charsets = function charsets(available) {
    return preferredCharsets(this.request.headers['accept-charset'], available);
  };
  Negotiator.prototype.encoding = function encoding(available) {
    var set = this.encodings(available);
    return set && set[0];
  };
  Negotiator.prototype.encodings = function encodings(available) {
    return preferredEncodings(this.request.headers['accept-encoding'], available);
  };
  Negotiator.prototype.language = function language(available) {
    var set = this.languages(available);
    return set && set[0];
  };
  Negotiator.prototype.languages = function languages(available) {
    return preferredLanguages(this.request.headers['accept-language'], available);
  };
  Negotiator.prototype.mediaType = function mediaType(available) {
    var set = this.mediaTypes(available);
    return set && set[0];
  };
  Negotiator.prototype.mediaTypes = function mediaTypes(available) {
    return preferredMediaTypes(this.request.headers.accept, available);
  };
  Negotiator.prototype.preferredCharset = Negotiator.prototype.charset;
  Negotiator.prototype.preferredCharsets = Negotiator.prototype.charsets;
  Negotiator.prototype.preferredEncoding = Negotiator.prototype.encoding;
  Negotiator.prototype.preferredEncodings = Negotiator.prototype.encodings;
  Negotiator.prototype.preferredLanguage = Negotiator.prototype.language;
  Negotiator.prototype.preferredLanguages = Negotiator.prototype.languages;
  Negotiator.prototype.preferredMediaType = Negotiator.prototype.mediaType;
  Negotiator.prototype.preferredMediaTypes = Negotiator.prototype.mediaTypes;
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("168", ["167"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("167");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("169", ["168", "91"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var Negotiator = require("168");
  var mime = require("91");
  module.exports = Accepts;
  function Accepts(req) {
    if (!(this instanceof Accepts))
      return new Accepts(req);
    this.headers = req.headers;
    this.negotiator = new Negotiator(req);
  }
  Accepts.prototype.type = Accepts.prototype.types = function(types_) {
    var types = types_;
    if (types && !Array.isArray(types)) {
      types = new Array(arguments.length);
      for (var i = 0; i < types.length; i++) {
        types[i] = arguments[i];
      }
    }
    if (!types || types.length === 0) {
      return this.negotiator.mediaTypes();
    }
    if (!this.headers.accept)
      return types[0];
    var mimes = types.map(extToMime);
    var accepts = this.negotiator.mediaTypes(mimes.filter(validMime));
    var first = accepts[0];
    if (!first)
      return false;
    return types[mimes.indexOf(first)];
  };
  Accepts.prototype.encoding = Accepts.prototype.encodings = function(encodings_) {
    var encodings = encodings_;
    if (encodings && !Array.isArray(encodings)) {
      encodings = new Array(arguments.length);
      for (var i = 0; i < encodings.length; i++) {
        encodings[i] = arguments[i];
      }
    }
    if (!encodings || encodings.length === 0) {
      return this.negotiator.encodings();
    }
    return this.negotiator.encodings(encodings)[0] || false;
  };
  Accepts.prototype.charset = Accepts.prototype.charsets = function(charsets_) {
    var charsets = charsets_;
    if (charsets && !Array.isArray(charsets)) {
      charsets = new Array(arguments.length);
      for (var i = 0; i < charsets.length; i++) {
        charsets[i] = arguments[i];
      }
    }
    if (!charsets || charsets.length === 0) {
      return this.negotiator.charsets();
    }
    return this.negotiator.charsets(charsets)[0] || false;
  };
  Accepts.prototype.lang = Accepts.prototype.langs = Accepts.prototype.language = Accepts.prototype.languages = function(languages_) {
    var languages = languages_;
    if (languages && !Array.isArray(languages)) {
      languages = new Array(arguments.length);
      for (var i = 0; i < languages.length; i++) {
        languages[i] = arguments[i];
      }
    }
    if (!languages || languages.length === 0) {
      return this.negotiator.languages();
    }
    return this.negotiator.languages(languages)[0] || false;
  };
  function extToMime(type) {
    return type.indexOf('/') === -1 ? mime.lookup(type) : type;
  }
  function validMime(type) {
    return typeof type === 'string';
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("16a", ["169"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("169");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("16b", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = function(obj, keys) {
    obj = obj || {};
    if ('string' == typeof keys)
      keys = keys.split(/ +/);
    return keys.reduce(function(ret, key) {
      if (null == obj[key])
        return ret;
      ret[key] = obj[key];
      return ret;
    }, {});
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("16c", ["16b"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("16b");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("16d", ["53", "57", "60", "64", "aa", "ac", "93", "b7", "ca", "9c", "162", "16a", "a7", "8a", "160", "16c", "5e", "72", "3f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(Buffer, process) {
    var debug = require("53")('koa:application');
    var Emitter = require("57").EventEmitter;
    var compose_es7 = require("60");
    var onFinished = require("64");
    var response = require("aa");
    var compose = require("ac");
    var isJSON = require("93");
    var context = require("b7");
    var request = require("ca");
    var statuses = require("9c");
    var Cookies = require("162");
    var accepts = require("16a");
    var assert = require("a7");
    var Stream = require("8a");
    var http = require("160");
    var only = require("16c");
    var co = require("5e");
    var app = Application.prototype;
    exports = module.exports = Application;
    function Application() {
      if (!(this instanceof Application))
        return new Application;
      this.env = process.env.NODE_ENV || 'development';
      this.subdomainOffset = 2;
      this.middleware = [];
      this.context = Object.create(context);
      this.request = Object.create(request);
      this.response = Object.create(response);
    }
    Object.setPrototypeOf(Application.prototype, Emitter.prototype);
    app.listen = function() {
      debug('listen');
      var server = http.createServer(this.callback());
      return server.listen.apply(server, arguments);
    };
    app.inspect = app.toJSON = function() {
      return only(this, ['subdomainOffset', 'env']);
    };
    app.use = function(fn) {
      if (!this.experimental) {
        assert(fn && 'GeneratorFunction' == fn.constructor.name, 'app.use() requires a generator function');
      }
      debug('use %s', fn._name || fn.name || '-');
      this.middleware.push(fn);
      return this;
    };
    app.callback = function() {
      var mw = [respond].concat(this.middleware);
      var fn = this.experimental ? compose_es7(mw) : co.wrap(compose(mw));
      var self = this;
      if (!this.listeners('error').length)
        this.on('error', this.onerror);
      return function(req, res) {
        res.statusCode = 404;
        var ctx = self.createContext(req, res);
        onFinished(res, ctx.onerror);
        fn.call(ctx).catch(ctx.onerror);
      };
    };
    app.createContext = function(req, res) {
      var context = Object.create(this.context);
      var request = context.request = Object.create(this.request);
      var response = context.response = Object.create(this.response);
      context.app = request.app = response.app = this;
      context.req = request.req = response.req = req;
      context.res = request.res = response.res = res;
      request.ctx = response.ctx = context;
      request.response = response;
      response.request = request;
      context.onerror = context.onerror.bind(context);
      context.originalUrl = request.originalUrl = req.url;
      context.cookies = new Cookies(req, res, this.keys);
      context.accept = request.accept = accepts(req);
      context.state = {};
      return context;
    };
    app.onerror = function(err) {
      assert(err instanceof Error, 'non-error thrown: ' + err);
      if (404 == err.status || err.expose)
        return;
      if ('test' == this.env)
        return;
      var msg = err.stack || err.toString();
      console.error();
      console.error(msg.replace(/^/gm, '  '));
      console.error();
    };
    function* respond(next) {
      yield* next;
      if (false === this.respond)
        return;
      var res = this.res;
      if (res.headersSent || !this.writable)
        return;
      var body = this.body;
      var code = this.status;
      if (statuses.empty[code]) {
        this.body = null;
        return res.end();
      }
      if ('HEAD' == this.method) {
        if (isJSON(body))
          this.length = Buffer.byteLength(JSON.stringify(body));
        return res.end();
      }
      if (null == body) {
        this.type = 'text';
        body = this.message || String(code);
        this.length = Buffer.byteLength(body);
        return res.end(body);
      }
      if (Buffer.isBuffer(body))
        return res.end(body);
      if ('string' == typeof body)
        return res.end(body);
      if (body instanceof Stream)
        return body.pipe(res);
      body = JSON.stringify(body);
      this.length = Buffer.byteLength(body);
      res.end(body);
    }
  })(require("72").Buffer, require("3f"));
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("16e", ["16d"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("16d");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("16f", ["@empty"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var http = require("@empty");
  if (http.METHODS) {
    module.exports = http.METHODS.map(function(method) {
      return method.toLowerCase();
    });
  } else {
    module.exports = ['get', 'post', 'put', 'head', 'delete', 'options', 'trace', 'copy', 'lock', 'mkcol', 'move', 'purge', 'propfind', 'proppatch', 'unlock', 'report', 'mkactivity', 'checkout', 'merge', 'm-search', 'notify', 'subscribe', 'unsubscribe', 'patch', 'search', 'connect'];
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("170", ["16f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("16f");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("171", ["78"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var isarray = require("78");
  module.exports = pathToRegexp;
  module.exports.parse = parse;
  module.exports.compile = compile;
  module.exports.tokensToFunction = tokensToFunction;
  module.exports.tokensToRegExp = tokensToRegExp;
  var PATH_REGEXP = new RegExp(['(\\\\.)', '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^()])+)\\))?|\\(((?:\\\\.|[^()])+)\\))([+*?])?|(\\*))'].join('|'), 'g');
  function parse(str) {
    var tokens = [];
    var key = 0;
    var index = 0;
    var path = '';
    var res;
    while ((res = PATH_REGEXP.exec(str)) != null) {
      var m = res[0];
      var escaped = res[1];
      var offset = res.index;
      path += str.slice(index, offset);
      index = offset + m.length;
      if (escaped) {
        path += escaped[1];
        continue;
      }
      if (path) {
        tokens.push(path);
        path = '';
      }
      var prefix = res[2];
      var name = res[3];
      var capture = res[4];
      var group = res[5];
      var suffix = res[6];
      var asterisk = res[7];
      var repeat = suffix === '+' || suffix === '*';
      var optional = suffix === '?' || suffix === '*';
      var delimiter = prefix || '/';
      var pattern = capture || group || (asterisk ? '.*' : '[^' + delimiter + ']+?');
      tokens.push({
        name: name || key++,
        prefix: prefix || '',
        delimiter: delimiter,
        optional: optional,
        repeat: repeat,
        pattern: escapeGroup(pattern)
      });
    }
    if (index < str.length) {
      path += str.substr(index);
    }
    if (path) {
      tokens.push(path);
    }
    return tokens;
  }
  function compile(str) {
    return tokensToFunction(parse(str));
  }
  function tokensToFunction(tokens) {
    var matches = new Array(tokens.length);
    for (var i = 0; i < tokens.length; i++) {
      if (typeof tokens[i] === 'object') {
        matches[i] = new RegExp('^' + tokens[i].pattern + '$');
      }
    }
    return function(obj) {
      var path = '';
      var data = obj || {};
      for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];
        if (typeof token === 'string') {
          path += token;
          continue;
        }
        var value = data[token.name];
        var segment;
        if (value == null) {
          if (token.optional) {
            continue;
          } else {
            throw new TypeError('Expected "' + token.name + '" to be defined');
          }
        }
        if (isarray(value)) {
          if (!token.repeat) {
            throw new TypeError('Expected "' + token.name + '" to not repeat, but received "' + value + '"');
          }
          if (value.length === 0) {
            if (token.optional) {
              continue;
            } else {
              throw new TypeError('Expected "' + token.name + '" to not be empty');
            }
          }
          for (var j = 0; j < value.length; j++) {
            segment = encodeURIComponent(value[j]);
            if (!matches[i].test(segment)) {
              throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
            }
            path += (j === 0 ? token.prefix : token.delimiter) + segment;
          }
          continue;
        }
        segment = encodeURIComponent(value);
        if (!matches[i].test(segment)) {
          throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
        }
        path += token.prefix + segment;
      }
      return path;
    };
  }
  function escapeString(str) {
    return str.replace(/([.+*?=^!:${}()[\]|\/])/g, '\\$1');
  }
  function escapeGroup(group) {
    return group.replace(/([=!:$\/()])/g, '\\$1');
  }
  function attachKeys(re, keys) {
    re.keys = keys;
    return re;
  }
  function flags(options) {
    return options.sensitive ? '' : 'i';
  }
  function regexpToRegexp(path, keys) {
    var groups = path.source.match(/\((?!\?)/g);
    if (groups) {
      for (var i = 0; i < groups.length; i++) {
        keys.push({
          name: i,
          prefix: null,
          delimiter: null,
          optional: false,
          repeat: false,
          pattern: null
        });
      }
    }
    return attachKeys(path, keys);
  }
  function arrayToRegexp(path, keys, options) {
    var parts = [];
    for (var i = 0; i < path.length; i++) {
      parts.push(pathToRegexp(path[i], keys, options).source);
    }
    var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));
    return attachKeys(regexp, keys);
  }
  function stringToRegexp(path, keys, options) {
    var tokens = parse(path);
    var re = tokensToRegExp(tokens, options);
    for (var i = 0; i < tokens.length; i++) {
      if (typeof tokens[i] !== 'string') {
        keys.push(tokens[i]);
      }
    }
    return attachKeys(re, keys);
  }
  function tokensToRegExp(tokens, options) {
    options = options || {};
    var strict = options.strict;
    var end = options.end !== false;
    var route = '';
    var lastToken = tokens[tokens.length - 1];
    var endsWithSlash = typeof lastToken === 'string' && /\/$/.test(lastToken);
    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];
      if (typeof token === 'string') {
        route += escapeString(token);
      } else {
        var prefix = escapeString(token.prefix);
        var capture = token.pattern;
        if (token.repeat) {
          capture += '(?:' + prefix + capture + ')*';
        }
        if (token.optional) {
          if (prefix) {
            capture = '(?:' + prefix + '(' + capture + '))?';
          } else {
            capture = '(' + capture + ')?';
          }
        } else {
          capture = prefix + '(' + capture + ')';
        }
        route += capture;
      }
    }
    if (!strict) {
      route = (endsWithSlash ? route.slice(0, -2) : route) + '(?:\\/(?=$))?';
    }
    if (end) {
      route += '$';
    } else {
      route += strict && endsWithSlash ? '' : '(?=\\/|$)';
    }
    return new RegExp('^' + route, flags(options));
  }
  function pathToRegexp(path, keys, options) {
    keys = keys || [];
    if (!isarray(keys)) {
      options = keys;
      keys = [];
    } else if (!options) {
      options = {};
    }
    if (path instanceof RegExp) {
      return regexpToRegexp(path, keys, options);
    }
    if (isarray(path)) {
      return arrayToRegexp(path, keys, options);
    }
    return stringToRegexp(path, keys, options);
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("172", ["171"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("171");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("173", ["ac", "53", "172"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var compose = require("ac");
  var debug = require("53")('koa-router');
  var pathToRegExp = require("172");
  module.exports = Layer;
  function Layer(path, methods, middleware, opts) {
    this.opts = opts || {};
    this.name = this.opts.name || null;
    this.methods = [];
    this.paramNames = [];
    this.fns = {
      params: {},
      middleware: []
    };
    methods.forEach(function(method) {
      var l = this.methods.push(method.toUpperCase());
      if (this.methods[l - 1] === 'GET') {
        this.methods.unshift('HEAD');
      }
    }, this);
    if (!Array.isArray(middleware)) {
      middleware = [middleware];
    }
    middleware.forEach(function(fn) {
      var type = (typeof fn);
      if (type !== 'function') {
        throw new Error(methods.toString() + " `" + (this.opts.name || path) + "`: `middleware` " + "must be a function, not `" + type + "`");
      }
    }, this);
    this.fns.middleware = middleware;
    if (middleware.length > 1) {
      this.middleware = compose(middleware);
    } else {
      this.middleware = middleware[0];
    }
    this.path = path;
    this.regexp = pathToRegExp(path, this.paramNames, this.opts);
    debug('defined route %s %s', this.methods, this.path);
  }
  ;
  Layer.prototype.match = function(path) {
    return this.regexp.test(path);
  };
  Layer.prototype.params = function(path, captures, existingParams) {
    var params = existingParams || {};
    for (var len = captures.length,
        i = 0; i < len; i++) {
      if (this.paramNames[i]) {
        var c = captures[i];
        params[this.paramNames[i].name] = c ? safeDecodeURIComponent(c) : c;
      }
    }
    return params;
  };
  Layer.prototype.captures = function(path) {
    return path.match(this.regexp).slice(1);
  };
  Layer.prototype.url = function(params) {
    var args = params;
    var url = this.path;
    if (typeof params != 'object') {
      args = Array.prototype.slice.call(arguments);
    }
    if (args instanceof Array) {
      for (var len = args.length,
          i = 0; i < len; i++) {
        url = url.replace(/:[^\/]+/, args[i]);
      }
    } else {
      for (var key in args) {
        url = url.replace(':' + key, args[key]);
      }
    }
    url.split('/').forEach(function(component) {
      url = url.replace(component, encodeURIComponent(component));
    });
    return url;
  };
  Layer.prototype.param = function(param, fn) {
    var middleware = [];
    this.fns.params[param] = function*(next) {
      yield* fn.call(this, this.params[param], next);
    };
    this.paramNames.forEach(function(param) {
      var fn = this.fns.params[param.name];
      if (fn) {
        middleware.push(fn);
      }
    }, this);
    this.middleware = compose(middleware.concat(this.fns.middleware));
    return this;
  };
  Layer.prototype.setPrefix = function(prefix) {
    if (this.path) {
      this.path = prefix + this.path;
      this.paramNames = [];
      this.regexp = pathToRegExp(this.path, this.paramNames, this.opts);
    }
    return this;
  };
  function safeDecodeURIComponent(text) {
    try {
      return decodeURIComponent(text);
    } catch (e) {
      return text;
    }
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("174", ["ac", "53", "ae", "170", "173"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var compose = require("ac");
  var debug = require("53")('koa-router');
  var HttpError = require("ae");
  var methods = require("170");
  var Layer = require("173");
  module.exports = Router;
  function Router(opts) {
    if (!(this instanceof Router)) {
      return new Router(opts);
    }
    this.opts = opts || {};
    this.methods = this.opts.methods || ['HEAD', 'OPTIONS', 'GET', 'PUT', 'PATCH', 'POST', 'DELETE'];
    this.params = {};
    this.stack = [];
  }
  ;
  methods.forEach(function(method) {
    Router.prototype[method] = function(name, path, middleware) {
      var middleware;
      if (typeof path === 'string') {
        middleware = Array.prototype.slice.call(arguments, 2);
      } else {
        middleware = Array.prototype.slice.call(arguments, 1);
        path = name;
        name = null;
      }
      this.register(path, [method], middleware, {name: name});
      return this;
    };
  });
  Router.prototype.del = Router.prototype['delete'];
  Router.prototype.use = function(path, middleware) {
    var router = this;
    middleware = Array.prototype.slice.call(arguments);
    if (typeof path === 'string') {
      middleware = middleware.slice(1).filter(function(fn) {
        if (fn.router) {
          fn.router.stack.forEach(function(layer) {
            layer.setPrefix(path);
            if (router.opts.prefix) {
              layer.setPrefix(router.opts.prefix);
            }
            router.stack.push(layer);
          });
          return false;
        }
        return true;
      });
      if (middleware.length) {
        router.register(path, [], middleware, {end: false});
      }
    } else {
      router.register('/(.*)', [], middleware, {end: false});
    }
    return this;
  };
  Router.prototype.prefix = function(prefix) {
    this.opts.prefix = prefix;
    this.stack.forEach(function(route) {
      route.setPrefix(prefix);
    });
    return this;
  };
  Router.prototype.routes = Router.prototype.middleware = function() {
    var router = this;
    var dispatch = function* dispatch(next) {
      debug('%s %s', this.method, this.path);
      var path = router.opts.routerPath || this.routerPath || this.path;
      var matched = router.match(path, this.method);
      if (this.matched) {
        this.matched.push.apply(this.matched, matched.layers);
      } else {
        this.matched = matched.layers;
      }
      if (matched.route) {
        this.route = matched.route;
        this.captures = this.route.captures(path, this.captures);
        this.params = this.route.params(path, this.captures, this.params);
        debug('dispatch %s %s', this.route.path, this.route.regexp);
        next = matched.route.middleware.call(this, next);
        for (var i = 0,
            l = matched.middleware.length; i < l; i++) {
          next = matched.middleware[i].call(this, next);
        }
      }
      yield* next;
    };
    dispatch.router = this;
    return dispatch;
  };
  Router.prototype.allowedMethods = function(options) {
    options = options || {};
    var implemented = this.methods;
    return function* allowedMethods(next) {
      yield* next;
      var allowed = {};
      if (!this.status || this.status === 404) {
        this.matched.forEach(function(route) {
          route.methods.forEach(function(method) {
            allowed[method] = method;
          });
        });
        var allowedArr = Object.keys(allowed);
        if (!~implemented.indexOf(this.method)) {
          if (options.throw) {
            throw new HttpError.NotImplemented();
          } else {
            this.status = 501;
            this.set('Allow', allowedArr);
          }
        } else if (allowedArr.length) {
          if (this.method === 'OPTIONS') {
            this.status = 204;
          } else if (!allowed[this.method]) {
            if (options.throw) {
              throw new HttpError.MethodNotAllowed();
            } else {
              this.status = 405;
            }
          }
          this.set('Allow', allowedArr);
        }
      }
    };
  };
  Router.prototype.all = function(name, path, middleware) {
    var middleware;
    if (typeof path === 'string') {
      middleware = Array.prototype.slice.call(arguments, 2);
    } else {
      middleware = Array.prototype.slice.call(arguments, 1);
      path = name;
      name = null;
    }
    this.register(path, methods, middleware, {name: name});
    return this;
  };
  Router.prototype.redirect = function(source, destination, code) {
    if (source[0] !== '/') {
      source = this.url(source);
    }
    if (destination[0] !== '/') {
      destination = this.url(destination);
    }
    return this.all(source, function*() {
      this.redirect(destination);
      this.status = code || 301;
    });
  };
  Router.prototype.register = function(path, methods, middleware, opts) {
    opts = opts || {};
    var route = new Layer(path, methods, middleware, {
      end: opts.end === false ? opts.end : true,
      name: opts.name,
      sensitive: opts.sensitive || this.opts.sensitive || false,
      strict: opts.strict || this.opts.strict || false
    });
    if (this.opts.prefix) {
      route.setPrefix(this.opts.prefix);
    }
    Object.keys(this.params).forEach(function(param) {
      route.param(param, this.params[param]);
    }, this);
    this.stack.unshift(route);
    return route;
  };
  Router.prototype.route = function(name) {
    var routes = this.stack;
    for (var len = routes.length,
        i = 0; i < len; i++) {
      if (routes[i].name && routes[i].name === name) {
        return routes[i];
      }
    }
    return false;
  };
  Router.prototype.url = function(name, params) {
    var route = this.route(name);
    if (route) {
      var args = Array.prototype.slice.call(arguments, 1);
      return route.url.apply(route, args);
    }
    return new Error("No route found for name: " + name);
  };
  Router.prototype.match = function(path, method) {
    var layers = this.stack;
    var matched = [];
    var middleware = [];
    var route;
    var methods;
    for (var len = layers.length,
        i = 0; i < len; i++) {
      debug('test %s %s', layers[i].path, layers[i].regexp);
      if (layers[i].match(path)) {
        methods = layers[i].methods;
        if (method && methods.length && ~methods.indexOf(method)) {
          route = layers[i];
        }
        if (methods.length === 0) {
          middleware.push(layers[i].middleware);
        }
        matched.push(layers[i]);
      }
    }
    return {
      route: route,
      layers: matched,
      middleware: middleware
    };
  };
  Router.prototype.param = function(param, middleware) {
    this.params[param] = middleware;
    this.stack.forEach(function(route) {
      route.param(param, middleware);
    });
    return this;
  };
  Router.url = function(path, params) {
    return Layer.prototype.url.call({path: path}, params);
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("175", ["174"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("174");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("176", ["15a", "8a"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var util = require("15a");
  var Transform = require("8a").Transform;
  util.inherits(Counter, Transform);
  module.exports = Counter;
  function Counter(options) {
    if (!(this instanceof Counter))
      return new Counter(options);
    Transform.call(this, options);
    this.length = 0;
  }
  Counter.prototype._transform = function(chunk, encoding, callback) {
    this.length += chunk.length;
    this.push(chunk);
    callback();
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("177", ["176"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("176");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("178", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = function(n, options) {
    options = options || {};
    var d = options.delimiter || ',';
    var s = options.separator || '.';
    n = n.toString().split('.');
    n[0] = n[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + d);
    return n.join(s);
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("179", ["178"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("178");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("17a", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = function(size) {
    if ('number' == typeof size)
      return convert(size);
    var parts = size.match(/^(\d+(?:\.\d+)?) *(kb|mb|gb|tb)$/),
        n = parseFloat(parts[1]),
        type = parts[2];
    var map = {
      kb: 1 << 10,
      mb: 1 << 20,
      gb: 1 << 30,
      tb: ((1 << 30) * 1024)
    };
    return map[type] * n;
  };
  function convert(b) {
    var tb = ((1 << 30) * 1024),
        gb = 1 << 30,
        mb = 1 << 20,
        kb = 1 << 10,
        abs = Math.abs(b);
    if (abs >= tb)
      return (Math.round(b / tb * 100) / 100) + 'tb';
    if (abs >= gb)
      return (Math.round(b / gb * 100) / 100) + 'gb';
    if (abs >= mb)
      return (Math.round(b / mb * 100) / 100) + 'mb';
    if (abs >= kb)
      return (Math.round(b / kb * 100) / 100) + 'kb';
    return b + 'b';
  }
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("17b", ["17a"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("17a");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("17c", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
  module.exports = function(str) {
    if (typeof str !== 'string') {
      throw new TypeError('Expected a string');
    }
    return str.replace(matchOperatorsRe, '\\$&');
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("17d", ["17c"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("17c");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("17e", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  'use strict';
  function assembleStyles() {
    var styles = {
      modifiers: {
        reset: [0, 0],
        bold: [1, 22],
        dim: [2, 22],
        italic: [3, 23],
        underline: [4, 24],
        inverse: [7, 27],
        hidden: [8, 28],
        strikethrough: [9, 29]
      },
      colors: {
        black: [30, 39],
        red: [31, 39],
        green: [32, 39],
        yellow: [33, 39],
        blue: [34, 39],
        magenta: [35, 39],
        cyan: [36, 39],
        white: [37, 39],
        gray: [90, 39]
      },
      bgColors: {
        bgBlack: [40, 49],
        bgRed: [41, 49],
        bgGreen: [42, 49],
        bgYellow: [43, 49],
        bgBlue: [44, 49],
        bgMagenta: [45, 49],
        bgCyan: [46, 49],
        bgWhite: [47, 49]
      }
    };
    styles.colors.grey = styles.colors.gray;
    Object.keys(styles).forEach(function(groupName) {
      var group = styles[groupName];
      Object.keys(group).forEach(function(styleName) {
        var style = group[styleName];
        styles[styleName] = group[styleName] = {
          open: '\u001b[' + style[0] + 'm',
          close: '\u001b[' + style[1] + 'm'
        };
      });
      Object.defineProperty(styles, groupName, {
        value: group,
        enumerable: false
      });
    });
    return styles;
  }
  Object.defineProperty(module, 'exports', {
    enumerable: true,
    get: assembleStyles
  });
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("17f", ["17e"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("17e");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("180", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  module.exports = function() {
    return /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("181", ["180"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("180");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("182", ["181"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var ansiRegex = require("181")();
  module.exports = function(str) {
    return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
  };
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("183", ["182"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("182");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("184", ["181"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var ansiRegex = require("181");
  var re = new RegExp(ansiRegex().source);
  module.exports = re.test.bind(re);
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("185", ["184"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("184");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("186", ["3f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    var argv = process.argv;
    var terminator = argv.indexOf('--');
    var hasFlag = function(flag) {
      flag = '--' + flag;
      var pos = argv.indexOf(flag);
      return pos !== -1 && (terminator !== -1 ? pos < terminator : true);
    };
    module.exports = (function() {
      if ('FORCE_COLOR' in process.env) {
        return true;
      }
      if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false')) {
        return false;
      }
      if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true') || hasFlag('color=always')) {
        return true;
      }
      if (process.stdout && !process.stdout.isTTY) {
        return false;
      }
      if (process.platform === 'win32') {
        return true;
      }
      if ('COLORTERM' in process.env) {
        return true;
      }
      if (process.env.TERM === 'dumb') {
        return false;
      }
      if (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {
        return true;
      }
      return false;
    })();
  })(require("3f"));
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("187", ["186"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("186");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("188", ["17d", "17f", "183", "185", "187", "3f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    var escapeStringRegexp = require("17d");
    var ansiStyles = require("17f");
    var stripAnsi = require("183");
    var hasAnsi = require("185");
    var supportsColor = require("187");
    var defineProps = Object.defineProperties;
    var isSimpleWindowsTerm = process.platform === 'win32' && !/^xterm/i.test(process.env.TERM);
    function Chalk(options) {
      this.enabled = !options || options.enabled === undefined ? supportsColor : options.enabled;
    }
    if (isSimpleWindowsTerm) {
      ansiStyles.blue.open = '\u001b[94m';
    }
    var styles = (function() {
      var ret = {};
      Object.keys(ansiStyles).forEach(function(key) {
        ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');
        ret[key] = {get: function() {
            return build.call(this, this._styles.concat(key));
          }};
      });
      return ret;
    })();
    var proto = defineProps(function chalk() {}, styles);
    function build(_styles) {
      var builder = function() {
        return applyStyle.apply(builder, arguments);
      };
      builder._styles = _styles;
      builder.enabled = this.enabled;
      builder.__proto__ = proto;
      return builder;
    }
    function applyStyle() {
      var args = arguments;
      var argsLen = args.length;
      var str = argsLen !== 0 && String(arguments[0]);
      if (argsLen > 1) {
        for (var a = 1; a < argsLen; a++) {
          str += ' ' + args[a];
        }
      }
      if (!this.enabled || !str) {
        return str;
      }
      var nestedStyles = this._styles;
      var i = nestedStyles.length;
      var originalDim = ansiStyles.dim.open;
      if (isSimpleWindowsTerm && (nestedStyles.indexOf('gray') !== -1 || nestedStyles.indexOf('grey') !== -1)) {
        ansiStyles.dim.open = '';
      }
      while (i--) {
        var code = ansiStyles[nestedStyles[i]];
        str = code.open + str.replace(code.closeRe, code.open) + code.close;
      }
      ansiStyles.dim.open = originalDim;
      return str;
    }
    function init() {
      var ret = {};
      Object.keys(styles).forEach(function(name) {
        ret[name] = {get: function() {
            return build.call(this, [name]);
          }};
      });
      return ret;
    }
    defineProps(Chalk.prototype, init());
    module.exports = new Chalk();
    module.exports.styles = ansiStyles;
    module.exports.hasColor = hasAnsi;
    module.exports.stripColor = stripAnsi;
    module.exports.supportsColor = supportsColor;
  })(require("3f"));
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("189", ["188"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("188");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("18a", ["177", "179", "17b", "189", "3f"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    var Counter = require("177");
    var humanize = require("179");
    var bytes = require("17b");
    var chalk = require("189");
    var isatty = process.stdout.isTTY;
    module.exports = dev;
    var colorCodes = {
      5: 'red',
      4: 'yellow',
      3: 'cyan',
      2: 'green',
      1: 'green'
    };
    function dev(opts) {
      return function* logger(next) {
        var start = new Date;
        console.log('  ' + chalk.gray('<--') + ' ' + chalk.bold('%s') + ' ' + chalk.gray('%s'), this.method, this.originalUrl);
        try {
          yield next;
        } catch (err) {
          log(this, start, null, err);
          throw err;
        }
        var length = this.response.length;
        var body = this.body;
        var counter;
        if (null == length && body && body.readable) {
          this.body = body.pipe(counter = Counter()).on('error', this.onerror);
        }
        var ctx = this;
        var res = this.res;
        var onfinish = done.bind(null, 'finish');
        var onclose = done.bind(null, 'close');
        res.once('finish', onfinish);
        res.once('close', onclose);
        function done(event) {
          res.removeListener('finish', onfinish);
          res.removeListener('close', onclose);
          log(ctx, start, counter ? counter.length : length, null, event);
        }
      };
    }
    function log(ctx, start, len, err, event) {
      var status = err ? (err.status || 500) : (ctx.status || 404);
      var s = status / 100 | 0;
      var color = colorCodes[s];
      var length;
      if (~[204, 205, 304].indexOf(status)) {
        length = '';
      } else if (null == len) {
        length = '-';
      } else {
        length = bytes(len);
      }
      var upstream = err ? chalk.red('xxx') : event === 'close' ? chalk.yellow('-x-') : chalk.gray('-->');
      console.log('  ' + upstream + ' ' + chalk.bold('%s') + ' ' + chalk.gray('%s') + ' ' + chalk[color]('%s') + ' ' + chalk.gray('%s') + ' ' + chalk.gray('%s'), ctx.method, ctx.originalUrl, status, time(start), length);
    }
    function time(start) {
      var delta = new Date - start;
      delta = delta < 10000 ? delta + 'ms' : Math.round(delta / 1000) + 's';
      return humanize(delta);
    }
  })(require("3f"));
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("18b", ["18a"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("18a");
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("18c", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function() {
    var validator = new RegExp("^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$", "i");
    function gen(count) {
      var out = "";
      for (var i = 0; i < count; i++) {
        out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
      }
      return out;
    }
    function Guid(guid) {
      if (!guid)
        throw new TypeError("Invalid argument; `value` has no value.");
      this.value = Guid.EMPTY;
      if (guid && guid instanceof Guid) {
        this.value = guid.toString();
      } else if (guid && Object.prototype.toString.call(guid) === "[object String]" && Guid.isGuid(guid)) {
        this.value = guid;
      }
      this.equals = function(other) {
        return Guid.isGuid(other) && this.value == other;
      };
      this.isEmpty = function() {
        return this.value === Guid.EMPTY;
      };
      this.toString = function() {
        return this.value;
      };
      this.toJSON = function() {
        return this.value;
      };
    }
    ;
    Guid.EMPTY = "00000000-0000-0000-0000-000000000000";
    Guid.isGuid = function(value) {
      return value && (value instanceof Guid || validator.test(value.toString()));
    };
    Guid.create = function() {
      return new Guid([gen(2), gen(1), gen(1), gen(1), gen(3)].join("-"));
    };
    Guid.raw = function() {
      return [gen(2), gen(1), gen(1), gen(1), gen(3)].join("-");
    };
    if (typeof module != 'undefined' && module.exports) {
      module.exports = Guid;
    } else if (typeof window != 'undefined') {
      window.Guid = Guid;
    }
  })();
  global.define = __define;
  return module.exports;
});

$__System.registerDynamic("18d", ["18c"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("18c");
  global.define = __define;
  return module.exports;
});

$__System.register('18e', ['49', '18d'], function (_export) {
    var _regeneratorRuntime, Guid, azure, azureTableService, entGen, controller;

    return {
        setters: [function (_) {
            _regeneratorRuntime = _['default'];
        }, function (_d) {
            Guid = _d['default'];
        }],
        execute: function () {
            'use strict';

            azure = require('azure-storage');
            azureTableService = azure.createTableService('sc2iq', 'sxSu1H9mUeJvkrixmdD5EN+GdRx92XcR4tw1gnUl+rpfEim3c7w9ruIy3lO7aEuF3/TWWl5cj6KwMi/bY8cwkw==');

            azureTableService.createTableIfNotExists('mytable', function (error, result, response) {
                if (!error) {
                    // Table exists or created
                }
            });

            entGen = azure.TableUtilities.entityGenerator;
            controller = {
                basePath: '/api',

                getName: '/assignments',
                get: _regeneratorRuntime.mark(function get(next) {
                    var guid, entity;
                    return _regeneratorRuntime.wrap(function get$(context$1$0) {
                        while (1) switch (context$1$0.prev = context$1$0.next) {
                            case 0:
                                guid = Guid.raw();
                                entity = {
                                    PartitionKey: entGen.String('assignments'),
                                    RowKey: entGen.String(guid),
                                    boolValueTrue: entGen.Boolean(true),
                                    boolValueFalse: entGen.Boolean(false),
                                    intValue: entGen.Int32(42),
                                    dateValue: entGen.DateTime(new Date(Date.UTC(2011, 10, 25))),
                                    complexDateValue: entGen.DateTime(new Date(Date.UTC(2013, 2, 16, 1, 46, 20)))
                                };

                                azureTableService.insertEntity('mytable', entity, function (error, result, response) {
                                    if (!error) {
                                        // Entity inserted
                                    }
                                });

                                this.body = 'GET: assignments from imported controller: ' + guid + '\n      ' + JSON.stringify(entity, null, '  ') + '\n    ';

                            case 4:
                            case 'end':
                                return context$1$0.stop();
                        }
                    }, get, this);
                })
            };

            _export('default', controller);
        }
    };
});
$__System.register('18f', ['49'], function (_export) {
  var _regeneratorRuntime, controller;

  return {
    setters: [function (_) {
      _regeneratorRuntime = _['default'];
    }],
    execute: function () {
      'use strict';

      controller = {
        basePath: '/api',

        getName: '/sections',
        get: _regeneratorRuntime.mark(function get(next) {
          return _regeneratorRuntime.wrap(function get$(context$1$0) {
            while (1) switch (context$1$0.prev = context$1$0.next) {
              case 0:
                context$1$0.next = 2;
                return next;

              case 2:
                this.body = 'GET: assignments from imported controller: ' + Guid.raw();

              case 3:
              case 'end':
                return context$1$0.stop();
            }
          }, get, this);
        })
      };

      _export('default', controller);
    }
  };
});
$__System.register('190', ['18e', '18f'], function (_export) {
  'use strict';

  var assignments, sections;
  return {
    setters: [function (_e) {
      assignments = _e['default'];
    }, function (_f) {
      sections = _f['default'];
    }],
    execute: function () {
      _export('assignments', assignments);

      _export('sections', sections);
    }
  };
});
$__System.register('1', ['49', '175', '190', '4e', '16e', '18b'], function (_export) {
  var _regeneratorRuntime, Router, controllers, _Object$keys, koa, logger, app, router;

  return {
    setters: [function (_) {
      _regeneratorRuntime = _['default'];
    }, function (_2) {
      Router = _2['default'];
    }, function (_3) {
      controllers = _3;
    }, function (_e) {
      _Object$keys = _e['default'];
    }, function (_e2) {
      koa = _e2['default'];
    }, function (_b) {
      logger = _b['default'];
    }],
    execute: function () {
      'use strict';

      app = koa();
      router = Router();

      app.use(router.routes());
      app.use(router.allowedMethods());
      app.use(logger());

      app.use(_regeneratorRuntime.mark(function responseTime(next) {
        var start, ms;
        return _regeneratorRuntime.wrap(function responseTime$(context$1$0) {
          while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
              start = new Date();
              context$1$0.next = 3;
              return next;

            case 3:
              ms = new Date() - start;

              this.set('X-Response-Time', ms + 'ms');

            case 5:
            case 'end':
              return context$1$0.stop();
          }
        }, responseTime, this);
      }));

      _Object$keys(controllers).forEach(function (controllerName) {
        var controller = controllers[controllerName];
        _Object$keys(controller).forEach(function (key) {
          var value = controller[key];
          if (typeof value === 'function') {
            var path = '' + controller.basePath + controller[key + 'Name'];
            console.log('Registring: controller:' + path);
            router.get(path, value);
          }
        });
      });

      app.init = function () {
        var port = process.env.PORT || 44360;
        app.listen(port);
        console.log('Running: ' + process.title + ' ' + process.version);
        console.log('Listening on port: ' + port);
      };

      app.init();
    }
  };
});
})
(function(factory) {
  factory();
});
//# sourceMappingURL=server.js.map